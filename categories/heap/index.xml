<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Heap on Welcome to Rokkenjima</title>
        <link>/categories/heap/</link>
        <description>Recent content in Heap on Welcome to Rokkenjima</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 06 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/heap/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Protostar Format 3 Walkthrough</title>
        <link>/p/protostar_heap_3/</link>
        <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/protostar_heap_3/</guid>
        <description>&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;其实到目前为止我并没有全部理解&lt;/p&gt;
&lt;p&gt;但是因为思路很乱有点理不清了，所以姑且把已经理解的部分记下来&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://phrack.org/issues/57/9.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Once upon a free()&amp;hellip;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://conceptofproof.wordpress.com/2013/11/19/protostar-heap3-walkthrough/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Protostar Heap3 Walkthrough | conceptofproof&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/HWhzH--89UQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Heap: dlmalloc unlink() exploit - bin 0x18&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dlmalloc-basics&#34;&gt;Dlmalloc Basics&lt;/h2&gt;
&lt;p&gt;使用中的 chunk：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prev_size&lt;/code&gt;: 4 bytes 用于标注前一个 chunk 的大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: 4 bytes 用于标注当前 chunk 的大小，且最后三&lt;strong&gt;比特&lt;/strong&gt;用于标记：
&lt;ol&gt;
&lt;li&gt;倒数第一位用于标记前一个 chunk 是否被使用&lt;/li&gt;
&lt;li&gt;倒数第二位用于标记当前 chunk 是否已通过 mmap 分配&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NAME&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mmap, munmap - map or unmap files or devices into memory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SYNOPSIS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;sys/mman.h&amp;gt;
void *mmap(void *addr, size_t length, int prot, int flags,
int fd, off_t offset);
int munmap(void *addr, size_t length);&lt;/p&gt;
&lt;p&gt;See NOTES for information on feature test macro requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DESCRIPTION&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mmap() creates a new mapping in the virtual address space of the
calling process.  The starting address for the new mapping is
specified in addr.  The length argument specifies the length of
the mapping (which must be greater than 0).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    chunk -&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | prev_size: size of the previous chunk, in bytes (used   |
             | by dlmalloc only if this previous chunk is free)        |
             +---------------------------------------------------------+
             | size: size of the chunk (the number of bytes between    |
             | &amp;#34;chunk&amp;#34; and &amp;#34;nextchunk&amp;#34;) and 2 bits status information  |
      mem -&amp;gt; +---------------------------------------------------------+
             | fd: not used by dlmalloc because &amp;#34;chunk&amp;#34; is allocated   |
             | (user data therefore starts here)                       |
             + - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
             | bk: not used by dlmalloc because &amp;#34;chunk&amp;#34; is allocated   |
             | (there may be user data here)                           |
             + - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
             |                                                         .
             .                                                         .
             . user data (may be 0 bytes long)                         .
             .                                                         .
             .                                                         |
nextchunk -&amp;gt; + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
             | prev_size: not used by dlmalloc because &amp;#34;chunk&amp;#34; is      |
             | allocated (may hold user data, to decrease wastage)     |
             +---------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;已 free 的 chunk：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fd&lt;/code&gt;: 4 bytes 指向双向链表的前一个 chunk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bk&lt;/code&gt;: 4 bytes 指向双向链表的后一个 chunk&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    chunk -&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | prev_size: may hold user data (indeed, since &amp;#34;chunk&amp;#34; is |
             | free, the previous chunk is necessarily allocated)      |
             +---------------------------------------------------------+
             | size: size of the chunk (the number of bytes between    |
             | &amp;#34;chunk&amp;#34; and &amp;#34;nextchunk&amp;#34;) and 2 bits status information  |
      mem -&amp;gt; +---------------------------------------------------------+
             | fd: forward pointer to the next chunk in the circular   |
             | doubly-linked list (not to the next _physical_ chunk)   |
             +---------------------------------------------------------+
             | bk: back pointer to the previous chunk in the circular  |
             | doubly-linked list (not the previous _physical_ chunk)  |
             +---------------------------------------------------------+
             |                                                         .
             .                                                         .
             . unused space (may be 0 bytes long)                      .
             .                                                         .
             .                                                         |
nextchunk -&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | prev_size: size of &amp;#34;chunk&amp;#34;, in bytes (used by dlmalloc  |
             | because this previous chunk is free)                    |
             +---------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一个 chunk 即将被 free，那么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个 chunk &lt;strong&gt;是&lt;/strong&gt;通过 mmap 分配的，那么调用 &lt;code&gt;munmap_chunk()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果这个 chunk &lt;strong&gt;不是&lt;/strong&gt;通过 mmap 分配的，那么调用 &lt;code&gt;chunk_free()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;INTERNAL_SIZE_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PREV_INUSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/* consolidate backward */&lt;/span&gt;    &lt;span class=&#34;cm&#34;&gt;/* [A] */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;prevsz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;chunk_at_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prevsz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                 &lt;span class=&#34;cm&#34;&gt;/* [B] */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prevsz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_remainder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;islr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nf&#34;&gt;unlink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;chunk_free()&lt;/code&gt; 函数中，有另一个需要注意的函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果前一个 chunk 也被 free 了的话，那么会调用  &lt;code&gt;unlink()&lt;/code&gt;， 以确保双向链表的准确链接：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define unlink( P, BK, FD ) {           
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;BK&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;		&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;           
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;FD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;		\
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;FD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;                
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;BK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;                       
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/p/protostar_heap_3/unlink.png&#34;
	width=&#34;1364&#34;
	height=&#34;1206&#34;
	srcset=&#34;/p/protostar_heap_3/unlink_hu024e824d3d83b4bf15fc9447887d5f49_174732_480x0_resize_box_3.png 480w, /p/protostar_heap_3/unlink_hu024e824d3d83b4bf15fc9447887d5f49_174732_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;when unlink&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;271px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;以及，如果 chunk 小于 64 bytes，那么 malloc 会使用另一个简化版的数据结构，被称为 &lt;code&gt;fastbin&lt;/code&gt;，而不是上述的双向链表&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;heap-three&#34;&gt;Heap Three&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This level introduces the Doug Lea Malloc (dlmalloc) and how heap meta data can be modified to change program execution.&lt;/p&gt;
&lt;p&gt;This level is at /opt/protostar/bin/heap3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;winner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;that wasn&amp;#39;t too bad now, was it? @ %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;strcpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dynamite failed?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;我们的目标是把 &lt;code&gt;puts()&lt;/code&gt; 在 Global Offset Table 中记录的地址上，写上能跳转到 &lt;code&gt;winner()&lt;/code&gt; 的 shellcode&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://shell-storm.org/online/Online-Assembler-and-Disassembler/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;可使用这个工具&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;push 0x08048864
ret

Assembly - Little Endian:
&amp;#34;\x68\x64\x88\x04\x08\xc3&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而能帮我们达到以上目的的函数就是 &lt;code&gt;free()&lt;/code&gt;， 准确来说是 &lt;code&gt;unlink()&lt;/code&gt;，思路如下：&lt;/p&gt;
&lt;p&gt;首先 &lt;code&gt;strcpy()&lt;/code&gt; 不会检查字符数量，所以可以在堆上写多于 buffer 大小的字符&lt;/p&gt;
&lt;p&gt;还记得前面提到的 &lt;code&gt;unlink()&lt;/code&gt; 么，它可以往 &lt;code&gt;P-&amp;gt;fd&lt;/code&gt; 和 &lt;code&gt;P-&amp;gt;bk&lt;/code&gt; 上写值&lt;/p&gt;
&lt;p&gt;这样的话我们可以通过指向 chunk A 的 第一个 &lt;code&gt;strcpy()&lt;/code&gt; 在堆上写出一个 fake chunk，&lt;/p&gt;
&lt;p&gt;并欺骗 &lt;code&gt;free()&lt;/code&gt; 函数（和里面的  &lt;code&gt;unlink()&lt;/code&gt; ），让它以为 fake chunk 在即将被 &lt;code&gt;free()&lt;/code&gt; 的 chunk 之前，以此欺骗  &lt;code&gt;unlink()&lt;/code&gt; 往我们所想要的地址写值&lt;/p&gt;
&lt;p&gt;而这个「即将被 free 的 chunk」我们就用 chunk B 吧，&lt;/p&gt;
&lt;p&gt;那么 chunk B应具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt; 大小大于 64 bytes
不然会使用 &lt;code&gt;fastbin&lt;/code&gt; 而不是双向链表
实现思路是让 &lt;code&gt;size&lt;/code&gt; 大于 64（废话&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前一个 chunk 看起来已被 free
不然就不会 &lt;code&gt;unlink()&lt;/code&gt; 函数连接来两个双向链表
实现思路是让 &lt;code&gt;size&lt;/code&gt; 的最后一个比特为零&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两点是 &lt;code&gt;unlink()&lt;/code&gt; 会被调用的先决条件
具体实现，是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;size&lt;/code&gt; 写一个负值 &lt;code&gt;0xfffffffc&lt;/code&gt;，即 &lt;code&gt;-4&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个值在同时满足以上条件的同时，还有另一个特点，就是在计算下一个 chunk 时，使用的是 &lt;code&gt;chunk B + size&lt;/code&gt; 即 &lt;code&gt;P + (-4)&lt;/code&gt;，那么就是在 chunk B 开头向前 4 bytes 的位置（实际上这里是 chunk A 的范围）&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在 &lt;code&gt;prev_size&lt;/code&gt; 上写上 &lt;code&gt;0xfffffff8&lt;/code&gt;，即 &lt;code&gt;-8&lt;/code&gt;，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;计算上一个 chunk 时 &lt;code&gt;chunk B - prev_size&lt;/code&gt; 即 &lt;code&gt;chunk B - (-8)&lt;/code&gt;，那么就是在 chunk B 开头向后 8 bytes 的位置，也就是 mem ，而这里就是我们可以通过指向 chunk B 的 mem 的第二个 &lt;code&gt;strcpy()&lt;/code&gt; 来写我们的 fake chunk 的位置&lt;/p&gt;
&lt;!--[if IE]&gt;&lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=5,IE=9&#34; &gt;&lt;![endif]--&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Untitled Diagram&lt;/title&gt;
&lt;meta charset=&#34;utf-8&#34;/&gt;
&lt;/head&gt;
&lt;body&gt;&lt;div class=&#34;mxgraph&#34; style=&#34;max-width:100%;border:1px solid transparent;&#34; data-mxgraph=&#34;{&amp;quot;highlight&amp;quot;:&amp;quot;#0000ff&amp;quot;,&amp;quot;nav&amp;quot;:true,&amp;quot;resize&amp;quot;:true,&amp;quot;toolbar&amp;quot;:&amp;quot;zoom layers tags lightbox&amp;quot;,&amp;quot;edit&amp;quot;:&amp;quot;_blank&amp;quot;,&amp;quot;xml&amp;quot;:&amp;quot;&amp;lt;mxfile host=\&amp;quot;app.diagrams.net\&amp;quot; modified=\&amp;quot;2022-04-06T08:54:40.591Z\&amp;quot; agent=\&amp;quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Safari/605.1.15\&amp;quot; etag=\&amp;quot;dhEpq4yiQHziwCyBc8yo\&amp;quot; version=\&amp;quot;17.4.0\&amp;quot; type=\&amp;quot;device\&amp;quot;&amp;gt;&amp;lt;diagram id=\&amp;quot;9m9pWsRvkve3vRoIh5zU\&amp;quot; name=\&amp;quot;Page-1\&amp;quot;&amp;gt;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&amp;lt;/diagram&amp;gt;&amp;lt;/mxfile&amp;gt;&amp;quot;}&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://viewer.diagrams.net/js/viewer-static.min.js&#34;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
        </item>
        
    </channel>
</rss>
