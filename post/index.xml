<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Senri&#39;s Memo</title>
    <link>/post/</link>
    <description>Recent content in Posts on Senri&#39;s Memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>格式，魔法，红宝石</title>
      <link>/p/protostar_format_1/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/p/protostar_format_1/</guid>
      <description>☞ 最终的 Ruby 脚本放在了这里
Format One ☞ Protostar Format One
 This level shows how format strings can be used to modify arbitrary memory locations.
Hints
 objdump -t is your friend, and your input string lies far up the stack :)  This level is at /opt/protostar/bin/format1
 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int target;  void vuln(char *string) {  printf(string);   if(target) {  printf(&amp;#34;you have modified the target :)\n&amp;#34;);  } }  int main(int argc, char **argv) {  vuln(argv[1]); } Argv[1], %p, Breadcrumb 乍一看，感觉好简单x</description>
    </item>
    
    <item>
      <title>Protostar Format 0-4 Walkthrough</title>
      <link>/p/protostar_format_0-4/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/p/protostar_format_0-4/</guid>
      <description>所有的 ruby 脚本已经放在了这里
Protostar ☞ Protostar
Protostar introduces the following in a friendly way:
 Network programming Byte order Handling sockets Stack overflows Format strings Heap overflows The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode.  In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled.</description>
    </item>
    
    <item>
      <title>[hidden] Protostar Stack 0-3 Walkthrough</title>
      <link>/p/protostar_stack_0-3/</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/p/protostar_stack_0-3/</guid>
      <description>Stack Four ~ Six ☞ kokodayo
Stack Zero  This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.
This level is at /opt/protostar/bin/stack0
 #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; int main(int argc, char **argv) {  volatile int modified;  char buffer[64];   modified = 0;  gets(buffer);   if(modified !</description>
    </item>
    
    <item>
      <title>Protostar Stack 0-7 Walkthrough</title>
      <link>/p/protostar_stack_4-7/</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/p/protostar_stack_4-7/</guid>
      <description>所有的 python 脚本已经放在了这里
Protostar ☞ Protostar
Protostar introduces the following in a friendly way:
 Network programming Byte order Handling sockets Stack overflows Format strings Heap overflows The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode.  In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled.</description>
    </item>
    
    <item>
      <title>【已失效】关于网易云的音乐如何保留完整 Meta 信息着导入 iTunes</title>
      <link>/p/netease-to-itunes/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/netease-to-itunes/</guid>
      <description>！失效了 ！
有人发现上面这个是在模仿黑魂一的「中毒了」提示么x
选项 #1  
选项 #2 mp3.aoleiao.com
叹气气 总之以后就方便多了
这篇还是姑且留在这里吧..
首先的话..姑且先是常规操作
基操 Mac 上的格式转换软件 这里只推荐 XLD，真的yyds（
 XLD 
免费功能还多还方便
顺带一提： 很重要的一件事情就是 iTunes 不认识 Flac 的所以建议全部导出成 Apple Loseless
网易云私有格式 NCM → FLAC / MP3 这里的话..直接用 这个 ncm.worthsee.com 就能全部转换
唯一的问题是，至少在 Safari 上的「批量下载」是会有遗漏的&amp;hellip;所以还是一首一首点比较好
坑：
很离谱，转换出来如果是 Flac 的话所有的 Meta 信息都会丢失..
封面艺术家专辑名之类的全部没了x 草
&amp;hellip;总之请继续往后看吧
Mac 上的 Meta 信息编辑软件 推荐软件：就叫「META」
可以批量编辑，也可以搜索 iTunes Store 的专辑封面帮你填充上去
 Meta 
进阶 关于因为 NCM → FLAC 所造成的 Meta 信息丢失的「批量」解决办法 姑且有以下解决办法：</description>
    </item>
    
    <item>
      <title>关于 2021 年捡垃圾是选 XR 还是 XS 的笔记</title>
      <link>/p/2021-ip-xr-or-xs/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/2021-ip-xr-or-xs/</guid>
      <description>还是选 iPhone 是因为咱是 iCloud 的重度用户而且和 Mac 结合非常方便
  因为只是「笔记」所以本文充满了我的偏见与独断x
  截止目前2021.7.27，同样是二手、国行、九新+、256G
XR 和 XS 的价格都在 2500 左右，
且 XR 会稍微便宜一点（也就在两三百左右
  接下来记录一下自己查资料时的一些思路
外观 &amp;amp; 手感 不得不说我感觉 XR 的单摄像头好好看啊啊啊啊
而且花里胡哨的颜色
但好像很多人对 XR 的边框很不满
但我平常是看屏幕不是看边框啊喂，停航母边框又咋样、反正我也不戴tao——
* 看了下自己背面全是坑正面玻璃全碎的 6S
我觉得可能还是戴套比较好。
顺便因为 XR 还挺厚，
所以至少 XS 戴套的话正面无论看起来还是操作起来都会优于 XR 的吧
（话说上一句话不应该是归类于#屏幕节么x
 所以对我来说的话，
如果都戴套：
手感：XS &amp;gt; XR
外观：半斤八两，虽然 XS 赢了正面但背面果然还是 XR 好看
 续航 毕竟这个 6S 已经&amp;hellip;2015 年发布到现在已经 6 年了所以电池实在是&amp;hellip;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/p/about/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/about/</guid>
      <description>欢迎来到 Kurusu Senri 的杂物堆
这里没有樱花雪花满屏飞舞；但是因为好好看又加了回来
没有 Pjax 无刷新加载；kuso明明就是你这次弄不出来吧喂
也没有打字机特效的书摘；这个真的只是觉得没合适的地方放
也没有文章（草

或多或少是因为上一个博客有点玩腻了这些&amp;hellip;
毕竟 Senri 乃抛弃了过去之人x
 （所以也千万别试图知道 Senri 曾经是谁啊啊啊啊！
（毕竟得和现实保持分开来&amp;hellip;不然被认出来了就会很可怕因为是深柜 MtF&amp;hellip;  然而确实还没有想好这里到底要用来干嘛w
先来一点介绍姑且
Kurusu Senri · 来栖 千理
  废物高中生
绝对
  含糖 &amp;amp; 深柜 MtF
三无少女（？
指的是没有天赋没有年龄没有家长x
  INFP-T
感觉是个 MtF 都是 INFP-T 么
  Java 苦手
算是看着文档自学的x
  C# 学习中
听说学 C# 的不是疯了就是变女孩子了所以我要！
  要找我的话在这里&amp;hellip;</description>
    </item>
    
    <item>
      <title>Visual Studio Mac 代码格式化快捷键</title>
      <link>/p/mac-vs-code-format/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/mac-vs-code-format/</guid>
      <description>Control + i</description>
    </item>
    
    <item>
      <title>Lorem ipsum</title>
      <link>/p/markdown-references/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/markdown-references/</guid>
      <description>Markdown For Typora Overview Markdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown.
[toc]
Block Elements Paragraph and line breaks A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph.</description>
    </item>
    
    <item>
      <title>選択・1986.10.5・六軒島</title>
      <link>/p/senntaku/</link>
      <pubDate>Sun, 05 Oct 1986 00:00:00 +0000</pubDate>
      
      <guid>/p/senntaku/</guid>
      <description>以下に掲げる三つの内。
二つを得るために、一つを生贄に捧げよ。
一．自分の命
二．愛する者の命
三．それ以外の全員の命
何れも選ばねば、上記の全てを失う。
以下三者中
为了得到另外两者，必须牺牲其一
一．自己的生命
二．所爱之人的生命
三．初次之外的所有人的生命
如果不选择其中任何一项，则将会失去上述全部</description>
    </item>
    
  </channel>
</rss>
